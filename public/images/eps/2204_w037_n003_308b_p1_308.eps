%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 4/11/2022
%%BoundingBox: 0 0 829 400
%%HiResBoundingBox: 0 0 828.6160 400
%%CropBox: 0 0 828.6160 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 9782 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDCEFFA8FD40FFCFFD7FFFCFC2C9C9FD11FFA8FFA8
%FFA8FD12FFCFC9FFCAFD09FFA8FFA8FFA8FFA8FFA8FD2DFFA8FD10FFC9C8
%C1C9FD28FFC9C8C8C9FD12FFA8527DFD1BFFCFCFFD0EFFA8FD0EFFC9C8C1
%C7C8FD0FFFA8FFA8FFA8FFA8FFA8FFA8FD0DFFC9C8C1C7C9FD12FFA82020
%27A8FD0EFFA8FD09FFCAC8C1CFFD0CFFA8FFA8FD0EFFCFC8C8CFCFFD05FF
%A8FD21FFC8C8C1C9FD13FFA06FF827FD18FFCFC1C8C8FD1EFFC9FD07FFA8
%A8A8FD21FFC2CFCAFD07FFA8FD0BFF7D7D3559A8FD0DFFA8FD09FFCAC9C2
%FD0DFFA8FD1AFFA8FD2BFFA8FFA9FD09FF8485618B618BFD0EFFA8FD32FF
%A8A8A8FD13FFA8FFA8FD11FFA8FFA8FFA8FFA8FFA8FD04FFAF60605A8560
%855A85FD0CFFA8FD19FFA8FD1AFFA8FD11FFA8FFA8FFA8FFA8FD11FFA8FF
%A9FFA8FFA8FFFFFFAF8B6085608560855A8560FD07FFA8FD1FFFA8FD18FF
%A8A8A8FD0FFFA8A9A8FFA8FFA8FFA8FD18FFCA6F7D60615A8560855A8560
%61A8FD06FFA8A8FFFFFFA8FD13FFA8FFFFA87DFFA8FD1AFFA8FD31FFC399
%A18560AFAF849AA86185A9FD07FFA8FFA8FD15FF524BA17D2051FD1CFFA8
%A8FFFFFFA8FD1AFF7DF8A8FD10FFCAFFA9FFFFFF76759A7EA8FD07FFA8A8
%A8FFFFFFA8FD10FFA8266E767C6F9AA8FD1CFFA8FFFFFFA8FD1BFF4B4AA8
%FD15FF7DA19A7D76A2FD08FFA8A9FD10FF7D7DFFFF7DA1A1FFA8A884FD1D
%FFCBA8FFFFFFA8FD1AFFA199CFFFFFA8FFA8A7A0FD0DFFA87D76A1767776
%FD09FFA8FFFFFFA8FD0BFFA820F8A8FFFF5A8584855A85A8FD3AFFA95928
%7DFD04532F536F99CAFD0CFFCB77A17DA177A1A8FD07FFA9A9FD10FFA075
%A8FFFFA97F8584857FA9FD21FFA8FD18FF53282F282F2828282F0677CAFD
%0DFFA17776A1767776A8FD08FFA8FD0FFFA8A199A8A8A97E8584855A857E
%FD39FFA82853282F2853282F285984FD0EFFA8777D77A1777D77FD07FFA8
%A9FD0EFF7D7D77A1767D7D857E8585857E85FD21FFA8FD07FFCAC9FD0EFF
%5328282F282853A87EA9FD10FF7D77767D7D777677A8FD06FFA9A8FD0DFF
%A177767D767776A07D855A855A7F7EFD18FF7D7DFD0EFFCFC8C1CFFD0CFF
%AF532853282F28A9FD13FFA877A177A877A176CAFD06FFA8FD0EFFC29AA1
%7DA17DC3BCC385A985857EFD18FFA827F8A8FD0EFFC8C8CAFD0CFFA92853
%537E535484FD13FFA2777777A1A177777DFD11FFA9FFA8FFBCC2A8FFA9C3
%99BCC3FFA8FFFD05A8FD15FF274A99A7FD0FFFCFFD07FFA1FD05FFCAA076
%A9858585A9FD13FFCB77A177A8A1A177A1A8FD13FFA8C3C2FFFFC9BCC2C3
%FD05FFA8A9A8A9A8FD12FFA87D007675A8FD16FFCA9AA1FD04FFCA99A17E
%7F7E857EFD13FFA87D76A1A1A876A19ACFFD10FFA8A9AFFFA09AC9A16EC3
%CAFD05FFFD05A8FD13FF27005A53547DFD17FFA1A1A8FFFFFF77A1A9857E
%A98585FD14FFA1A1A1CAFFCAC2C8C9FD0FFF272727A8A8C96FC376A1A8FF
%A8CBA8CBFD04A8A2A8A8CAFD11FF525253532F537DFD16FFA276A152277D
%7777AF7E857E855AAFFD12FFCFC9C1C8CFFFA7C8A07DA8FD0DFF52F84B76
%767776A0CAFFA8FFA8CBA8FFA8CBA8CBFD05A8FD12FF7D53537D53A1C3FD
%15FFA27D774C4B7D77A2A9857EA97E85A9FD11FFC9C8C2C8C2FFCFC8A07D
%A8FD0EFF52F8A1767D535377FFFFFFA9FFFFFFA9FFFFFFA8FFA8FFA8FFCB
%FD10FFA97D53779A7DA0C29975A0FD13FF777776A07677A1A95A857E855A
%A9FD10FF7D77767D767DA87D53537DFFA8FFA8FFA8FD09FF5229FD04532F
%537DA8A1A27DA8A1A27DA8A1A27DA87DA27DFD12FF2F7E9AC2BCC9C3C9A1
%C9FD12FFA87777A177A177FFA9857FA97E8585FD0EFFA9A2A87DA8A8A9A8
%A9A8A9A8FFA8A9A8CBA8A9FD09FF7E5354537E2F5A7ECBA8A8A8A9A8A8A8
%A9A8A8A8A9A8CBA8FD13FF7D527D76C3BC9976FD14FF52F87D777776A8FF
%A95A8584855A85A9FD0DFF7DA87DA8A8FFA8FFA8FFA8FFA8FFA8A9A8A9A8
%FD09FFFD05537D7DA8A8FFA8FFA8FFA8FFA8FFA8A8A8A9A8FD14FFC8C8C2
%C9CAFFA1C9FD14FF52F852A177A1FFFF85857EA985857EFD0EFFA87EA8A2
%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FD0AFF7E2F7D537DA1A0A1FFA8FFA8FF
%A8FFA8FFA8FFA8A9A8FD14FFCAC8C2C9A0CFFD05FFCAA0CAFD04FFA87DA8
%FD09FF7D7D767D77A87E855A5A7E855A7F84FD0BFFA8A87DA27DA27DA87D
%A87EA87DA87EA87DA8A2A87DA8A8FD07FF53532F53537DA1A27EA87EA8A2
%A87EA8A2A87EFD04A8FD14FFC2C8C8C8C9FD05FFC39999CAFFFFFFA8F827
%7DFD09FF7D7D53542F53537E2FA985857EA9CFFD0AFFCBA2A8A8CAA8A8A8
%CAA8A8A8CAA8A8A8CAA2A177A1777DA8FD06FF592F532F5AA2A9A8A8A8CA
%A8A8A8CAFD04A87DA177A177CBFD11FFCAC8C2C8A0C9FD06FFA7C299C3C9
%FFA17520F8A8FD08FF532F532F532F5353537EFF777776C9FD0AFFA8FFFF
%FFAFFFFFFFAFFFAFFFA8FFAFFFAEFF7777767D767DFFFFA985AFFF282F28
%2F53FD05FFA8FFA8FFA8FFA8FFA8A1767776777DFD12FFC2C8C2C9C9FD08
%FFC3C2C8C2C9A075F8A9FD08FF53532F545A542F7E53A9CA7D777776A1CA
%FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A1777D767DA1FF858561
%AFA85328532853A9FFA8FFA8FFA8FFA8FFA8FFCBA8777D777D76A8FD12FF
%C9A0C8C2C9FD08FFCAC89FC2A0C9C2A0A7FD07FFA87E5359537E2F535353
%A8CA7DA27DA177A8FD08FFA8A17DA27DA17DA27DA27DA27DA27DA27DA177
%A1777D77A9846160857D53282F282F28A27DA27DA27DA27DA27DA27DA27D
%7D77A1777DA8FFCBFD10FFC2C8C8C9C2FD0AFFC9C8C9C2C8C2C9CFFD07FF
%A8A9A8A92F54537E53FD10FFA87EA8A2A8A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA88584AF592F2853285328537EA8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FD10FFCAC2A0C9C2C8CFFD0AFFCA9FC8C2C89FC9FD06
%FFA8A9A8FF7E53535A537EFFFFA9FFA8FFA8FD09FF7DA87DA87DA8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8A9A8FFA8CBFF7E282F282F282F287EA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0FFFCFC2C8C8C9C2FD0BFF
%C9C8C2C8C2C2C2FD06FFA9A8FFA8857EA97E85A8FFFFFFCBFD0CFFA87EA8
%7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CBA8FFA8FFA95328532853
%2F537DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD10FFC9C8C2C9
%A0C9CAFD0AFFC9C1C2C1C9A0BCC9FFFFFFA8A87EA87DA85A85A1A85A7E7D
%A9FD05A8FD09FFA8A9A8A87EFD04A8CBA8A8A8CBA8A8A8CBA8A8A8FFA8A9
%A8FFFFFF7EFD04282F287EFD05A8A9A8A8A8A9A8A8A8A9FD07A8FD0FFFA1
%A0C9C9C8A0FD0BFFA8A883A884FFBCC2CAFFFFA97EA87EA8A8A97E857EA9
%8585A8FFA8FFA8FFA8FD0BFFA8FFA8FD17FFA87E535328537EFFA8FD21FF
%A8527777A176777DCBFD08FFAF8560615A85AFCA6FA1FFFF7DA87DA2A2FF
%A8A984A9A8FFA8AFCFFFA8FD0DFFA8A8A8A9A8FD0DFFA8FD0AFFA8282F28
%7EA8A9FD0AFFA9FFA9FFA8FD12FFA8A2777D7777527752A8FD08FF608584
%8560AFFFFFCFFFFFA97DA87EA8A8FFA8FFA8FFA8FFA8FFA8CBA8FFA9FD0B
%FFA8A9A8AFA9FD17FFA82F28537EFFA8FD1EFFA8A8A8A9A8A87DA17DA17D
%7D7DA8A2A8A2A8A8FF84615A84606160FFFFA9A8FFA8A8A8A9A8A8A8A9A8
%A8A8A9A8A8A8A9A8A8A8FFA8FD06FFC9A0C9A0C9A1C9A1C9A7C9A7CAA7C9
%A7CAA7C9A7CAA7C9A0CFFD06FFC9A1282828A1C9C9A1CAA7C9A7CAA7C9A7
%CAA7C9A7CAA7C9C9FD0DFFCBA8CBA8FFA9FD07FFA8CB7EA87EA8A8AF6085
%84856085A9FFA8FFA8A9A8FD18FFCFC1C2C1C8C1C8C9CFC9CAC9CFC9CAC9
%CAC9C9C9CAC9C9A7CAC9FD05FFCAC8A07D7D84A1CEC9CFC9CAC9CFC9CAC9
%CAC9C9C9CAC9CAC9CAFD0DFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A87DA8
%7DA98485608460855A85A8A8A8A9A8FD19FFA7C29FC29FC2C2CAC9CAC9C9
%C9CAC9C9C9CAC9C9A7CAA1C9A1CAFD05FFC99FC28385608584CAC9CAC9CA
%C9CAC9CAC9CAC9CAA7CAC9CAA7FD0DFFCBA8A8A8A9A8A9A8CBA8A9A8CBA8
%A87DA87EA8A98B61858485618560AFA8A9A8FFA8FFCBFFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FD07FFC2C9C2C9A0FD04C9CAC9C9C9CAC9C9C9CAFD07
%C9FD06FFC9C1A86185608584C9C8C9C9C9C8C9C9C9C8C9C9C9C8C9C8CAFD
%0DFFA8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9FD04A8608560858485606160
%A2777D77A17DA8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A2A8A1CAFD06FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD06A8AFFD05FFA8CFA8AFA8AFA8
%AFA8CFA8CFA8CFA8CFA8CFA8CAA8A8A7A8A8FD0CFFCAFFCFFFCFFFCFFD0B
%FFA8CBA88B618585FF6185608B7EA177A177A8FD10FFA8FFA8FD19FFA8FF
%A8A9A8FD1AFFAFA8FFA8A9FD0BFFCACFCACFCACFCAFD0BFFA8A9A8A88485
%6085AFAF60857E7D7777767D7DFFA9FFFFFFA9FFFFFFA9FFFFFFA8FFA8CB
%A8CBFD06FFCBFD11FFA8A8A8A9A8A8A8FD05FFA8FFA8FFA8FD0FFFA8A8A8
%A9A8FD12FFA9FFFFFFA8FFFFFFA8FFA8A8A8A9A885608B61FFCF85607D53
%5477A176A1A1A8A1A8A1A8A1A8A1A8A1A8A2A8A1A8A2A8A7FFCFFD05FFA8
%FFFFFFA8FFFFFFA8FFCBFFA8FFCBFFA8FFA8A9A8A9A8FFA8FD07FFA9FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8A9A8A9A8CBCBFFA8FD08FF7D7D777D77
%A1A2FD0DA8A2A8A8855A84A9C9A77D295353C9C3C9A0C9A0C9A0C9A0C9A0
%C9A0C29FC2A0A09FC2A0C29FC2C9FFA8A87EA87DA87EA87DFD13A8A2A9FF
%A97DA87EA87DA87EA87EFD14A8FD06FFA8A1777D77A1A1FD05FFAFFFFFFF
%AFFD06FFAF537D77FFCAFF7D5453CFCFCFCACFC9CFC9CFC9CFC9CFCACFC2
%C8C2C8C2C8C2C8C2C8C1C8FFA87EA87EA8A2A87EA8A8FFA8FFA8FFA8FFA8
%FFA8FFFFFFA8FFFFFFA9FFFFFFA8A8A2A87EA8A2A87EA9A8FFA8FFA8FFA8
%FFA8FFA8FFFFFFA9FFFFFFA9FD08FF7677767776A1A8FFA8FFA8CBA8FFA8
%CBA8FFA8FFA87E2F532953A8CFC9532FFD10C9C89FC29FC29FC29FC29FC2
%C2FFA2A87DA27DA87DA27DA8A8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8FF
%A8FFFFA87DA87DA27DA87DA27ECBA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FF
%A8CBA8FD07FFA877A17DA17DA8A2A8A1A8A2A8A1A8A2A8A1A8A27E2F5453
%5453A9C9C953A7C9C9C2C9C9C9C2C9C9C9C2C9C9C9C8C9C2C9A0C9C2C9A0
%C9C2C8A0CFA9FFA2A8A8A8A2A8A8A8A2FD04A8A9A8A8A8A9A8A8A8A9A8A8
%A8A9A8A8A8FFA8A87EA8A8A87EFD04A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8
%A8A8A9A8CBFD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8A9
%A8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8AFA8FFA8AF
%A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8CBA8FFA8A9A8FFA8A9A8FFA8A9A8FF
%A8A9A8FFA8A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA9FDFCFFFDFCFFFD08FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-04-11T17:14:41+03:00"
   xmp:ModifyDate="2022-04-11T17:14:42+03:00"
   xmp:MetadataDate="2022-04-11T17:14:42+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:29622785-b575-154b-83e1-32792133bad4"
   xmpMM:InstanceID="xmp.iid:29622785-b575-154b-83e1-32792133bad4"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shablon_dlya_rabot</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="124"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAfAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtlkWON5G+yil&#xA;m+QFcjOQiCT0TGNmghLPWdNu2RIJg0kgJEe/IU61HbMbBrsWWhE7no35dLkhZkNgjcy3HdirsVcx&#xA;Cgk9BiqHN0a7LtiqpHMr+xHUYqqYq7FXYqtlkSKN5ZDxRFLO3gAKk5GchEEnkExiSaHMrIbu1mCm&#xA;KZH5iqAMCSPlkIZoSrhINspYpR5g7KuWsHYqpPcoAeO57eGKqBmlJryP0Yqqw3HZzv2OKq+KuxV2&#xA;KuxV2KuxV2KuxV2KuxVZLMkZUMftGgxVfirsVdiqF1Kya8tWgWZoeX7SU326GvbMbVac5YGNmLdg&#xA;y+HLiq0i8t6FqFrOl5IVjDBkeFgeXE/q3Gafsvs/LjkMh26V1p2Wv1mOY4Bv5snzoXToKLVIZNQe&#xA;0H7I+FvFh9oYaVG4FUpYWdqhqCnTFVP6q38wxV31Vv5hiqvEhROJNcVXYq7FUFrFrd3NjJFbSiNm&#xA;BDAivIU+zXtXMPXYZ5MZjA1+nycjS5IwmDIWkPlTTL+C4W8eFfQmQryY0YDqCB70zT9j6XLCQyEe&#xA;mQ+Ls+0dRCUeAH1AsrzpHSKP1y15cfUWv4ffjSrvq8Xh+OKu+rxeH44q8a/5yA8lX2rz6NqGm6le&#xA;WlzZeqqQWUxjkV2HKOUAduahXJpt0IyM4ZTXALbcM8AsZZcO1hO/yL178yr7R76x/MH0X1O0mAsb&#xA;xGhD3EDLUlkhovwNtXiK9x3N08Mocw4eLUwyfSXp2Vt7sVWySLGhc9BiqlaXBlUhvtjr8jiqviqX&#xA;64L9rICwDm45ggowWgHWtSNswe0BlOOsd8V9HK0hgJ+uuFD+WPr/AOj63VCpZjGST6leR5c6++U9&#xA;k+L4Xr+Hfz3tt7Q4PE9P7PgnGbRwHYqgr+MF42qfiNKeA9sKoxV4qFqTTap64FbxV2KuxV2KuxVI&#xA;7Wytl16aIJRIkDxjk2zfCa1rXvkidlTsuocJX4iKgZFW8VdiqjdXDQxhlTmSaUxCpZPcXcrk/Eq9&#xA;lFaDJKr2N1OrCKRWYMQAx7YCFTLArsVdiqheRXEqBYWCqah69x9xwhUD+ibn+ZPvP9MNqqqJ7JDN&#xA;czKLWFSZNyaKBXwyMpACyyhAyIA5liv/ACsy01S0aTREkCBmjae4jaJgy7HijgV+Zy/RQjmBl3Fw&#xA;u1cmTTSEOpF3/axyd5nuZLu5Yt6igeq5rUgnlufozamUYR3IADoownlIABlI/F1pdXiXizQfu0j/&#xA;ALt/22evUAbcaffhNSj3goo4z1Ewfk9at3keCN5F4SMql08CRuM0chvs9PAkgErL26S1tnmb9kfC&#xA;PEnoMQGSHsrqO/sebgc1qHXwYDriRSr9PReBenxVIr7UGKovArsVdiq2WWKKJ5ZXWOKNS0kjEKqq&#xA;oqSSdgAMVSk+cfKY0NdfbWbJNDcsE1N541tm4MUPGViEPxKRscVa07XNL8waXZ6to831vTrhn9G4&#xA;VXUMEcoSA4VqclNDTfqNsQbSQRzTnFDsVdirsVdirsVS+G1uF1q4uWWkLxhVeo3NF7Vr2w3sq6WO&#xA;T66o5/E3xA+AFdvwxVHYFdirsVdirsVd0xV4t5j8xajd/m7pd1b+coovKOmugudOhlSKASmN/W+s&#xA;zVVZBsvEMT8R2oRkJ+IJiIid3JxYoSxSmZfT0elSfmD5EjXk3mLTSP8AJu4WP3KxOX+DPuLicQ71&#xA;Gw/MfyZqOpw6bYakl1dTpzjESuykcuG7UoDy2zHnkEJcJ5uVDSzlDjH082S5Y462WKOWNopVDxuC&#xA;rowqCD1BGAgEUUxkQbHNAx+XdCiCiOwgRUJIVUAWrGpJUbEk+OSxngFR2DHOPFlxT9RHe8m/NDUV&#xA;1HzC2lxSvDbWYiiUQEoDIDzapBG1TxP9cq1ETKFdOZdloYRgRKvV0Xflxr0g80W1vdlXhnR4ouSj&#xA;4JKckIPWvw8fpzIBMYCAOwcfUaaBlLLQ4ybez5W4yC1i2ilspGcEmJWZNyBWmEKhtCt4lsDOoPqS&#xA;Bg25oaE02wyVG6eCIWr/ADH9QyKonFXYq80v/wA47vT/AM1oPJN35cuU065aOCDXFkRlNxMvNKxD&#xA;pEV25Fq8qjjkeMXXVsGKXDxVshvzg8rz61qNmuoahcP5faGh0RG9O2knRiWkm4cXl+Fk4ozcRStM&#xA;vhpJZgRGXDXlf6WMNVjwm5w4/jQ+4sZ1XyF5I9XTmh04Tw21hDawrdu91xRAVYD1i4UncMVArlw7&#xA;JjLnKQruofFjHtYw5QjInrKz8OfR7ZoNpptnolha6XCtvp0MEaWkC1okYUcV33NB475iyhwkjuXj&#xA;4t0dgV2KuxV2KuxVQfULBL1LB7mJb6VDLHal1ErIpoXVK8io8aYqr4qhZP8AjoRf6v8AXFUViqD1&#xA;DVrOwC/WGIL/AGABWtCAd+m1cxdTrMeGuPq34NNPL9KLVlZQykMpFQRuCMyQQRYaSKbwodiry7/n&#xA;IDzbPo/laHS7SQx3Wsu0bupoRbxgGWhH8xZV+ROZWkx8UrPRqyyoPmjNo4z0nSfyD87anb292j2d&#xA;vaXSJNFJLKxPpyLyU8URjWh6Ziy1cQ2+EXsv5b/lbZeULRvrMyalfs/NLgxBRDUDksdSzb8RU5rs&#xA;5jknxVu5ePJOMOAH0s6yDF2KuxV85+YXkPmHUnYnn9bmJJ619RsnWzs4cgtkebTNZ9WLaS1nEsJ8&#xA;eLc0PfqKHEDZfqD6Js7qK7tIbqI1injWWM/5LgMP15B1pFFT1L/jn3H/ABjb9WEIUNB/45kfzb/i&#xA;RxlzVMMCuxVjfnjzTP5f01JbaFZ7qdisYcnioUVLFRu1KjaoyEskYkAnm5On00slkco83jtx5i12&#xA;61ddTknJ1MqI4bhaIVUmoUBeK03PUbVOM8UCeM/wudAmMTAcinlv5k13U4wNTm9YrvHyVR7E8QKZ&#xA;sNBqscshxj6gLt1faWgljxjL/CTVK0s5lCclUMtRVQFqCajYUHjm3EadKTb1DytFcRaBZx3ClZQp&#xA;qp6gFiV/4WmaLVEHIadlhBEBaaZQ2uxV2KuxViv5hfmR5a8i6XFea1OUmvHaDTbVEeSSecLUIoQN&#xA;TegJOwrhAvZXzp5Pn1DVfzIsPPXmx418wy6jAClvI4jgtCBEEQOOCIin46MSRX+Y4cukzRmP5lWX&#xA;IxZMJxm/r6PrXIuO6g698VdiqD1DSLK/4m4Ul0pwYE7CtSKdN++2Ymp0WPNXENw5GDUzx/Si0RI0&#xA;CIoRFFFVRQAewGZUYgChsGgkk2Ur806pd6Xodzf2iJJNAAwSQ8VIJA69uuQykgbN2mhGU6lyVPL+&#xA;tQaxpcN7EU5sAs8cbc1SUAF05UFaV60ycSSN2GXHwSIeY/mxo2m+aPNFhp0ZWS8tEKzVlZFVGPNx&#xA;QVq4X4th8+2Dx80JAQGxcrDpsMsZnk5j7v1pQvlLypMeR0yJI7eMGiqCzUIXc7ePWn350ZFPOcVv&#xA;YfKsscnl6w9MBUiiWEKNgBF+7pT/AGOaXUx4chDscMriE1yhsdirsVdirwXzzpj2/m7UY/siaYyp&#xA;UE19YCTbiD3bEzp2WEXEK+v+X7+UWF8lvKyXFnAJWVCAJYl9Ehi3EAsIuXjleXUDGLlsPP8AZbLB&#xA;HiJiOb1DyA8o8s21tMwM1tyjKhuRC1JQNsvQGmQwaiOWNxLiavEYT3ZGQDsemXuM4AAUAoMVdirB&#xA;vM35tflzoerS6Zqmv2UF/A0cc1qzs8iNIKqGWOKUrtua9O9MVSn8y9W0qHTrXUXuIXt7WQrN6b86&#xA;CUqAWCqtFqtK5gdoYyREh3nY+UQMwdrA/H2qWsearK9vo9E0ewWNpLdZJ72SBVij5U+BJuKp0PUV&#xA;9qEY5c2SYAgOa6bTY8ZMspvh+R/b5J55U0fQtJL3F7f29xdyLw4qwKItamlepNOtMnpNIcW5+pp7&#xA;R15zgRiKiEfrmoaAY0EE0HqV6qyjbNgCXVcB7kvsNUsoryJhewxDkOTNKijjXepJ8MSngPczW3ub&#xA;a5iE1tKk0LV4yRsHU02NCKjK0EUqYodirsVYL+cui6FfeTZL7U7JLqXSp4LiykavKKRpkjLKQR+y&#xA;526HLsESZUOe/wByCQObxPS9FuJouYaMGKYNBJXY9KkkBjx2BG2S1vaePHMRN+qPq8vxvbnaLsvJ&#xA;lxmQrY7ef46PWfL3mfXdB0WHTYdNbXI7RUSNrWZXcIx6u1XAAFaA08M1H56cpEkA+79lufl7LxCI&#xA;qRif6W1/Ov0vQdI1Ialp8N6Lae09UVNvcp6cq+zLU5mQnxC6p1GbFwSqwfcjMm1OxV2Kpd5jtLa7&#xA;0HULe6lSCB4JOc8hCpGApb1GY0ACU5E4soSo2+Ytb0v/ABDpUViNUni0z1PrfCzmAindY29JuQJV&#xA;hUjfuOnY45brZ2PhxmQSz3yPbz3Wr3+oyyPcfUrS4ka5l3Z3kjMScqd25E5dhB4og94cfWERxkBH&#xA;2/8AdXP/ABjH/JxM3suY/HR50dWcfl7dc9MntyamGXkPZXG34qc1faEakD3hzdKfSQyrMBynYq7F&#xA;WKeYvPcNjD/uLg/SM/Li6qeIUfzDlxD/AENjKEiNiAfP9jOAF+q68mF3Go+YdRl+uTaPdXEjUZGZ&#xA;4KLToF+P4c1mXsnLkNyyRv8Azv1OzxdoQxioxkB8P1pt5r13XdQmjtbHRZpre2oVnkdY1eQrQtQ1&#xA;agqR0zL1GhOYAGfDH3Wf0BxMGoGIk8NlMvJcFvoltNPfST3Gq33Brxljf0kCV4RxKf2U5HfqcyY4&#xA;owiIwFRHz9582jJklOXFI7sottasriZYlEis2yl0ZRX5401o/ArsVfGVvo1pF5r816tq1vb6hcat&#xA;qVzc2sjx8nije4d6ByRQSLxGw2G3fMv+TZTAN0yxauML9Nsmsb2+n1GK0giZnZ4y0Q2IeJxJuNwV&#xA;VlB38O2XT0cDCzy/Hu+9kNbMT22/Hxe3JrSoiqujz8VAA2i6D/ZZgCFbJIs2ZN/p0f8AVon+6L/m&#xA;rDwo4fNo62CCDpE9D4ekP1Njwrw+ayG7up3Kw6VcMfDbYe/77FPCO9lXl+K4jsWM8DW7vIWETEFg&#xA;KAb0Zx28ciWEkywMXYq7FUl85Qwz+XbmCeNZYZCgeNwGU0dT0PuMw9dlljxGUTR23crRY4zyASFh&#xA;gOi+WfL6X9s/1RVEs6xsiclUgkfa4keOwzU4tblyyiMkuIE1vv8Aa7eWIYhI4xwmr2ZpY+QdCsNf&#xA;j1u0a4injjaIW4lJgIbuUIJJFdvi/hm6x6WEDYdZm7QyZI8MqK3zJ5/0ry/qtrp97BcM11Sk0SBk&#xA;RTUcmqRty4rt3ODLqYwNFdPoJZY8USOdMhtbu2u4FntpVmhf7LoajL4yEhYcTJjlA1IUWCR/np+X&#xA;Y84XvlS7vn0/ULOX0PrF2npWssvMxlI5iSKhwV+PjU9K4QbQYkPQMLFKvNug/wCIfK2saCZzajVr&#xA;K4sTcKocoLiJoi3E0rTl0xV81Wfk648gWi+WNT1CK9ubGp9aLkAUlJkQBW+IUVumX48UpDYOXjzR&#xA;jHcs48vfmL5U0zyrLpJhnXULsuLi6WMGPdqKWblzoE7Bcy8WkmJCR6OFqswnYCro2oR6i2owW6MJ&#xA;LWESTK1N4zIlHQqWDLuDWvTM+Uxt73W+GRbK/wAv72OLU7iF3CrJECakfaDgL/xI5gdoZIcI3Fgu&#xA;VpcU7ujR8noWa1ynYql+t38VpZsrxTzGcMgS2Tm9CKFtyAKV7nCGURbzT6jqNdrG5p2rEa/hXLeI&#xA;M+HzCeW+o30cCI2nXFVFPsMOn+xOR2YmHmqfpW8/6ttx/wAA/wDzTjsvB5rJdXuVjZ30+4VFBLng&#xA;1KDrX4Mdl4Ert/Pnl+C6jkdWpG4ZgiVbY12qq/rxLZ4EnoOh6/peuWf1vT5fUjVijqw4srDswOVk&#xA;NU4GJopgGUkgEEjqPCuLG3yBcXtsLy5KSI4ZpApanQsRUVOdDQIG7hg09D8o6ZqMtlZ6hb2ksQ9Y&#xA;TmaGEH146boXpWnMV27bZo9VGZyVxekfj7nbYMmMY9wOI/j73og1O5/5YLj/AJFv/wA04NnH4Xfp&#xA;O5/5YLj/AJFv/wA047LwoTUNcS1i9W8guLeGtOTIwWvzKHFkMZPJbo35g+WbS5aSaeQKy8BRGalS&#xA;DU0VfDBIMvAk9CtrmC5t47i3cSQSqHjkXcMrCoIyDURSpih2KuxVLPMvpHRbgSkqp4bgVNeYpQVG&#xA;YXaFeDK/L73K0V+KK/GzB7RxGVk7RzxMD/wR6fRnN4jW/dIO+yC9vIvS87F5dD32n2V9CYbyBJ4y&#xA;CKOAaV2qp6g+4yE8cZCiLbMWaeM3E0WDv5f1Py9cMbGSUwSNVZlJpTsrgbbe/XNBqcObDK4E8Pl+&#xA;l3w1mPUj1gWOn6nmn5iflZpnnS2nE17NZ3k07XfrIkTJ6rgBuS8VYqSKkBxvleLtGUDdWerPPphk&#xA;gIXQHJ75oV3FdaVbsjcmjRY5K9Q6qAa5v9PnjljxB5/NhOOXCUczKqlmNFUVJ8AMvaniX5geRtT8&#xA;wea7jVNLkjaO7EYMcpKMGjRY9qBhQhQc2en1MYQotM8ZJt5zqlhDZ3J06NvrF7BK8dxNExeJ2BCq&#xA;sQ4qxpQ79ydulTnwlYvo0kPSPymsbibWPMDW6iUQ2UdhzrRTJxCA1ofhJhJzA1p9I+bfh5q6/lt5&#xA;osZ0khvraG4FPiWZo2XfqDxBzWmMTzDs/wAyPN6f5Xg1630pYtbuIrq6VjwuISTyjIBXlVU+Ib4l&#xA;xJkE7JtgYMe83axNpqW7W/B53LAxPyFV2+Kor0IyURbKIHVjaecdcdwq20BY9Bzf+mS4GfDHzTH6&#xA;/wCcGH+8VvQ9vVI/hgoIqHm19b82/wDLBbf8jT/TGgtQ81k1x5veJ0WytlZlIDeqTSoxoKODzYHN&#xA;+X3mD1GLtbKxNaGUDr8xhcn8xFlPliK78s6ZPbRL62o3jBmkUhokVRQcaE1O560y7FjjI3I7Os7Q&#xA;1U9hCJJY15r/ADGuPKV5cWrB5dYuoyJonJARZF+GR233FaqB+AzMlATAA+l12kxzjIynd/f/AGPC&#xA;lLc+tSAaH5A9MyXKfQn5WeZdXfydpdnbWscxiSRAzSsCQsrjf4TTNVqI+subiA4RbMTfeaG66fCf&#xA;+jj/AJtyigzqPeWvrnmb/q3Qf9JH/NuNBaj3lLPMFp5q1bTnsls7eFXILMZuR23FPhGIpnjlGJvd&#xA;hv8Ayr7XK0aS2Hj+9FcLkfmIvWPKklvaabaaSoblbxBRIzI3Nhu1ArMRvWmRIcOZs2n2RYuxV2Ks&#xA;U8/a7pthbW9pdS8XuGL8FrXig6mittU5g9oYpzhURe7sOz6EySa2YrLqOjR20HqXgjWYeqpPHdWP&#xA;FerDuDmkOkmPTUr937XbDJdnave9Sgf1IY5K15qGr8xXtnUR5bvNSFFfhQgdckEej3jE0HpMtf8A&#xA;WFP45XlxSyQMY/UQWUMscchOX0gvN1eLkockKTvTrTvSuaOPYeqveO3vj+t2cu3tJViW/ul+pNPL&#xA;2vReXddm0TWZ0VruRFtJyQFZj9ins/IfI5laT9xMwIcvXYo58UcuP5fjuZb5i1q1020AmQytcckS&#xA;NTxqKfEa7065uIi3QAMOstTuri5CWkIWbcxlmqAR3O2WgDryQQa2Y1f6HY/W5RqNnGbuoPqsCG5c&#xA;g3MspHLp3qM2lkmJgLj13/Ry+5wBKgYyO/Tb9PNk/lq8vNCkNp9TAW8ZeDfZUt2oygg9cw9Ri4yZ&#xA;RMeEDl1b8WSgIyu/sZJ9c1I/8ev/AE8y/wBcwtnJTbT7mWaH97F6Lptx5c6jsa0GAoRWBUm8w+XE&#xA;1f0nE3oyxVAJHIFT2pUZKMqSCxOXQvqd2VS55tEaFglBUf7LJ2tsksYNVuYRIHiC9AShqf8AhxkD&#xA;SET+jtV/37D/AMA3/NeNhXfo7Vf9+w/8A3/NeNhVGSwv2+FpoxQ9kdf1SYqqQ6LekqZLhOFQSF9W&#xA;pH0vjaWGfnT+WU3miwi1XSYw+t2K8PSqAZ4K14VJA5ISWX6R4ZkabPwGjyackLfO+seXdc0J0j1e&#xA;ylsZpg3opMpUsAaMwr2zZRmJci45BD2T8nBInla3uIXo4klQoy1B+Mnx981+p+pysR9L1WOx1h0V&#xA;i8IqK04N/wA15i2Ga79Hav8A78h/4Bv+a8bCu/R+rj/dkP8AwDf8142FWNp+qt9maAt0A+MD8HON&#xA;hUVp+nXsUwluZI2Cg0WPn1O3Vif1YCVTPArsVS3V9TuLQokEYd2BJLLIwA/55q344QkBh+u+Wl8x&#xA;Svd3EaR3RURiYNOhHGhFEkHH7h+OSFNsMpjsxib8pNQlko17CEA+GQBiwNehWnT6cNtv5kdzJPJv&#xA;lrzH5ZkkCakl3ZyJxFpIJAitWvNPiPE9Qdt8BotWTIJdEzufPF/bzvDJaR8kNDRm7YeBqprXPMKa&#xA;j5ejKIYmmmMcsZNR+7AY0O1ftLmTpIeu+51vac6gB3liMaKeaEclRvhDb02B7/PNgA6eUiKI6j9L&#xA;Mre+0i90uwubq0iu7+xfhE8igtG8S0DBiK/Zk/E5p9Tgjx7h6PQaqfhAA/j+xbq8w1lYoZYxHIjf&#xA;u5FPTlQEGvbbABTcCq2fkqe2lWeG94yAd0r1+nAZptMW0XUmFGu4mHgYq/xwCVI2b/Q+pgAfW46D&#xA;oPS/txsK79F6qP8Aj9Qf88j/AFxsJRtjDcwDjLKsxY7sAV+4b4ChG4FYnq3nh7W/mtre3V1hYozu&#xA;xBLLs2w980uo7WMJmMRdO3wdmCcBInmlMWqy6lduVgWNnqzfEePv2xw9ryka4R805ezIxF8X2J1Z&#xA;3+o2sXpKI2UbirH/AJpzJ/Py/mj5/scf8nH+d9n7UR+mtS/kj/4I/wDNOP56X80fP9iPyY/nfZ+1&#xA;SfzFfAlWiBpsaLIR+EeS/OS/mj/TfsX8nH+d9n7VJvMswqDGgb3V/wDqnj+bn0iP9N+xfycf5x+X&#xA;7U30PVnv45A6qHi41KBgCGrTZwPDLtPllIHiAvyaNRijAikfcTpb28s8n2IkZ3p1ooqcvnMRiZHk&#xA;GmETIgDq8A/Nyz1zzjqljcWFogjtYnjIMig/E9RXlxwdkdpjJxAg2O6zs3doaHwuE8Qo9SQN0/8A&#xA;yy0fU9L8v/ULlY1mimdwVetQ9COgw9o6qcMlcO1cz+C1aGGPLCxLfuehx6zqSIqlIzQUryP/ADTm&#xA;B+el/NHz/Y5n5OP877P2tnXNRA/u4/8Agj/zTj+el/NHz/Yv5Mfzvs/aptrt4/24I2p0qHP/ABph&#xA;/Oy/mj/TfsX8mP532ftW/pq7BBS3iVh0PF/4KMjLWz6AfNI0cepPyT+xuTc2scxXiXBqu+xBoetP&#xA;DM7FPiiC4eWHDIhXyxrdiqSaksF6VJnETJUAhUbY9jyJyn8zANwwyQaaagYcL4hug4xx13+WH8zB&#xA;JxSRiaJeOK/XpF9mjUHLhO+jURS79A3n/Vwf/gFw2hItZ8qRwH12uHkMh+Imla/dkhJbSvUlWO0t&#xA;beNAscRc8hXkzPxqWqf8nM3R8y6jtX+E+/8AQowWBn0+4uYlrJbMplA6mNwQD/sSv45lGdSAPV1s&#xA;cZljJH8P6UKdTfT7W4mVVeiEgO3FQw6GuV6iFx9zk9nZDHKB0l+LSZfzB1RWBW3hDA1B+Lr9+ax6&#xA;v8sO96Vot/5kvdLt7p5beMzLyCBHag7b8siaceUYg0juXmD/AJaYP+Rb/wDNWDZjs7l5g/5aYP8A&#xA;kW//ADVjsuyyWfWo0Ly3dsiDqzowH3l8U0EINa1BXVjd2jopqy/DVgOwPq7H6MNJ4R5spyLWxzVf&#xA;LWl3V9JO6SK70L8GQAmnWjMDmDl7NxTkZHmXNx6/JCIiOQatPKGnIRJDNIj9xyUkfOhIyMey8UTY&#xA;v5spdo5Dsa+SN/w6n/LTJ9y5Z+Sh3lq/OT8nf4dT/lpk+5cfyUO8r+cn5NHy6tNrmSv+x/pj+Rh3&#xA;lfzk/JILu1aG4eNpCxB+1Rf6ZIaCPfL8fBP5yXcE48ryIrTQ0JdgH57dBtTYDxy7Hpxj5Em+9py5&#xA;jPmnskaSRtG4DI4Ksp6EEUIycgCKLWCQbDEW8p6NzLJdMgJ2XnEQB4da5TodNHTTMoXuK3Za/JLV&#xA;QEZ9DeyvD5KszxkivHNDs68T09xmynqjIEEDd1kOzoxkCCbCO/w0f+WyX/hP+ac0v8nx/nS+z9Tv&#xA;fz0u6P2/rd/ho/8ALZL/AMJ/zTj/ACfH+dL7P1L+el3R+39ayfy66RMy3khIHfhT/iOP8nx/nS+z&#xA;9S/npd0ft/WkBhYH7Z+5P+acs/k+P86f2fqX89L+bH7f1su0KRH02NUXj6dUPuepP01zJhjEBQcW&#xA;czI2UfkmCyaX0oZJeJb01LcV3JoK0GKh43L+bXmVpHMcVukZJKIRISB2FeYrk6c38tFk/lDzR5h1&#xA;2KaWaeCFYiBwRHLGtfGT2wENOXHGLIvU1X/lrX/kWf8AmvA07O9TVf8AlrX/AJFn/mvFdkNdWl/d&#xA;EereCg6D09v+JHCCthifm7VtE0a3ZbrU0nu0IK2MSgyknxFfh/2WZukjPisDZw9biGSNcjbf5deZ&#xA;bbVX1OO1DI6W6chIoK/G/H71r4UyntCeQQsjhN7G7+PJlodFCE/q4wRuKr9LDPzCh1CXzJD5f05m&#xA;uC8aFoEFKyOS2/sFCnfpl+iymWLxMpHp6/Cr9/NlLTRxTMcY+r9d17mU6T+WVhDp8Md9dGW7C/vW&#xA;QsFBP7K7dB0zRanWynkJgQI+53eCHDAAiynVr5fktIhDa6ndxQr9lEkoo+QpmP8AnMnePk2HHA9F&#xA;b9F33/V3vf8AkZ/Zj+cyeXy/ajwYdyheWWowW7Srq12SvZpPHbK8uvyxjfp+X7WePT45GqSX9I6v&#xA;/wBXG5/5GHMP+WM3dH5ftcv+T8S5NT1VWDG/uHA/ZaQkH5jE9sZj/N+S/wAn4u5lfljzTqV7qS2d&#xA;3xkWQMVcKFKlRXttTbMnQdoZMmTglvbha3QwhDijtSX3nnLVjdy+nxjjDEKlDsBtvv1zoRAOppR/&#xA;xjrX86/c3/NWPAFpM9L1zVbxGZ5wvHsoP8TgMQghHfXNR/5aD939uCgh31zUf+Wg/d/bjQVCtZNI&#xA;xd7kcm3NVP8ATDaq9rBeW9Wt7sJz6ngp6f6ynAUo06le2ml3lxNILmSBQ0Z4hd2234hdhgrdWK/4&#xA;y1v+dPuP9cnwBNO/xlrf86fcf648AWk7tNU1SaBZWuAC3ZR4beORICCrfXtS/wCWg/d/bjQQtkub&#xA;+RSjXJoeu2NBUL+j/wDl4H/An+mG1RkC6lBGI4b0Ig6ARp3+a4Nkp7ZSSSWsbSkNJQhmAoCQaVyJ&#xA;Qrnp1p74FYxdflt5RuZ3nktCJJCWbg7ItT/koVUfRh4m0ZpDq6D8ufLVvX6vHLET1KzSj/jbDxIO&#xA;aRVf8DaP/NN/yOm/5rx4l8STX+BdJ/nl/wCRs3/VTHiXxZNf4F0r+eX/AJGzf9VMeJfFkkdz+Snl&#xA;W4uJZ5Hm9SVmd/jbqxqepJzJjrJgUGg4wTaY6H+Weh6J6xsGdWuFCSsxZiVBqP2qZTqMpzR4Z7hn&#xA;j9BuPNVi/LvRotSn1JATe3ACvKxckBQFovxbbAZjyxRljGMj0R6WW2OeQmZ/xHyCM/wpb/78P3v/&#xA;AM1Zj/kMP837T+tt/O5e/wCwfqd/hS3/AN+H73/5qx/IYf5v2n9a/ncvf9g/U7/Clv8A78P3v/zV&#xA;j+Qw/wA37T+tfzuXv+wfqWv5RtXHFmqPAl/+asB7PwH+H7T+tI12UdfsH6lP/A+m+A+9/wDmrI/y&#xA;bp/5v2n9bL+UM3877B+po+SNP7KPvf8A5qx/k3T/AM37T+tf5QzfzvsH6la18qw2rFrcqjHYt8RN&#xA;PmScvw6XFiNwjTTl1OTJtI2sm8n2k0hkkCl2NWI5Cp+gjMriaLWf4JsP5V/4J/648abVY/J9nH/d&#xA;tx+Rf/mrHjW1/wDhaH/fh+9/+asHEtu/wtD/AL8P3v8A81Y8S27/AAtD/vw/e/8AzVjxLbv8LQ/7&#xA;8P3v/wA1Y8S2qR+XVSNoxL+7fZ1IJqOm9TjxIQx8kaYTX/mv/mvDxpt3+CNM/wA+f/NePGtqsflK&#xA;zQcVkYDwBb/mrBxLa/8Awtaf78b72/5qx4ltseVrLu7/APBN/XHiW3DyvY93k/4Jv648S2uHlfTu&#xA;7S/8GceIraZW1slvEsUbExqKKDTb7hkShVxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv8A/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:e47cfc3d-883b-0345-90ee-a51f7662303f"
    stRef:documentID="xmp.did:e47cfc3d-883b-0345-90ee-a51f7662303f"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e47cfc3d-883b-0345-90ee-a51f7662303f"
      stEvt:when="2022-04-11T17:14:39+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:29622785-b575-154b-83e1-32792133bad4"
      stEvt:when="2022-04-11T17:14:42+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="828.615879"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
828.616 400 li
828.616 0 li
cp
clp
828.616 400 mo
0 400 li
0 0 li
828.616 0 li
828.616 400 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
772.892 200.821 mo
639.309 200.821 li
633.084 200.821 628.037 195.774 628.037 189.549 cv
628.037 183.325 633.084 178.278 639.309 178.278 cv
772.892 178.278 li
772.892 200.821 li
cp
.639216 .482353 .564706 rgb
f
781.909 200.821 mo
670.822 200.821 li
664.598 200.821 659.551 195.774 659.551 189.549 cv
659.551 183.325 664.598 178.278 670.822 178.278 cv
781.909 178.278 li
783.977 178.278 785.652 179.954 785.652 182.021 cv
785.652 197.078 li
785.652 199.145 783.977 200.821 781.909 200.821 cv
cp
.698039 .552941 .639216 rgb
f
785.652 196.467 mo
671.84 196.467 li
667.887 196.467 664.684 193.263 664.684 189.311 cv
664.684 185.358 667.887 182.155 671.84 182.155 cv
785.652 182.155 li
785.652 196.467 li
cp
.921569 .921569 .929412 rgb
f
785.652 187.211 mo
747.292 187.211 li
747.135 187.211 747.007 187.083 747.007 186.925 cv
747.007 186.768 747.135 186.64 747.292 186.64 cv
785.652 186.64 li
785.81 186.64 785.938 186.768 785.938 186.925 cv
785.938 187.083 785.81 187.211 785.652 187.211 cv
cp
.72549 .698039 .756863 rgb
f
785.652 191.982 mo
754.134 191.982 li
753.977 191.982 753.849 191.854 753.849 191.696 cv
753.849 191.539 753.977 191.411 754.134 191.411 cv
785.652 191.411 li
785.81 191.411 785.938 191.539 785.938 191.696 cv
785.938 191.854 785.81 191.982 785.652 191.982 cv
cp
f
637.185 178.457 mo
762.991 178.457 li
769.217 178.457 774.263 173.411 774.263 167.186 cv
774.263 160.961 769.217 155.915 762.991 155.915 cv
637.185 155.915 li
637.021 155.915 636.89 156.047 636.89 156.21 cv
636.89 178.162 li
636.89 178.325 637.021 178.457 637.185 178.457 cv
cp
.827451 .823529 .858824 rgb
f
634.216 178.457 mo
731.478 178.457 li
737.702 178.457 742.749 173.411 742.749 167.186 cv
742.749 160.961 737.702 155.915 731.478 155.915 cv
634.216 155.915 li
632.268 155.915 630.688 157.495 630.688 159.443 cv
630.688 174.929 li
630.688 176.877 632.268 178.457 634.216 178.457 cv
cp
.921569 .921569 .929412 rgb
f
630.688 174.104 mo
731.032 174.104 li
734.984 174.104 738.188 170.9 738.188 166.947 cv
738.188 162.995 734.984 159.791 731.032 159.791 cv
630.688 159.791 li
630.688 174.104 li
cp
1 1 1 rgb
f
686.161 164.849 mo
630.625 164.849 li
630.467 164.849 630.338 164.72 630.338 164.562 cv
630.338 164.404 630.467 164.275 630.625 164.275 cv
686.161 164.275 li
686.319 164.275 686.448 164.404 686.448 164.562 cv
686.448 164.72 686.319 164.849 686.161 164.849 cv
cp
.72549 .698039 .756863 rgb
f
674.592 169.62 mo
630.729 169.62 li
630.57 169.62 630.441 169.491 630.441 169.333 cv
630.441 169.175 630.57 169.046 630.729 169.046 cv
674.592 169.046 li
674.75 169.046 674.879 169.175 674.879 169.333 cv
674.879 169.491 674.75 169.62 674.592 169.62 cv
cp
f
817.225 369.953 mo
817.225 373.467 639.477 376.315 420.213 376.315 cv
200.95 376.315 23.2017 373.467 23.2017 369.953 cv
23.2017 366.44 200.95 363.592 420.213 363.592 cv
639.477 363.592 817.225 366.44 817.225 369.953 cv
cp
.878431 .87451 .898039 rgb
f
178.881 368.508 mo
36.7905 368.508 li
30.1694 368.508 24.8018 363.141 24.8018 356.519 cv
24.8018 349.897 30.1694 344.53 36.7905 344.53 cv
178.881 344.53 li
178.881 368.508 li
cp
.639216 .482353 .564706 rgb
f
188.473 368.508 mo
70.3115 368.508 li
63.6899 368.508 58.3223 363.141 58.3223 356.519 cv
58.3223 349.897 63.6899 344.53 70.3115 344.53 cv
188.473 344.53 li
190.671 344.53 192.454 346.313 192.454 348.512 cv
192.454 364.526 li
192.454 366.726 190.671 368.508 188.473 368.508 cv
cp
.698039 .552941 .639216 rgb
f
192.454 363.877 mo
71.3931 363.877 li
67.1894 363.877 63.7812 360.47 63.7812 356.266 cv
63.7812 352.062 67.1894 348.653 71.3931 348.653 cv
192.454 348.653 li
192.454 363.877 li
cp
.921569 .921569 .929412 rgb
f
192.454 354.013 mo
151.65 354.013 li
151.493 354.013 151.365 353.885 151.365 353.728 cv
151.365 353.57 151.493 353.442 151.65 353.442 cv
192.454 353.442 li
192.612 353.442 192.74 353.57 192.74 353.728 cv
192.74 353.885 192.612 354.013 192.454 354.013 cv
cp
1 1 1 rgb
f
192.454 359.088 mo
158.928 359.088 li
158.77 359.088 158.642 358.96 158.642 358.803 cv
158.642 358.646 158.77 358.518 158.928 358.518 cv
192.454 358.518 li
192.612 358.518 192.74 358.646 192.74 358.803 cv
192.74 358.96 192.612 359.088 192.454 359.088 cv
cp
f
34.5317 344.721 mo
168.35 344.721 li
174.971 344.721 180.339 339.353 180.339 332.731 cv
180.339 326.11 174.971 320.742 168.35 320.742 cv
34.5317 320.742 li
34.3584 320.742 34.2178 320.883 34.2178 321.057 cv
34.2178 344.406 li
34.2178 344.58 34.3584 344.721 34.5317 344.721 cv
cp
.827451 .823529 .858824 rgb
f
31.3735 344.721 mo
134.829 344.721 li
141.451 344.721 146.818 339.353 146.818 332.731 cv
146.818 326.11 141.451 320.742 134.829 320.742 cv
31.3735 320.742 li
29.3008 320.742 27.6206 322.423 27.6206 324.495 cv
27.6206 340.968 li
27.6206 343.04 29.3008 344.721 31.3735 344.721 cv
cp
.921569 .921569 .929412 rgb
f
27.6206 340.09 mo
134.355 340.09 li
138.559 340.09 141.967 336.682 141.967 332.478 cv
141.967 328.273 138.559 324.866 134.355 324.866 cv
27.6206 324.866 li
27.6206 340.09 li
cp
1 1 1 rgb
f
45.4893 320.933 mo
153.032 320.933 li
159.653 320.933 165.021 315.565 165.021 308.944 cv
165.021 302.322 159.653 296.955 153.032 296.955 cv
45.4893 296.955 li
44.7329 296.955 44.1201 297.568 44.1201 298.324 cv
44.1201 319.563 li
44.1201 320.32 44.7329 320.933 45.4893 320.933 cv
cp
.72549 .698039 .756863 rgb
f
42.0757 320.933 mo
125.297 320.933 li
131.918 320.933 137.286 315.565 137.286 308.944 cv
137.286 302.322 131.918 296.955 125.297 296.955 cv
42.0757 296.955 li
40.1899 296.955 38.6616 298.483 38.6616 300.369 cv
38.6616 317.519 li
38.6616 319.404 40.1899 320.933 42.0757 320.933 cv
cp
.780392 .74902 .807843 rgb
f
38.6616 316.302 mo
125.66 316.302 li
129.864 316.302 133.272 312.895 133.272 308.69 cv
133.272 304.486 129.864 301.078 125.66 301.078 cv
38.6616 301.078 li
38.6616 316.302 li
cp
.921569 .921569 .929412 rgb
f
86.6265 330.226 mo
27.5542 330.226 li
27.3965 330.226 27.2685 330.098 27.2685 329.94 cv
27.2685 329.783 27.3965 329.655 27.5542 329.655 cv
86.6265 329.655 li
86.7842 329.655 86.9121 329.783 86.9121 329.94 cv
86.9121 330.098 86.7842 330.226 86.6265 330.226 cv
cp
.968627 .701961 .411765 rgb
f
74.3213 335.3 mo
27.6645 335.3 li
27.5068 335.3 27.3789 335.172 27.3789 335.015 cv
27.3789 334.857 27.5068 334.729 27.6645 334.729 cv
74.3213 334.729 li
74.479 334.729 74.6069 334.857 74.6069 335.015 cv
74.6069 335.172 74.479 335.3 74.3213 335.3 cv
cp
f
60.9995 306.438 mo
38.4643 306.438 li
38.3066 306.438 38.1787 306.311 38.1787 306.153 cv
38.1787 305.996 38.3066 305.868 38.4643 305.868 cv
60.9995 305.868 li
61.1572 305.868 61.2851 305.996 61.2851 306.153 cv
61.2851 306.311 61.1572 306.438 60.9995 306.438 cv
cp
.639216 .482353 .564706 rgb
f
69.8174 311.513 mo
38.5752 311.513 li
38.4175 311.513 38.2895 311.385 38.2895 311.228 cv
38.2895 311.07 38.4175 310.942 38.5752 310.942 cv
69.8174 310.942 li
69.9751 310.942 70.103 311.07 70.103 311.228 cv
70.103 311.385 69.9751 311.513 69.8174 311.513 cv
cp
f
205.521 368.508 mo
395.146 368.508 li
401.767 368.508 407.134 363.141 407.134 356.519 cv
407.134 349.897 401.767 344.53 395.146 344.53 cv
205.521 344.53 li
205.521 368.508 li
cp
.94902 .65098 .352941 rgb
f
205.812 368.508 mo
324.776 368.508 li
330.954 368.508 335.962 363.5 335.962 357.322 cv
335.962 355.716 li
335.962 349.538 330.954 344.53 324.776 344.53 cv
205.812 344.53 li
203.613 344.53 201.831 346.313 201.831 348.512 cv
201.831 364.526 li
201.831 366.726 203.613 368.508 205.812 368.508 cv
cp
.968627 .701961 .411765 rgb
f
201.831 363.877 mo
322.892 363.877 li
327.095 363.877 330.503 360.47 330.503 356.266 cv
330.503 352.062 327.095 348.653 322.892 348.653 cv
201.831 348.653 li
201.831 363.877 li
cp
1 .843137 .690196 rgb
f
380.284 344.53 mo
236.021 344.53 li
229.4 344.53 224.032 339.162 224.032 332.541 cv
224.032 325.92 229.4 320.553 236.021 320.553 cv
380.284 320.553 li
380.458 320.553 380.598 320.692 380.598 320.866 cv
380.598 344.217 li
380.598 344.39 380.458 344.53 380.284 344.53 cv
cp
.639216 .482353 .564706 rgb
f
383.442 344.53 mo
270.458 344.53 li
263.837 344.53 258.47 339.162 258.47 332.541 cv
258.47 325.92 263.837 320.553 270.458 320.553 cv
383.442 320.553 li
385.515 320.553 387.195 322.232 387.195 324.306 cv
387.195 340.777 li
387.195 342.85 385.515 344.53 383.442 344.53 cv
cp
.698039 .552941 .639216 rgb
f
387.195 339.899 mo
271.32 339.899 li
267.117 339.899 263.708 336.491 263.708 332.287 cv
263.708 328.084 267.117 324.676 271.32 324.676 cv
387.195 324.676 li
387.195 339.899 li
cp
.956863 .94902 .956863 rgb
f
260.906 354.087 mo
201.833 354.087 li
201.676 354.087 201.548 353.959 201.548 353.802 cv
201.548 353.645 201.676 353.517 201.833 353.517 cv
260.906 353.517 li
261.063 353.517 261.191 353.645 261.191 353.802 cv
261.191 353.959 261.063 354.087 260.906 354.087 cv
cp
1 1 1 rgb
f
357.637 272.882 mo
268.269 272.882 li
261.647 272.882 256.28 267.515 256.28 260.893 cv
256.28 254.271 261.647 248.904 268.269 248.904 cv
357.637 248.904 li
358.831 248.904 359.799 249.872 359.799 251.066 cv
359.799 270.72 li
359.799 271.914 358.831 272.882 357.637 272.882 cv
cp
.827451 .823529 .858824 rgb
f
361.313 272.882 mo
292.017 272.882 li
285.396 272.882 280.028 267.515 280.028 260.893 cv
280.028 254.271 285.396 248.904 292.017 248.904 cv
361.313 248.904 li
363.058 248.904 364.472 250.318 364.472 252.063 cv
364.472 269.723 li
364.472 271.468 363.058 272.882 361.313 272.882 cv
cp
.921569 .921569 .929412 rgb
f
364.472 268.505 mo
291.645 268.505 li
287.127 268.505 283.464 264.843 283.464 260.324 cv
283.464 256.435 286.618 253.281 290.508 253.281 cv
364.472 253.281 li
364.472 268.505 li
cp
1 1 1 rgb
f
364.642 258.387 mo
345.346 258.387 li
345.188 258.387 345.061 258.259 345.061 258.102 cv
345.061 257.944 345.188 257.816 345.346 257.816 cv
364.642 257.816 li
364.799 257.816 364.927 257.944 364.927 258.102 cv
364.927 258.259 364.799 258.387 364.642 258.387 cv
cp
.72549 .698039 .756863 rgb
f
364.547 263.462 mo
337.796 263.462 li
337.638 263.462 337.51 263.334 337.51 263.177 cv
337.51 263.02 337.638 262.892 337.796 262.892 cv
364.547 262.892 li
364.705 262.892 364.833 263.02 364.833 263.177 cv
364.833 263.334 364.705 263.462 364.547 263.462 cv
cp
f
233.073 359.605 mo
201.831 359.605 li
201.673 359.605 201.545 359.478 201.545 359.32 cv
201.545 359.163 201.673 359.035 201.831 359.035 cv
233.073 359.035 li
233.231 359.035 233.359 359.163 233.359 359.32 cv
233.359 359.478 233.231 359.605 233.073 359.605 cv
cp
1 1 1 rgb
f
376.841 320.457 mo
232.578 320.457 li
225.957 320.457 220.589 315.09 220.589 308.468 cv
220.589 301.847 225.957 296.479 232.578 296.479 cv
376.841 296.479 li
377.015 296.479 377.155 296.62 377.155 296.793 cv
377.155 320.144 li
377.155 320.316 377.015 320.457 376.841 320.457 cv
cp
.827451 .823529 .858824 rgb
f
379.999 320.457 mo
267.016 320.457 li
260.395 320.457 255.027 315.09 255.027 308.468 cv
255.027 301.847 260.395 296.479 267.016 296.479 cv
379.999 296.479 li
382.072 296.479 383.752 298.159 383.752 300.232 cv
383.752 316.704 li
383.752 318.776 382.072 320.457 379.999 320.457 cv
cp
.921569 .921569 .929412 rgb
f
383.752 315.826 mo
267.877 315.826 li
263.673 315.826 260.266 312.419 260.266 308.215 cv
260.266 304.011 263.673 300.603 267.877 300.603 cv
383.752 300.603 li
383.752 315.826 li
cp
1 1 1 rgb
f
365.884 296.67 mo
258.341 296.67 li
251.72 296.67 246.352 291.302 246.352 284.681 cv
246.352 278.06 251.72 272.691 258.341 272.691 cv
365.884 272.691 li
366.64 272.691 367.253 273.305 367.253 274.061 cv
367.253 295.301 li
367.253 296.057 366.64 296.67 365.884 296.67 cv
cp
.72549 .698039 .756863 rgb
f
369.297 296.67 mo
286.076 296.67 li
279.455 296.67 274.087 291.302 274.087 284.681 cv
274.087 278.06 279.455 272.691 286.076 272.691 cv
369.297 272.691 li
371.183 272.691 372.711 274.22 372.711 276.105 cv
372.711 293.256 li
372.711 295.142 371.183 296.67 369.297 296.67 cv
cp
.780392 .74902 .807843 rgb
f
372.711 292.293 mo
285.713 292.293 li
281.509 292.293 278.101 288.885 278.101 284.681 cv
278.101 280.477 281.509 277.068 285.713 277.068 cv
372.711 277.068 li
372.711 292.293 li
cp
.921569 .921569 .929412 rgb
f
372.909 282.175 mo
350.374 282.175 li
350.216 282.175 350.088 282.047 350.088 281.89 cv
350.088 281.732 350.216 281.604 350.374 281.604 cv
372.909 281.604 li
373.066 281.604 373.194 281.732 373.194 281.89 cv
373.194 282.047 373.066 282.175 372.909 282.175 cv
cp
1 1 1 rgb
f
372.798 287.249 mo
341.556 287.249 li
341.398 287.249 341.27 287.121 341.27 286.964 cv
341.27 286.807 341.398 286.679 341.556 286.679 cv
372.798 286.679 li
372.956 286.679 373.083 286.807 373.083 286.964 cv
373.083 287.121 372.956 287.249 372.798 287.249 cv
cp
f
384.041 305.74 mo
324.969 305.74 li
324.811 305.74 324.683 305.612 324.683 305.455 cv
324.683 305.298 324.811 305.17 324.969 305.17 cv
384.041 305.17 li
384.198 305.17 384.326 305.298 384.326 305.455 cv
384.326 305.612 384.198 305.74 384.041 305.74 cv
cp
.921569 .921569 .929412 rgb
f
383.611 311.259 mo
352.369 311.259 li
352.211 311.259 352.083 311.131 352.083 310.974 cv
352.083 310.816 352.211 310.688 352.369 310.688 cv
383.611 310.688 li
383.769 310.688 383.896 310.816 383.896 310.974 cv
383.896 311.131 383.769 311.259 383.611 311.259 cv
cp
f
387.008 330.035 mo
364.473 330.035 li
364.315 330.035 364.187 329.907 364.187 329.75 cv
364.187 329.593 364.315 329.465 364.473 329.465 cv
387.008 329.465 li
387.165 329.465 387.293 329.593 387.293 329.75 cv
387.293 329.907 387.165 330.035 387.008 330.035 cv
cp
.639216 .482353 .564706 rgb
f
387.242 335.11 mo
356 335.11 li
355.842 335.11 355.714 334.982 355.714 334.825 cv
355.714 334.668 355.842 334.54 356 334.54 cv
387.242 334.54 li
387.399 334.54 387.527 334.668 387.527 334.825 cv
387.527 334.982 387.399 335.11 387.242 335.11 cv
cp
f
579.884 272.691 mo
437.793 272.691 li
431.172 272.691 425.804 267.324 425.804 260.703 cv
425.804 254.082 431.172 248.714 437.793 248.714 cv
579.884 248.714 li
579.884 272.691 li
cp
.72549 .698039 .756863 rgb
f
589.475 272.691 mo
470.511 272.691 li
464.333 272.691 459.325 267.684 459.325 261.506 cv
459.325 259.899 li
459.325 253.722 464.333 248.714 470.511 248.714 cv
589.475 248.714 li
591.674 248.714 593.456 250.496 593.456 252.695 cv
593.456 268.711 li
593.456 270.909 591.674 272.691 589.475 272.691 cv
cp
.780392 .74902 .807843 rgb
f
593.456 268.062 mo
472.396 268.062 li
468.191 268.062 464.784 264.653 464.784 260.449 cv
464.784 256.245 468.191 252.837 472.396 252.837 cv
593.456 252.837 li
593.456 268.062 li
cp
.921569 .921569 .929412 rgb
f
593.456 258.197 mo
552.652 258.197 li
552.495 258.197 552.367 258.069 552.367 257.912 cv
552.367 257.755 552.495 257.627 552.652 257.627 cv
593.456 257.627 li
593.613 257.627 593.741 257.755 593.741 257.912 cv
593.741 258.069 593.613 258.197 593.456 258.197 cv
cp
.72549 .698039 .756863 rgb
f
593.456 263.271 mo
559.931 263.271 li
559.773 263.271 559.646 263.144 559.646 262.986 cv
559.646 262.829 559.773 262.701 559.931 262.701 cv
593.456 262.701 li
593.613 262.701 593.741 262.829 593.741 262.986 cv
593.741 263.144 593.613 263.271 593.456 263.271 cv
cp
f
435.534 248.904 mo
569.353 248.904 li
575.974 248.904 581.342 243.537 581.342 236.915 cv
581.342 230.294 575.974 224.927 569.353 224.927 cv
435.534 224.927 li
435.36 224.927 435.22 225.067 435.22 225.24 cv
435.22 248.591 li
435.22 248.764 435.36 248.904 435.534 248.904 cv
cp
.639216 .482353 .564706 rgb
f
432.376 248.904 mo
535.832 248.904 li
542.453 248.904 547.82 243.537 547.82 236.915 cv
547.82 230.294 542.453 224.927 535.832 224.927 cv
432.376 224.927 li
430.304 224.927 428.623 226.606 428.623 228.68 cv
428.623 245.151 li
428.623 247.224 430.304 248.904 432.376 248.904 cv
cp
.698039 .552941 .639216 rgb
f
428.623 244.273 mo
535.357 244.273 li
539.562 244.273 542.97 240.865 542.97 236.661 cv
542.97 232.458 539.562 229.05 535.357 229.05 cv
428.623 229.05 li
428.623 244.273 li
cp
.921569 .921569 .929412 rgb
f
487.629 234.409 mo
428.557 234.409 li
428.399 234.409 428.271 234.281 428.271 234.124 cv
428.271 233.967 428.399 233.839 428.557 233.839 cv
487.629 233.839 li
487.786 233.839 487.914 233.967 487.914 234.124 cv
487.914 234.281 487.786 234.409 487.629 234.409 cv
cp
1 1 1 rgb
f
475.324 239.484 mo
428.667 239.484 li
428.51 239.484 428.382 239.356 428.382 239.199 cv
428.382 239.042 428.51 238.914 428.667 238.914 cv
475.324 238.914 li
475.481 238.914 475.609 239.042 475.609 239.199 cv
475.609 239.356 475.481 239.484 475.324 239.484 cv
cp
f
574.415 320.267 mo
430.151 320.267 li
423.53 320.267 418.163 314.899 418.163 308.278 cv
418.163 301.656 423.53 296.289 430.151 296.289 cv
574.415 296.289 li
574.588 296.289 574.729 296.43 574.729 296.603 cv
574.729 319.953 li
574.729 320.126 574.588 320.267 574.415 320.267 cv
cp
.94902 .65098 .352941 rgb
f
577.572 320.267 mo
464.589 320.267 li
457.968 320.267 452.601 314.899 452.601 308.278 cv
452.601 301.656 457.968 296.289 464.589 296.289 cv
577.572 296.289 li
579.646 296.289 581.325 297.97 581.325 300.042 cv
581.325 316.514 li
581.325 318.587 579.646 320.267 577.572 320.267 cv
cp
.968627 .701961 .411765 rgb
f
581.325 315.636 mo
465.451 315.636 li
461.247 315.636 457.839 312.229 457.839 308.024 cv
457.839 303.82 461.247 300.412 465.451 300.412 cv
581.325 300.412 li
581.325 315.636 li
cp
1 .843137 .690196 rgb
f
563.457 296.479 mo
455.914 296.479 li
449.293 296.479 443.926 291.111 443.926 284.49 cv
443.926 277.869 449.293 272.502 455.914 272.502 cv
563.457 272.502 li
564.213 272.502 564.826 273.114 564.826 273.87 cv
564.826 295.11 li
564.826 295.866 564.213 296.479 563.457 296.479 cv
cp
.827451 .823529 .858824 rgb
f
566.871 296.479 mo
483.649 296.479 li
477.028 296.479 471.66 291.111 471.66 284.49 cv
471.66 277.869 477.028 272.502 483.649 272.502 cv
566.871 272.502 li
568.756 272.502 570.284 274.03 570.284 275.915 cv
570.284 293.065 li
570.284 294.951 568.756 296.479 566.871 296.479 cv
cp
.921569 .921569 .929412 rgb
f
570.284 292.103 mo
483.286 292.103 li
479.082 292.103 475.674 288.694 475.674 284.49 cv
475.674 280.286 479.082 276.878 483.286 276.878 cv
570.284 276.878 li
570.284 292.103 li
cp
1 1 1 rgb
f
570.481 281.984 mo
547.947 281.984 li
547.79 281.984 547.662 281.856 547.662 281.699 cv
547.662 281.542 547.79 281.414 547.947 281.414 cv
570.481 281.414 li
570.639 281.414 570.767 281.542 570.767 281.699 cv
570.767 281.856 570.639 281.984 570.481 281.984 cv
cp
.827451 .823529 .858824 rgb
f
570.371 287.06 mo
539.129 287.06 li
538.972 287.06 538.844 286.932 538.844 286.774 cv
538.844 286.617 538.972 286.489 539.129 286.489 cv
570.371 286.489 li
570.528 286.489 570.656 286.617 570.656 286.774 cv
570.656 286.932 570.528 287.06 570.371 287.06 cv
cp
f
581.614 305.55 mo
522.542 305.55 li
522.385 305.55 522.257 305.422 522.257 305.265 cv
522.257 305.107 522.385 304.979 522.542 304.979 cv
581.614 304.979 li
581.771 304.979 581.899 305.107 581.899 305.265 cv
581.899 305.422 581.771 305.55 581.614 305.55 cv
cp
.698039 .552941 .639216 rgb
f
581.186 311.068 mo
549.942 311.068 li
549.785 311.068 549.657 310.94 549.657 310.783 cv
549.657 310.626 549.785 310.498 549.942 310.498 cv
581.186 310.498 li
581.343 310.498 581.471 310.626 581.471 310.783 cv
581.471 310.94 581.343 311.068 581.186 311.068 cv
cp
f
603.753 368.223 mo
427.092 368.223 li
420.694 368.223 415.507 363.036 415.507 356.638 cv
415.507 355.829 li
415.507 349.432 420.694 344.245 427.092 344.245 cv
603.753 344.245 li
603.753 368.223 li
cp
.72549 .698039 .756863 rgb
f
603.462 368.223 mo
484.497 368.223 li
478.319 368.223 473.312 363.215 473.312 357.036 cv
473.312 355.431 li
473.312 349.253 478.319 344.245 484.497 344.245 cv
603.462 344.245 li
605.66 344.245 607.442 346.027 607.442 348.226 cv
607.442 364.241 li
607.442 366.44 605.66 368.223 603.462 368.223 cv
cp
.780392 .74902 .807843 rgb
f
607.442 363.592 mo
486.382 363.592 li
482.179 363.592 478.771 360.184 478.771 355.979 cv
478.771 351.775 482.179 348.368 486.382 348.368 cv
607.442 348.368 li
607.442 363.592 li
cp
.878431 .87451 .898039 rgb
f
428.989 344.245 mo
573.252 344.245 li
579.874 344.245 585.241 338.877 585.241 332.256 cv
585.241 325.635 579.874 320.267 573.252 320.267 cv
428.989 320.267 li
428.816 320.267 428.676 320.407 428.676 320.581 cv
428.676 343.931 li
428.676 344.104 428.816 344.245 428.989 344.245 cv
cp
.827451 .823529 .858824 rgb
f
425.832 344.245 mo
538.815 344.245 li
545.437 344.245 550.804 338.877 550.804 332.256 cv
550.804 325.635 545.437 320.267 538.815 320.267 cv
425.832 320.267 li
423.759 320.267 422.078 321.947 422.078 324.02 cv
422.078 340.491 li
422.078 342.564 423.759 344.245 425.832 344.245 cv
cp
.921569 .921569 .929412 rgb
f
422.078 339.614 mo
537.953 339.614 li
542.157 339.614 545.565 336.206 545.565 332.002 cv
545.565 327.798 542.157 324.39 537.953 324.39 cv
422.078 324.39 li
422.078 339.614 li
cp
1 1 1 rgb
f
607.44 353.802 mo
548.368 353.802 li
548.211 353.802 548.083 353.674 548.083 353.517 cv
548.083 353.359 548.211 353.231 548.368 353.231 cv
607.44 353.231 li
607.598 353.231 607.726 353.359 607.726 353.517 cv
607.726 353.674 607.598 353.802 607.44 353.802 cv
cp
f
607.443 359.32 mo
576.2 359.32 li
576.043 359.32 575.915 359.192 575.915 359.035 cv
575.915 358.878 576.043 358.75 576.2 358.75 cv
607.443 358.75 li
607.601 358.75 607.729 358.878 607.729 359.035 cv
607.729 359.192 607.601 359.32 607.443 359.32 cv
cp
f
444.802 329.75 mo
422.267 329.75 li
422.109 329.75 421.981 329.622 421.981 329.465 cv
421.981 329.308 422.109 329.18 422.267 329.18 cv
444.802 329.18 li
444.959 329.18 445.087 329.308 445.087 329.465 cv
445.087 329.622 444.959 329.75 444.802 329.75 cv
cp
.72549 .698039 .756863 rgb
f
453.274 334.824 mo
422.032 334.824 li
421.875 334.824 421.747 334.696 421.747 334.539 cv
421.747 334.382 421.875 334.254 422.032 334.254 cv
453.274 334.254 li
453.432 334.254 453.56 334.382 453.56 334.539 cv
453.56 334.696 453.432 334.824 453.274 334.824 cv
cp
f
557.86 224.927 mo
450.44 224.927 li
443.758 224.927 438.341 219.509 438.341 212.826 cv
438.341 212.603 li
438.341 205.92 443.758 200.502 450.44 200.502 cv
557.86 200.502 li
558.623 200.502 559.241 201.121 559.241 201.884 cv
559.241 223.545 li
559.241 224.308 558.623 224.927 557.86 224.927 cv
cp
f
561.255 224.927 mo
478.176 224.927 li
471.493 224.927 466.076 219.509 466.076 212.826 cv
466.076 212.603 li
466.076 205.92 471.493 200.502 478.176 200.502 cv
561.255 200.502 li
563.157 200.502 564.7 202.045 564.7 203.947 cv
564.7 221.481 li
564.7 223.384 563.157 224.927 561.255 224.927 cv
cp
.780392 .74902 .807843 rgb
f
564.7 220.033 mo
477.738 220.033 li
473.514 220.033 470.09 216.608 470.09 212.385 cv
470.09 212.313 li
470.09 208.089 473.514 204.664 477.738 204.664 cv
564.7 204.664 li
564.7 220.033 li
cp
.878431 .87451 .898039 rgb
f
564.897 210.074 mo
542.362 210.074 li
542.204 210.074 542.075 209.945 542.075 209.787 cv
542.075 209.629 542.204 209.5 542.362 209.5 cv
564.897 209.5 li
565.056 209.5 565.185 209.629 565.185 209.787 cv
565.185 209.945 565.056 210.074 564.897 210.074 cv
cp
.72549 .698039 .756863 rgb
f
564.787 215.197 mo
533.545 215.197 li
533.387 215.197 533.258 215.068 533.258 214.91 cv
533.258 214.752 533.387 214.623 533.545 214.623 cv
564.787 214.623 li
564.945 214.623 565.074 214.752 565.074 214.91 cv
565.074 215.068 564.945 215.197 564.787 215.197 cv
cp
f
780.353 273.01 mo
638.262 273.01 li
631.641 273.01 626.273 267.643 626.273 261.021 cv
626.273 254.4 631.641 249.032 638.262 249.032 cv
780.353 249.032 li
780.353 273.01 li
cp
f
789.944 273.01 mo
670.979 273.01 li
664.802 273.01 659.794 268.002 659.794 261.824 cv
659.794 260.219 li
659.794 254.04 664.802 249.032 670.979 249.032 cv
789.944 249.032 li
792.143 249.032 793.925 250.814 793.925 253.014 cv
793.925 269.029 li
793.925 271.228 792.143 273.01 789.944 273.01 cv
cp
.780392 .74902 .807843 rgb
f
793.925 268.38 mo
672.864 268.38 li
668.661 268.38 665.253 264.972 665.253 260.768 cv
665.253 256.563 668.661 253.155 672.864 253.155 cv
793.925 253.155 li
793.925 268.38 li
cp
.921569 .921569 .929412 rgb
f
793.926 258.516 mo
753.122 258.516 li
752.965 258.516 752.837 258.388 752.837 258.23 cv
752.837 258.073 752.965 257.945 753.122 257.945 cv
793.926 257.945 li
794.083 257.945 794.211 258.073 794.211 258.23 cv
794.211 258.388 794.083 258.516 793.926 258.516 cv
cp
.72549 .698039 .756863 rgb
f
793.926 263.59 mo
760.399 263.59 li
760.242 263.59 760.114 263.462 760.114 263.305 cv
760.114 263.147 760.242 263.02 760.399 263.02 cv
793.926 263.02 li
794.083 263.02 794.211 263.147 794.211 263.305 cv
794.211 263.462 794.083 263.59 793.926 263.59 cv
cp
f
636.003 249.223 mo
769.821 249.223 li
776.442 249.223 781.811 243.855 781.811 237.233 cv
781.811 230.612 776.442 225.245 769.821 225.245 cv
636.003 225.245 li
635.83 225.245 635.689 225.386 635.689 225.559 cv
635.689 248.909 li
635.689 249.082 635.83 249.223 636.003 249.223 cv
cp
.639216 .482353 .564706 rgb
f
632.845 249.223 mo
736.301 249.223 li
742.922 249.223 748.29 243.855 748.29 237.233 cv
748.29 230.612 742.922 225.245 736.301 225.245 cv
632.845 225.245 li
630.772 225.245 629.092 226.925 629.092 228.998 cv
629.092 245.47 li
629.092 247.542 630.772 249.223 632.845 249.223 cv
cp
.698039 .552941 .639216 rgb
f
629.092 244.592 mo
735.826 244.592 li
740.03 244.592 743.438 241.184 743.438 236.98 cv
743.438 232.776 740.03 229.368 735.826 229.368 cv
629.092 229.368 li
629.092 244.592 li
cp
.921569 .921569 .929412 rgb
f
688.098 234.728 mo
629.025 234.728 li
628.868 234.728 628.74 234.6 628.74 234.442 cv
628.74 234.285 628.868 234.157 629.025 234.157 cv
688.098 234.157 li
688.255 234.157 688.383 234.285 688.383 234.442 cv
688.383 234.6 688.255 234.728 688.098 234.728 cv
cp
1 1 1 rgb
f
675.793 239.803 mo
629.136 239.803 li
628.979 239.803 628.851 239.675 628.851 239.518 cv
628.851 239.36 628.979 239.232 629.136 239.232 cv
675.793 239.232 li
675.95 239.232 676.078 239.36 676.078 239.518 cv
676.078 239.675 675.95 239.803 675.793 239.803 cv
cp
f
774.884 320.585 mo
630.621 320.585 li
623.999 320.585 618.632 315.218 618.632 308.597 cv
618.632 301.975 623.999 296.607 630.621 296.607 cv
774.884 296.607 li
775.057 296.607 775.197 296.748 775.197 296.921 cv
775.197 320.271 li
775.197 320.444 775.057 320.585 774.884 320.585 cv
cp
.94902 .65098 .352941 rgb
f
778.042 320.585 mo
665.058 320.585 li
658.437 320.585 653.069 315.218 653.069 308.597 cv
653.069 301.975 658.437 296.607 665.058 296.607 cv
778.042 296.607 li
780.114 296.607 781.795 298.288 781.795 300.36 cv
781.795 316.832 li
781.795 318.905 780.114 320.585 778.042 320.585 cv
cp
.968627 .701961 .411765 rgb
f
781.795 315.955 mo
665.92 315.955 li
661.716 315.955 658.308 312.547 658.308 308.343 cv
658.308 304.139 661.716 300.73 665.92 300.73 cv
781.795 300.73 li
781.795 315.955 li
cp
1 .843137 .690196 rgb
f
763.926 296.798 mo
656.383 296.798 li
649.762 296.798 644.395 291.43 644.395 284.809 cv
644.395 278.188 649.762 272.82 656.383 272.82 cv
763.926 272.82 li
764.683 272.82 765.295 273.433 765.295 274.188 cv
765.295 295.429 li
765.295 296.185 764.683 296.798 763.926 296.798 cv
cp
.827451 .823529 .858824 rgb
f
767.34 296.798 mo
684.118 296.798 li
677.497 296.798 672.129 291.43 672.129 284.809 cv
672.129 278.188 677.497 272.82 684.118 272.82 cv
767.34 272.82 li
769.225 272.82 770.754 274.349 770.754 276.233 cv
770.754 293.384 li
770.754 295.27 769.225 296.798 767.34 296.798 cv
cp
.921569 .921569 .929412 rgb
f
770.754 292.421 mo
683.755 292.421 li
679.551 292.421 676.144 289.013 676.144 284.809 cv
676.144 280.604 679.551 277.197 683.755 277.197 cv
770.754 277.197 li
770.754 292.421 li
cp
1 1 1 rgb
f
770.951 282.303 mo
748.416 282.303 li
748.259 282.303 748.131 282.175 748.131 282.018 cv
748.131 281.86 748.259 281.732 748.416 281.732 cv
770.951 281.732 li
771.108 281.732 771.236 281.86 771.236 282.018 cv
771.236 282.175 771.108 282.303 770.951 282.303 cv
cp
.827451 .823529 .858824 rgb
f
770.841 287.378 mo
739.598 287.378 li
739.44 287.378 739.313 287.25 739.313 287.093 cv
739.313 286.936 739.44 286.808 739.598 286.808 cv
770.841 286.808 li
770.998 286.808 771.126 286.936 771.126 287.093 cv
771.126 287.25 770.998 287.378 770.841 287.378 cv
cp
f
782.083 305.868 mo
723.011 305.868 li
722.854 305.868 722.726 305.74 722.726 305.583 cv
722.726 305.426 722.854 305.298 723.011 305.298 cv
782.083 305.298 li
782.24 305.298 782.368 305.426 782.368 305.583 cv
782.368 305.74 782.24 305.868 782.083 305.868 cv
cp
.698039 .552941 .639216 rgb
f
781.654 311.387 mo
750.412 311.387 li
750.255 311.387 750.127 311.259 750.127 311.102 cv
750.127 310.944 750.255 310.816 750.412 310.816 cv
781.654 310.816 li
781.812 310.816 781.939 310.944 781.939 311.102 cv
781.939 311.259 781.812 311.387 781.654 311.387 cv
cp
f
804.222 368.541 mo
627.561 368.541 li
621.163 368.541 615.977 363.354 615.977 356.956 cv
615.977 356.147 li
615.977 349.75 621.163 344.563 627.561 344.563 cv
804.222 344.563 li
804.222 368.541 li
cp
.72549 .698039 .756863 rgb
f
803.931 368.541 mo
684.966 368.541 li
678.788 368.541 673.78 363.533 673.78 357.354 cv
673.78 355.749 li
673.78 349.571 678.788 344.563 684.966 344.563 cv
803.931 344.563 li
806.129 344.563 807.912 346.346 807.912 348.544 cv
807.912 364.56 li
807.912 366.759 806.129 368.541 803.931 368.541 cv
cp
.780392 .74902 .807843 rgb
f
807.912 363.91 mo
686.852 363.91 li
682.647 363.91 679.239 360.502 679.239 356.298 cv
679.239 352.094 682.647 348.687 686.852 348.687 cv
807.912 348.687 li
807.912 363.91 li
cp
.878431 .87451 .898039 rgb
f
629.458 344.563 mo
773.722 344.563 li
780.343 344.563 785.71 339.195 785.71 332.574 cv
785.71 325.953 780.343 320.585 773.722 320.585 cv
629.458 320.585 li
629.285 320.585 629.145 320.726 629.145 320.899 cv
629.145 344.249 li
629.145 344.423 629.285 344.563 629.458 344.563 cv
cp
.827451 .823529 .858824 rgb
f
626.301 344.563 mo
739.284 344.563 li
745.905 344.563 751.273 339.195 751.273 332.574 cv
751.273 325.953 745.905 320.585 739.284 320.585 cv
626.301 320.585 li
624.228 320.585 622.548 322.266 622.548 324.338 cv
622.548 340.81 li
622.548 342.883 624.228 344.563 626.301 344.563 cv
cp
.921569 .921569 .929412 rgb
f
622.548 339.933 mo
738.422 339.933 li
742.626 339.933 746.034 336.524 746.034 332.32 cv
746.034 328.116 742.626 324.708 738.422 324.708 cv
622.548 324.708 li
622.548 339.933 li
cp
1 1 1 rgb
f
807.909 354.12 mo
748.837 354.12 li
748.68 354.12 748.552 353.992 748.552 353.835 cv
748.552 353.678 748.68 353.55 748.837 353.55 cv
807.909 353.55 li
808.066 353.55 808.194 353.678 808.194 353.835 cv
808.194 353.992 808.066 354.12 807.909 354.12 cv
cp
f
807.912 359.639 mo
776.669 359.639 li
776.512 359.639 776.384 359.511 776.384 359.354 cv
776.384 359.196 776.512 359.068 776.669 359.068 cv
807.912 359.068 li
808.069 359.068 808.197 359.196 808.197 359.354 cv
808.197 359.511 808.069 359.639 807.912 359.639 cv
cp
f
645.271 330.068 mo
622.735 330.068 li
622.578 330.068 622.45 329.94 622.45 329.783 cv
622.45 329.626 622.578 329.498 622.735 329.498 cv
645.271 329.498 li
645.428 329.498 645.556 329.626 645.556 329.783 cv
645.556 329.94 645.428 330.068 645.271 330.068 cv
cp
.72549 .698039 .756863 rgb
f
653.743 335.143 mo
622.501 335.143 li
622.344 335.143 622.216 335.015 622.216 334.857 cv
622.216 334.7 622.344 334.572 622.501 334.572 cv
653.743 334.572 li
653.9 334.572 654.028 334.7 654.028 334.857 cv
654.028 335.015 653.9 335.143 653.743 335.143 cv
cp
f
758.329 225.245 mo
650.91 225.245 li
644.228 225.245 638.81 219.827 638.81 213.145 cv
638.81 212.921 li
638.81 206.238 644.228 200.821 650.91 200.821 cv
758.329 200.821 li
759.092 200.821 759.711 201.439 759.711 202.202 cv
759.711 223.863 li
759.711 224.626 759.092 225.245 758.329 225.245 cv
cp
.67451 .647059 .709804 rgb
f
761.724 225.245 mo
678.645 225.245 li
671.962 225.245 666.545 219.827 666.545 213.145 cv
666.545 212.921 li
666.545 206.238 671.962 200.821 678.645 200.821 cv
761.724 200.821 li
763.627 200.821 765.169 202.363 765.169 204.266 cv
765.169 221.8 li
765.169 223.702 763.627 225.245 761.724 225.245 cv
cp
.780392 .74902 .807843 rgb
f
765.169 220.352 mo
678.207 220.352 li
673.982 220.352 670.559 216.927 670.559 212.703 cv
670.559 212.631 li
670.559 208.407 673.982 204.982 678.207 204.982 cv
765.169 204.982 li
765.169 220.352 li
cp
.878431 .87451 .898039 rgb
f
765.366 210.393 mo
742.832 210.393 li
742.674 210.393 742.545 210.264 742.545 210.105 cv
742.545 209.947 742.674 209.818 742.832 209.818 cv
765.366 209.818 li
765.524 209.818 765.653 209.947 765.653 210.105 cv
765.653 210.264 765.524 210.393 765.366 210.393 cv
cp
.72549 .698039 .756863 rgb
f
765.256 215.516 mo
734.014 215.516 li
733.855 215.516 733.727 215.387 733.727 215.229 cv
733.727 215.07 733.855 214.941 734.014 214.941 cv
765.256 214.941 li
765.414 214.941 765.543 215.07 765.543 215.229 cv
765.543 215.387 765.414 215.516 765.256 215.516 cv
cp
f
335.667 45.668 mo
343.547 51.4438 li
343.728 51.4819 li
353.3 49.3608 li
353.89 49.1929 354.416 49.7734 354.19 50.3433 cv
350.951 59.5884 li
350.977 59.7871 li
356.575 68.1382 li
356.917 68.647 356.527 69.3262 355.916 69.2881 cv
345.425 68.7773 li
345.239 68.8618 li
338.822 76.9595 li
338.444 77.4419 337.678 77.2813 337.525 76.688 cv
334.892 67.0293 li
334.761 66.8813 li
325.64 63.1567 li
325.064 62.9463 324.98 62.1675 325.498 61.8389 cv
333.508 56.0688 li
333.6 55.9072 li
334.458 46.2104 li
334.481 45.5986 335.195 45.2778 335.667 45.668 cv
cp
1 .713726 .333333 rgb
f
329.38 60.8213 mo
329.184 60.7212 li
329.105 60.6128 329.129 60.4614 329.238 60.3828 cv
333.977 56.9521 li
334.084 56.8735 334.237 56.8979 334.315 57.0063 cv
334.394 57.1147 334.37 57.2661 334.261 57.3447 cv
329.522 60.7754 li
329.38 60.8213 li
cp
1 .866667 .572549 rgb
f
51.8296 42.6167 mo
59.7095 48.3926 li
59.8901 48.4307 li
69.4624 46.3096 li
70.0513 46.1416 70.5771 46.7222 70.352 47.292 cv
67.1133 56.5371 li
67.1382 56.7358 li
72.7368 65.0869 li
73.0781 65.5957 72.6885 66.2749 72.0771 66.2368 cv
61.5869 65.7261 li
61.4009 65.8105 li
54.9839 73.9087 li
54.6059 74.3906 53.8393 74.23 53.6865 73.6367 cv
51.0537 63.978 li
50.9228 63.8301 li
41.8018 60.1055 li
41.2266 59.895 41.1421 59.1162 41.6592 58.7876 cv
49.6699 53.0176 li
49.7617 52.856 li
50.6206 43.1592 li
50.6431 42.5469 51.3574 42.2266 51.8296 42.6167 cv
cp
1 .713726 .333333 rgb
f
45.542 57.77 mo
45.3457 57.6699 li
45.2671 57.5615 45.2915 57.4102 45.3999 57.3315 cv
50.1387 53.9009 li
50.2466 53.8223 50.3979 53.8467 50.477 53.9551 cv
50.5557 54.0635 50.5312 54.2148 50.4228 54.2935 cv
45.6841 57.7241 li
45.542 57.77 li
cp
1 .866667 .572549 rgb
f
679.511 53.0396 mo
680.483 60.5571 li
680.559 60.6787 li
686.874 64.9204 li
687.283 65.1616 687.238 65.7676 686.798 65.9463 cv
679.871 69.0747 li
679.773 69.1953 li
678.078 76.8096 li
677.976 77.2734 677.386 77.418 677.079 77.0542 cv
671.752 70.8887 li
671.605 70.8291 li
663.622 71.5586 li
663.148 71.604 662.829 71.0874 663.08 70.6846 cv
667.097 64.0361 li
667.109 63.8833 li
664.32 56.7666 li
664.131 56.3306 664.523 55.8667 664.984 55.981 cv
672.513 57.3926 li
672.652 57.3579 li
678.56 52.6504 li
678.915 52.3354 679.478 52.5654 679.511 53.0396 cv
cp
1 .713726 .333333 rgb
f
672.233 58.5562 mo
667.727 57.7261 li
667.595 57.7017 667.508 57.5752 667.532 57.4438 cv
667.557 57.312 667.686 57.2236 667.814 57.2495 cv
672.277 58.0757 li
672.409 58.1001 672.496 58.2266 672.472 58.3579 cv
672.45 58.4746 672.349 58.5562 672.233 58.5562 cv
cp
1 .866667 .572549 rgb
f
205.465 146.062 mo
206.261 152.214 li
206.322 152.313 li
211.49 155.785 li
211.825 155.982 211.789 156.479 211.428 156.625 cv
205.759 159.185 li
205.679 159.284 li
204.292 165.515 li
204.208 165.895 203.725 166.013 203.475 165.716 cv
199.115 160.669 li
198.994 160.621 li
192.46 161.218 li
192.073 161.255 191.812 160.833 192.017 160.502 cv
195.304 155.062 li
195.315 154.936 li
193.032 149.112 li
192.877 148.755 193.198 148.375 193.576 148.469 cv
199.737 149.624 li
199.852 149.596 li
204.686 145.743 li
204.977 145.485 205.437 145.673 205.465 146.062 cv
cp
1 .713726 .333333 rgb
f
199.509 150.62 mo
195.812 149.94 li
195.68 149.916 195.593 149.79 195.617 149.658 cv
195.642 149.527 195.772 149.438 195.899 149.464 cv
199.552 150.14 li
199.684 150.164 199.771 150.291 199.747 150.422 cv
199.725 150.539 199.623 150.62 199.509 150.62 cv
cp
1 .866667 .572549 rgb
f
576.482 156.03 mo
565.723 156.03 li
565.723 108.594 li
576.482 108.594 li
576.482 156.03 li
cp
.827451 .823529 .858824 rgb
f
571.103 85.7856 mo
578.172 98.0298 li
585.241 110.274 li
571.103 110.274 li
556.964 110.274 li
564.033 98.0298 li
571.103 85.7856 li
cp
f
604.76 128.333 mo
594 128.333 li
594 80.896 li
604.76 80.896 li
604.76 128.333 li
cp
.921569 .921569 .929412 rgb
f
599.38 58.0874 mo
606.449 70.332 li
613.519 82.5762 li
599.38 82.5762 li
585.241 82.5762 li
592.311 70.332 li
599.38 58.0874 li
cp
f
774.484 100.5 mo
765.302 100.5 li
765.302 60.0181 li
774.484 60.0181 li
774.484 100.5 li
cp
f
769.893 40.5537 mo
775.926 51.0029 li
781.959 61.4526 li
769.893 61.4526 li
757.827 61.4526 li
763.86 51.0029 li
769.893 40.5537 li
cp
f
148.501 155.754 mo
139.319 155.754 li
139.319 115.271 li
148.501 115.271 li
148.501 155.754 li
cp
f
143.91 95.8076 mo
149.943 106.257 li
155.976 116.706 li
143.91 116.706 li
131.844 116.706 li
137.877 106.257 li
143.91 95.8076 li
cp
f
119.405 122.546 mo
110.223 122.546 li
110.223 82.064 li
119.405 82.064 li
119.405 122.546 li
cp
.827451 .823529 .858824 rgb
f
114.814 62.5996 mo
120.847 73.0488 li
126.879 83.498 li
114.814 83.498 li
102.748 83.498 li
108.781 73.0488 li
114.814 62.5996 li
cp
f
280.444 101.169 mo
223.154 101.169 li
223.154 101.169 221.635 92.9707 227.03 90.5943 cv
228.196 90.0804 229.244 89.8791 230.171 89.8791 cv
233.53 89.8791 235.29 92.5253 235.29 92.5253 cv
235.29 92.5253 238.549 80.9531 254.572 80.0626 cv
255.09 80.0339 255.591 80.02 256.08 80.02 cv
270.728 80.02 272.682 92.5253 272.682 92.5253 cv
272.682 92.5253 273.827 91.6688 275.985 91.6688 cv
276.328 91.6688 276.697 91.6905 277.091 91.7408 cv
281.501 92.3032 280.444 101.169 280.444 101.169 cv
.898039 .894118 .913725 rgb
f
241.275 65.8383 mo
164.949 65.8383 li
164.949 65.8383 163.541 54.0274 169.416 53.2779 cv
169.941 53.211 170.432 53.1821 170.89 53.1821 cv
173.765 53.1821 175.291 54.3238 175.291 54.3238 cv
175.291 54.3238 177.895 37.6629 197.409 37.6629 cv
198.06 37.6629 198.728 37.6813 199.417 37.7196 cv
220.766 38.9058 225.106 54.3238 225.106 54.3238 cv
225.106 54.3238 227.453 50.7978 231.928 50.7978 cv
233.162 50.7978 234.558 51.0659 236.112 51.7506 cv
243.3 54.9171 241.275 65.8383 241.275 65.8383 cv
.952941 .952941 .956863 rgb
f
433.058 93.7046 mo
375.768 93.7046 li
375.768 93.7046 374.711 84.8394 379.121 84.2769 cv
379.514 84.2266 379.883 84.205 380.226 84.205 cv
382.385 84.205 383.53 85.062 383.53 85.062 cv
383.53 85.062 385.485 72.5565 400.132 72.5565 cv
400.621 72.5565 401.122 72.5703 401.64 72.5991 cv
417.663 73.4892 420.922 85.062 420.922 85.062 cv
420.922 85.062 422.683 82.4153 426.042 82.4153 cv
426.968 82.4153 428.016 82.6166 429.183 83.1304 cv
434.577 85.5067 433.058 93.7046 433.058 93.7046 cv
.898039 .894118 .913725 rgb
f
491.263 58.3746 mo
414.937 58.3746 li
414.937 58.3746 412.913 47.4531 420.1 44.287 cv
421.654 43.6024 423.05 43.3343 424.284 43.3343 cv
428.759 43.3343 431.106 46.8599 431.106 46.8599 cv
431.106 46.8599 435.446 31.4418 456.795 30.2559 cv
457.484 30.2176 458.152 30.1992 458.803 30.1992 cv
478.317 30.1992 480.922 46.8599 480.922 46.8599 cv
480.922 46.8599 482.448 45.7181 485.323 45.7181 cv
485.78 45.7181 486.271 45.747 486.796 45.814 cv
492.671 46.5634 491.263 58.3746 491.263 58.3746 cv
.952941 .952941 .956863 rgb
f
676.025 181.925 mo
676.025 181.925 673.013 190.594 669.869 190.132 cv
666.725 189.67 664.895 188.334 664.895 188.334 cv
664.895 188.334 660.203 181.209 663.005 179.99 cv
667.386 178.084 676.025 181.925 676.025 181.925 cv
cp
1 .670588 .580392 rgb
f
636.18 178.143 mo
636.18 178.143 632.569 174.716 627.869 179.179 cv
623.169 183.643 624.31 205.563 624.31 205.563 cv
634.609 203.498 li
635.049 188.342 li
636.18 178.143 li
cp
0 0 0 rgb
f
638.118 192.828 mo
638.118 192.828 647.818 193.094 651.642 192.406 cv
657.28 191.391 662.012 185.642 662.012 185.642 cv
673.568 190.301 li
673.568 190.301 671.091 204.907 656.467 210.707 cv
645.202 215.176 637.681 196.574 637.681 196.574 cv
638.118 192.828 li
cp
.360784 .411765 .647059 rgb
f
645.52 186.85 mo
645.52 186.85 647.375 184.937 646.965 181.859 cv
646.688 179.772 645.787 179.069 645.787 179.069 cv
645.787 179.069 647.291 176.286 643.1 176.314 cv
638.908 176.342 636.374 178.312 636.374 178.312 cv
636.374 178.312 634.493 177.307 633.559 179.508 cv
632.624 181.709 633.369 185.03 633.369 185.03 cv
645.52 186.85 li
cp
0 0 0 rgb
f
669.128 187.398 mo
668.95 187.376 668.853 187.246 668.873 187.104 cv
669.424 183.259 667.481 181.447 667.462 181.429 cv
667.356 181.333 667.349 181.17 667.444 181.065 cv
667.538 180.96 667.702 180.952 667.808 181.047 cv
667.896 181.128 669.972 183.064 669.383 187.178 cv
669.364 187.306 669.254 187.398 669.128 187.398 cv
cp
f
636.299 189.494 mo
636.252 194.539 li
636.252 194.539 637.148 195.997 640.097 196.265 cv
642.294 196.463 643 195.341 643 195.341 cv
642.509 190.922 li
637.191 189.7 li
636.299 189.494 li
cp
1 .670588 .580392 rgb
f
636.224 189.671 mo
636.235 189.811 636.286 189.976 636.367 190.166 cv
637.488 192.731 641.586 194.125 642.872 194.252 cv
642.59 191.724 li
636.224 189.671 li
cp
0 0 0 rgb
f
643.757 179.784 mo
643.757 179.784 646.381 186.221 645.29 189.773 cv
644.199 193.326 640.953 192.682 639.021 191.942 cv
637.087 191.202 636.212 189.984 636.212 189.984 cv
636.212 189.984 634.375 190.556 633.198 188.832 cv
632.022 187.108 632.82 185.181 633.872 184.761 cv
634.923 184.341 636.142 185.123 636.142 185.123 cv
635.218 183.249 li
635.218 183.249 639.529 173.945 643.757 179.784 cv
cp
1 .670588 .580392 rgb
f
636.142 185.123 mo
636.142 185.123 638.859 185.77 640.866 182.789 cv
642.872 179.808 642.741 178.551 642.741 178.551 cv
644.527 181.761 li
644.527 181.761 645.026 179.595 644.202 178.175 cv
643.377 176.754 642.462 177.012 642.462 177.012 cv
636.374 178.312 li
634.618 183.095 li
636.142 185.123 li
cp
0 0 0 rgb
f
653.625 192.636 mo
653.305 193.378 652.842 194.694 653.141 195.556 cv
653.25 195.871 653.452 196.089 653.759 196.223 cv
653.888 196.279 654.057 196.331 654.137 196.257 cv
654.471 195.942 654.148 194.24 653.625 192.636 cv
cp
654.028 196.808 mo
653.896 196.808 653.739 196.776 653.554 196.695 cv
653.113 196.503 652.811 196.177 652.654 195.724 cv
652.146 194.26 653.383 191.93 653.436 191.832 cv
653.482 191.743 653.573 191.684 653.681 191.697 cv
653.782 191.704 653.869 191.77 653.904 191.866 cv
654.145 192.527 655.305 195.865 654.489 196.632 cv
654.393 196.723 654.244 196.808 654.028 196.808 cv
cp
.968627 .701961 .411765 rgb
f
672.245 194.091 mo
672.148 194.072 li
660.072 189.151 li
659.94 189.098 659.877 188.948 659.931 188.816 cv
659.983 188.684 660.135 188.62 660.266 188.675 cv
672.342 193.595 li
672.474 193.649 672.537 193.799 672.483 193.931 cv
672.443 194.031 672.347 194.091 672.245 194.091 cv
cp
f
643.269 187.923 mo
643.185 187.909 li
643.05 187.862 642.979 187.716 643.025 187.581 cv
643.417 186.444 642.593 185.174 642.585 185.162 cv
642.507 185.043 642.539 184.883 642.658 184.805 cv
642.778 184.728 642.938 184.759 643.015 184.878 cv
643.055 184.939 643.985 186.375 643.512 187.749 cv
643.476 187.855 643.375 187.923 643.269 187.923 cv
cp
0 0 0 rgb
f
635.783 188.155 mo
635.591 188.068 li
633.919 186.182 li
633.824 186.075 633.834 185.912 633.94 185.818 cv
634.047 185.723 634.21 185.734 634.304 185.84 cv
635.976 187.727 li
636.07 187.833 636.061 187.996 635.954 188.09 cv
635.783 188.155 li
cp
f
667.092 179.99 mo
667.092 179.99 668.889 175.182 667.028 174.871 cv
665.169 174.561 662.205 179.986 662.244 181.088 cv
662.283 182.189 663.675 183.809 663.675 183.809 cv
667.092 179.99 li
cp
1 .670588 .580392 rgb
f
633.968 187.606 mo
633.839 187.606 633.728 187.51 633.712 187.379 cv
633.695 187.238 633.796 187.11 633.938 187.093 cv
635.14 186.95 li
635.275 186.938 635.409 187.035 635.426 187.175 cv
635.442 187.316 635.342 187.444 635.2 187.461 cv
633.998 187.604 li
633.968 187.606 li
cp
0 0 0 rgb
f
644.674 182.751 mo
644.621 182.746 li
643.497 182.51 li
643.357 182.481 643.269 182.345 643.298 182.206 cv
643.327 182.066 643.467 181.978 643.603 182.006 cv
644.727 182.242 li
644.866 182.271 644.955 182.407 644.926 182.546 cv
644.9 182.668 644.793 182.751 644.674 182.751 cv
cp
f
639.949 183.332 mo
639.853 183.332 639.759 183.276 639.716 183.183 cv
639.656 183.054 639.712 182.9 639.841 182.841 cv
641.727 181.966 li
641.856 181.906 642.01 181.962 642.068 182.091 cv
642.128 182.22 642.072 182.373 641.943 182.433 cv
640.058 183.308 li
639.949 183.332 li
cp
f
644.584 185.365 mo
644.471 185.365 644.366 185.289 644.335 185.174 cv
644.021 184.012 li
644.077 183.776 li
644.444 183.356 li
644.538 183.249 644.702 183.239 644.808 183.332 cv
644.914 183.426 644.925 183.588 644.831 183.695 cv
644.555 184.011 li
644.833 185.04 li
644.87 185.177 644.788 185.318 644.651 185.355 cv
644.584 185.365 li
cp
f
641.357 185.563 mo
641.244 185.563 641.14 185.487 641.108 185.372 cv
640.795 184.21 li
640.854 183.969 li
641.361 183.417 li
641.457 183.312 641.621 183.306 641.725 183.401 cv
641.83 183.498 641.837 183.661 641.74 183.766 cv
641.329 184.213 li
641.606 185.238 li
641.644 185.375 641.562 185.516 641.425 185.553 cv
641.357 185.563 li
cp
f
642.046 189.417 mo
641.814 189.417 641.086 189.325 640.517 188.259 cv
640.45 188.133 640.497 187.978 640.623 187.911 cv
640.746 187.844 640.903 187.891 640.972 188.017 cv
641.465 188.942 642.035 188.9 642.058 188.901 cv
642.198 188.885 642.324 188.991 642.339 189.13 cv
642.354 189.269 642.258 189.395 642.119 189.413 cv
642.046 189.417 li
cp
f
637.167 300.113 mo
637.468 307.117 li
650.269 309.936 li
650.914 305.105 li
649.903 298.819 li
637.167 300.113 li
cp
1 .670588 .580392 rgb
f
650.938 225.184 mo
650.938 225.184 653.516 246.466 654.312 267.01 cv
655.106 287.555 655.627 302.395 655.627 302.395 cv
633.393 303.161 li
632.457 262.365 li
632.968 225.184 li
650.938 225.184 li
cp
.25098 .313726 .498039 rgb
f
613.906 242.273 mo
618.56 247.717 li
608.817 255.736 li
602.431 250.031 li
613.906 242.273 li
cp
1 .670588 .580392 rgb
f
624.062 225.184 mo
624.062 225.184 621.782 233.175 620.459 240.017 cv
619.137 246.859 617.153 256.027 617.153 256.027 cv
617.153 256.027 609.77 276.814 623.235 279.792 cv
639.932 283.483 640.689 263.394 640.689 263.394 cv
638.994 221.084 li
624.062 225.184 li
cp
.25098 .313726 .498039 rgb
f
636.224 193.406 mo
624.188 204.314 li
624.188 204.314 622.655 226.235 622.948 226.626 cv
623.241 227.017 630.453 229.554 639.414 229.057 cv
648.375 228.561 651.098 226.528 651.587 226.235 cv
652.076 225.941 647.873 198.059 647.873 198.059 cv
647.873 198.059 636.744 196.466 636.224 193.406 cv
cp
.360784 .411765 .647059 rgb
f
639.225 320.755 mo
638.285 320.746 637.515 319.954 637.474 318.951 cv
637.311 314.988 636.458 306.127 637.182 306.097 cv
638.104 306.06 647.465 308.206 647.465 308.206 cv
647.465 308.206 647.504 302.705 651.365 303.534 cv
654.327 304.17 657.867 307.522 659.354 309.048 cv
659.826 309.532 660.413 309.859 661.055 309.992 cv
663.813 310.563 671.418 312.495 671.69 316.521 cv
672.024 321.443 670.024 320.961 669.103 320.999 cv
668.311 321.031 645.632 320.816 639.225 320.755 cv
cp
.505882 .807843 .917647 rgb
f
604.584 232.04 mo
605.311 231.444 606.409 231.559 607.084 232.302 cv
609.749 235.238 615.635 243.152 615.099 243.639 cv
614.415 244.259 607.439 247.621 607.439 247.621 cv
607.439 247.621 609.801 251.201 606.307 253.04 cv
603.625 254.45 598.759 254.147 596.64 253.93 cv
595.967 253.86 595.307 253.986 594.729 254.296 cv
592.247 255.627 585.171 259.018 582.381 256.103 cv
578.97 252.539 580.813 251.628 581.497 251.008 cv
582.084 250.476 599.627 236.101 604.584 232.04 cv
cp
f
636.224 193.406 mo
636.224 193.406 638.126 197.442 643 195.341 cv
647.875 193.24 629.59 223.986 629.59 223.986 cv
632.086 197.297 li
636.224 193.406 li
cp
.360784 .411765 .647059 rgb
f
602.911 256.027 mo
617.858 245.1 li
621.547 251.305 li
620.459 278.821 li
620.459 278.821 614.444 277.512 602.911 256.027 cv
cp
.25098 .313726 .498039 rgb
f
633.218 278.919 mo
633.012 278.814 li
632.927 278.701 632.95 278.539 633.064 278.454 cv
633.12 278.413 638.695 274.159 641.663 263.325 cv
644.645 252.44 642.813 235.784 642.794 235.617 cv
642.781 235.506 642.842 235.399 642.943 235.354 cv
649.061 232.577 li
649.187 232.52 649.343 232.575 649.401 232.705 cv
649.46 232.835 649.403 232.987 649.273 233.046 cv
643.325 235.745 li
643.52 237.62 644.996 253.107 642.159 263.462 cv
639.141 274.481 633.429 278.825 633.371 278.868 cv
633.218 278.919 li
cp
.360784 .411765 .647059 rgb
f
619.76 248.383 mo
620.353 250.317 621.414 253.252 622.296 253.656 cv
622.417 253.713 622.495 253.691 622.547 253.665 cv
622.662 253.609 622.724 253.527 622.749 253.397 cv
622.939 252.411 621.063 249.927 619.76 248.383 cv
cp
622.438 254.206 mo
622.319 254.206 622.199 254.179 622.081 254.124 cv
620.589 253.439 619.107 248.024 618.943 247.409 cv
618.913 247.295 618.965 247.174 619.068 247.117 cv
619.173 247.06 619.302 247.082 619.383 247.169 cv
619.813 247.64 623.578 251.818 623.255 253.495 cv
623.199 253.783 623.032 254.003 622.771 254.128 cv
622.664 254.18 622.552 254.206 622.438 254.206 cv
cp
f
624.603 236.798 mo
624.469 236.798 624.356 236.694 624.346 236.56 cv
624.335 236.418 624.441 236.294 624.583 236.283 cv
624.762 236.27 628.965 235.875 630.152 230.043 cv
630.18 229.903 630.313 229.811 630.456 229.843 cv
630.595 229.871 630.685 230.007 630.656 230.146 cv
629.39 236.373 624.669 236.793 624.621 236.797 cv
624.603 236.798 li
cp
f
649.845 213.114 mo
649.789 213.107 li
649.65 213.077 649.563 212.939 649.594 212.801 cv
650.935 206.758 648.44 203.283 648.415 203.249 cv
648.331 203.135 648.354 202.974 648.469 202.889 cv
648.586 202.803 648.744 202.828 648.829 202.942 cv
648.938 203.09 651.491 206.626 650.096 212.912 cv
650.069 213.032 649.963 213.114 649.845 213.114 cv
cp
.968627 .701961 .411765 rgb
f
636.224 193.406 mo
636.224 193.406 628.063 195.708 625.43 200.391 cv
622.03 206.437 624.188 222.472 624.188 222.472 cv
638.093 203.678 li
636.224 193.406 li
cp
.360784 .411765 .647059 rgb
f
656.576 224.495 mo
656.576 224.495 663.457 222.819 667.183 220.39 cv
670.909 217.961 671.626 216.294 671.343 215.691 cv
671.06 215.089 668.389 216.089 668.389 216.089 cv
668.389 216.089 671.826 213.71 671.183 212.399 cv
670.539 211.089 667.287 212.842 667.287 212.842 cv
667.287 212.842 669.393 210.637 668.273 210.002 cv
667.155 209.367 660.001 213.618 660.001 213.618 cv
660.001 213.618 661.167 210.913 660.309 210.41 cv
659.45 209.908 657.028 212.263 655.946 213.875 cv
654.864 215.486 654.612 217.665 654.612 217.665 cv
656.576 224.495 li
cp
1 .670588 .580392 rgb
f
662.244 216.19 mo
662.024 216.067 li
661.95 215.946 661.988 215.788 662.109 215.713 cv
667.347 212.493 li
667.469 212.421 667.627 212.457 667.701 212.578 cv
667.775 212.699 667.737 212.857 667.616 212.933 cv
662.379 216.152 li
662.244 216.19 li
cp
0 0 0 rgb
f
663.688 219.259 mo
663.467 219.132 li
663.395 219.01 663.435 218.852 663.558 218.779 cv
668.493 215.862 li
668.615 215.791 668.773 215.831 668.846 215.953 cv
668.918 216.075 668.878 216.233 668.755 216.306 cv
663.819 219.223 li
663.688 219.259 li
cp
f
636.944 198.146 mo
636.944 198.146 640.081 208.148 642.518 211.175 cv
645.556 214.948 653.338 212.713 653.338 212.713 cv
658.895 225.184 li
658.895 225.184 641.044 234.692 632.457 227.268 cv
622.896 219.001 624.408 203.047 624.408 203.047 cv
636.944 198.146 li
cp
.360784 .411765 .647059 rgb
f
642.08 211.699 mo
641.38 212.103 640.223 212.881 639.947 213.75 cv
639.846 214.069 639.878 214.365 640.044 214.655 cv
640.113 214.777 640.222 214.933 640.326 214.908 cv
640.782 214.856 641.541 213.299 642.08 211.699 cv
cp
640.311 215.424 mo
640.104 215.424 639.833 215.324 639.597 214.911 cv
639.358 214.494 639.312 214.052 639.456 213.595 cv
639.925 212.117 642.308 210.989 642.408 210.941 cv
642.501 210.898 642.609 210.914 642.686 210.979 cv
642.763 211.046 642.793 211.151 642.765 211.249 cv
642.562 211.923 641.496 215.293 640.385 215.42 cv
640.311 215.424 li
cp
.968627 .701961 .411765 rgb
f
655.227 226.37 mo
655.126 226.37 655.03 226.311 654.989 226.212 cv
649.969 214.224 li
649.914 214.093 649.976 213.941 650.106 213.887 cv
650.237 213.832 650.389 213.894 650.443 214.024 cv
655.464 226.013 li
655.519 226.144 655.457 226.295 655.326 226.35 cv
655.227 226.37 li
cp
f
667.092 179.99 mo
667.092 179.99 672.608 171.715 673.981 171.887 cv
675.354 172.058 674.84 173.256 674.84 173.256 cv
674.84 173.256 676.899 171.458 677.844 171.887 cv
678.788 172.316 677.844 174.462 677.844 174.462 cv
677.844 174.462 679.646 173.306 679.904 174.871 cv
680.161 176.436 674.252 187.651 672.915 188.138 cv
671.578 188.625 670.119 181.088 670.119 181.088 cv
667.092 179.99 li
cp
1 .670588 .580392 rgb
f
675.27 181.346 mo
675.186 181.331 li
668.54 179.029 li
668.405 178.983 668.334 178.836 668.381 178.702 cv
668.428 178.567 668.577 178.497 668.708 178.543 cv
675.354 180.845 li
675.488 180.891 675.56 181.038 675.513 181.172 cv
675.476 181.279 675.376 181.346 675.27 181.346 cv
cp
0 0 0 rgb
f
640.276 196.278 mo
637.303 196.278 636.157 193.975 636.143 193.945 cv
636.081 193.816 636.136 193.664 636.264 193.602 cv
636.393 193.543 636.545 193.594 636.607 193.722 cv
636.675 193.861 638.314 197.11 643.088 195.133 cv
643.219 195.078 643.37 195.141 643.425 195.272 cv
643.479 195.404 643.416 195.555 643.285 195.609 cv
642.123 196.09 641.125 196.278 640.276 196.278 cv
cp
.968627 .701961 .411765 rgb
f
476.922 176.379 mo
477.389 189.256 li
490.379 185.851 li
490.29 172.793 li
476.922 176.379 li
cp
.956863 .517647 .384314 rgb
f
479.852 103.751 mo
479.852 103.751 468.897 129.501 468.554 141.175 cv
468.211 152.849 473.722 180.259 473.722 180.259 cv
497.292 179.27 li
497.292 179.27 492.183 147.063 492.668 142.085 cv
493.152 137.107 497.292 120.231 497.292 120.231 cv
488.504 98.4409 li
479.852 103.751 li
cp
.639216 .482353 .564706 rgb
f
488.654 58.7773 mo
488.654 58.7773 494.76 56.2222 500.247 61.3599 cv
505.734 66.498 503.76 73.9946 496.268 74.7935 cv
488.774 75.5923 486.015 68.1963 486.015 68.1963 cv
488.654 58.7773 li
cp
0 0 0 rgb
f
508.555 172.848 mo
511.73 182.27 li
523.665 176.988 li
520.819 167.352 li
508.555 172.848 li
cp
.956863 .517647 .384314 rgb
f
484.087 101.82 mo
503.58 178.338 li
525.892 171.217 li
525.892 171.217 509.666 116.148 506.895 109.128 cv
504.123 102.108 501.168 99.647 501.168 99.647 cv
484.087 101.82 li
cp
.639216 .482353 .564706 rgb
f
492.352 196.552 mo
492.203 198.711 491.88 200.275 491.27 200.377 cv
488.567 200.829 461.834 201.186 460.465 200.791 cv
459.096 200.391 454.881 200.048 454.993 197.422 cv
455.019 196.915 455.233 196.443 455.567 196.022 cv
456.946 194.253 460.352 193.248 460.352 193.248 cv
475.622 184.82 li
475.622 184.82 475.704 184.097 475.796 183.297 cv
475.914 182.308 476.996 181.759 477.857 182.251 cv
484.488 186.009 li
490.939 183.444 li
491.447 183.137 492.099 183.475 492.135 184.07 cv
492.304 186.783 492.612 192.644 492.352 196.552 cv
cp
.968627 .701961 .411765 rgb
f
530.964 185.869 mo
530.263 186.463 527.185 187.22 523.386 187.963 cv
515.799 189.45 505.363 190.889 505.363 190.889 cv
509.548 180.546 li
509.548 180.546 509.243 179.887 508.914 179.153 cv
508.506 178.248 509.157 177.215 510.147 177.195 cv
517.769 177.017 li
522.316 172.719 li
522.597 172.193 523.33 172.148 523.665 172.639 cv
525.068 174.68 527.574 177.693 529.412 181.065 cv
530.712 183.445 531.51 185.402 530.964 185.869 cv
cp
f
454.821 102.717 mo
454.821 102.717 448.465 106.285 443.956 107.07 cv
439.446 107.856 437.737 107.105 437.527 106.453 cv
437.317 105.8 440.03 104.679 440.03 104.679 cv
440.03 104.679 435.772 105.3 435.338 103.862 cv
434.902 102.424 438.58 101.462 438.58 101.462 cv
438.58 101.462 435.448 101.279 435.845 100.017 cv
436.242 98.7539 443.14 97.5596 443.14 97.5596 cv
443.14 97.5596 439.561 97.022 439.854 96.0415 cv
440.148 95.061 445.146 93.8135 447.092 94.2671 cv
449.037 94.7212 451.506 96.1978 451.506 96.1978 cv
454.821 102.717 li
cp
.956863 .517647 .384314 rgb
f
448.874 99.8311 mo
444.605 99.8311 443.006 97.8081 442.936 97.7158 cv
442.849 97.6035 442.87 97.4424 442.982 97.356 cv
443.096 97.2686 443.257 97.29 443.344 97.4023 cv
443.36 97.4243 445.104 99.5854 449.755 99.2876 cv
449.921 99.2808 450.02 99.3867 450.028 99.5278 cv
450.037 99.6699 449.93 99.7925 449.788 99.8013 cv
449.471 99.8218 449.166 99.8311 448.874 99.8311 cv
cp
0 0 0 rgb
f
444.969 104.969 mo
444.87 104.969 444.776 104.912 444.733 104.816 cv
441.65 97.9058 li
441.593 97.7759 441.651 97.6235 441.781 97.5654 cv
441.907 97.5078 442.063 97.5659 442.121 97.6958 cv
445.204 104.606 li
445.262 104.736 445.203 104.889 445.073 104.947 cv
444.969 104.969 li
cp
f
480.535 74.0723 mo
480.535 74.0723 465.843 84.1875 462.685 86.1304 cv
459.526 88.0737 449.522 93.5293 449.522 93.5293 cv
452.718 109.128 li
452.718 109.128 463.271 107.071 471.138 103.604 cv
476.298 101.329 483.484 96.9858 483.484 96.9858 cv
480.535 74.0723 li
cp
.505882 .807843 .917647 rgb
f
477.855 107.311 mo
477.855 107.311 476.26 80.3467 478.24 77.0088 cv
480.222 73.6709 481.635 72.9307 485.412 71.9487 cv
489.189 70.9663 494.672 70.8774 496.733 71.4551 cv
498.795 72.0322 504.771 103.128 503.779 104.104 cv
502.788 105.08 485.896 109.771 477.855 107.311 cv
cp
f
478.031 96.2456 mo
477.918 96.2456 477.815 96.1709 477.783 96.0571 cv
477.771 96.0127 476.551 91.585 476.664 87.645 cv
476.801 82.9336 479.411 79.209 479.522 79.0527 cv
479.604 78.937 479.766 78.9102 479.882 78.9922 cv
479.997 79.0747 480.024 79.2354 479.942 79.3511 cv
479.916 79.3882 477.312 83.1089 477.18 87.6597 cv
477.067 91.5229 478.268 95.875 478.279 95.9185 cv
478.317 96.0557 478.237 96.1978 478.101 96.2358 cv
478.031 96.2456 li
cp
.360784 .411765 .647059 rgb
f
479.781 64.8037 mo
479.781 64.8037 477.723 63.1309 477.767 60.0405 cv
477.796 57.9453 478.603 57.1445 478.603 57.1445 cv
478.603 57.1445 476.789 54.5698 480.936 54.1045 cv
485.082 53.6392 488.423 52.8315 490.742 56.1406 cv
492.109 58.0898 492.288 62.6992 492.288 62.6992 cv
479.781 64.8037 li
cp
0 0 0 rgb
f
489.351 66.8066 mo
489.999 71.8564 li
489.999 71.8564 489.274 73.4248 486.352 74.0444 cv
484.174 74.5054 483.332 73.4648 483.332 73.4648 cv
483.298 68.9775 li
488.48 67.1196 li
489.351 66.8066 li
cp
.956863 .517647 .384314 rgb
f
489.303 66.5 mo
489.308 66.6392 489.276 66.8091 489.219 67.0059 cv
488.413 69.6733 484.571 71.2334 483.315 71.5107 cv
483.298 68.9775 li
489.303 66.5 li
cp
0 0 0 rgb
f
480.694 57.6123 mo
480.694 57.6123 478.856 64.2837 480.353 67.667 cv
481.849 71.0503 484.981 70.0327 486.806 69.0737 cv
488.629 68.1152 489.352 66.8081 489.352 66.8081 cv
489.352 66.8081 491.234 67.1577 492.194 65.3149 cv
493.155 63.4727 492.14 61.6616 491.051 61.3701 cv
489.962 61.0786 488.85 61.9946 488.85 61.9946 cv
489.542 60.0327 li
489.542 60.0327 484.187 51.3433 480.694 57.6123 cv
cp
.956863 .517647 .384314 rgb
f
488.85 61.9946 mo
488.85 61.9946 486.238 62.9531 483.904 60.2422 cv
481.571 57.5317 481.553 56.2734 481.553 56.2734 cv
480.164 59.6567 li
480.164 59.6567 479.417 57.5742 480.065 56.0737 cv
480.713 54.5728 481.647 54.7192 481.647 54.7192 cv
487.818 55.2891 li
490.116 59.811 li
488.85 61.9946 li
cp
0 0 0 rgb
f
482.104 65.6025 mo
482.008 65.6025 481.916 65.5493 481.872 65.457 cv
481.243 64.1548 481.992 62.625 482.024 62.5605 cv
482.088 62.4331 482.245 62.3818 482.369 62.4453 cv
482.497 62.5088 482.549 62.6631 482.485 62.7905 cv
482.479 62.8042 481.817 64.1606 482.335 65.2334 cv
482.397 65.3613 482.344 65.5151 482.216 65.5771 cv
482.104 65.6025 li
cp
f
489.53 64.9526 mo
489.384 64.9067 li
489.267 64.8257 489.237 64.6655 489.318 64.5483 cv
490.749 62.4863 li
490.831 62.3696 490.991 62.3403 491.107 62.4219 cv
491.225 62.5029 491.254 62.6631 491.173 62.7803 cv
489.742 64.8423 li
489.53 64.9526 li
cp
f
491.26 64.1968 mo
490.055 64.1958 li
489.912 64.1958 489.797 64.0806 489.797 63.9385 cv
489.797 63.7959 489.912 63.6812 490.055 63.6812 cv
491.26 63.6821 li
491.402 63.6821 491.518 63.7974 491.518 63.9395 cv
491.518 64.082 491.402 64.1968 491.26 64.1968 cv
cp
f
480.106 60.6563 mo
479.999 60.6563 479.898 60.5884 479.862 60.4805 cv
479.817 60.3457 479.89 60.1997 480.024 60.1543 cv
481.107 59.7896 li
481.243 59.7446 481.389 59.8164 481.434 59.9517 cv
481.479 60.0864 481.406 60.2324 481.271 60.2778 cv
480.188 60.6426 li
480.106 60.6563 li
cp
f
484.845 60.6748 mo
484.765 60.6616 li
482.798 60.0186 li
482.663 59.9746 482.589 59.8291 482.633 59.6938 cv
482.678 59.5591 482.823 59.4834 482.958 59.5293 cv
484.925 60.1724 li
485.06 60.2163 485.134 60.3618 485.09 60.4971 cv
485.054 60.6055 484.953 60.6748 484.845 60.6748 cv
cp
f
480.503 63.228 mo
480.325 63.2051 480.228 63.0742 480.248 62.9336 cv
480.401 61.8853 li
480.091 61.606 li
479.984 61.5107 479.977 61.3481 480.071 61.2422 cv
480.167 61.1357 480.329 61.1279 480.435 61.2231 cv
480.848 61.5947 li
480.931 61.8232 li
480.758 63.0078 li
480.739 63.1362 480.629 63.228 480.503 63.228 cv
cp
f
483.715 63.0449 mo
483.537 63.022 483.439 62.8911 483.46 62.75 cv
483.613 61.7056 li
483.154 61.312 li
483.047 61.2197 483.034 61.0571 483.127 60.9492 cv
483.22 60.8408 483.382 60.8281 483.49 60.9214 cv
484.057 61.4072 li
484.144 61.6401 li
483.97 62.8252 li
483.951 62.9531 483.841 63.0449 483.715 63.0449 cv
cp
f
483.13 67.1255 mo
483.022 67.1255 482.914 67.1084 482.807 67.0693 cv
482.673 67.0205 482.604 66.873 482.652 66.7393 cv
482.7 66.6055 482.847 66.5376 482.982 66.585 cv
483.5 66.7734 484.281 65.8799 484.516 65.5527 cv
484.598 65.4365 484.76 65.4106 484.874 65.4932 cv
484.99 65.5757 485.017 65.7368 484.934 65.8525 cv
484.831 65.9961 483.996 67.1255 483.13 67.1255 cv
cp
f
485.722 74.3296 mo
483.999 74.3296 483.205 73.6938 483.168 73.6636 cv
483.059 73.5732 483.043 73.4111 483.133 73.3013 cv
483.225 73.1909 483.385 73.1763 483.494 73.2651 cv
483.503 73.272 484.385 73.9561 486.329 73.7881 cv
488.377 73.6108 489.777 71.7236 489.791 71.7046 cv
489.876 71.5898 490.035 71.5649 490.15 71.6484 cv
490.266 71.7319 490.291 71.8931 490.207 72.0078 cv
490.146 72.0933 488.659 74.103 486.374 74.3008 cv
486.144 74.3208 485.926 74.3296 485.722 74.3296 cv
cp
.360784 .411765 .647059 rgb
f
493.347 139.113 mo
493.228 139.113 493.121 139.031 493.095 138.91 cv
488.691 118.74 li
480.499 117.347 li
480.358 117.323 480.265 117.19 480.288 117.05 cv
480.312 116.911 480.438 116.814 480.585 116.839 cv
488.949 118.261 li
489.053 118.279 489.136 118.357 489.158 118.46 cv
493.599 138.801 li
493.629 138.939 493.541 139.077 493.401 139.107 cv
493.347 139.113 li
cp
.968627 .701961 .411765 rgb
f
502.095 172.766 mo
501.983 172.766 501.881 172.693 501.848 172.581 cv
501.808 172.444 501.886 172.301 502.021 172.261 cv
523.593 165.884 li
523.729 165.846 523.873 165.921 523.913 166.058 cv
523.953 166.194 523.875 166.337 523.739 166.378 cv
502.168 172.755 li
502.095 172.766 li
cp
f
473.722 175.11 mo
473.585 175.11 473.471 175.003 473.465 174.866 cv
473.458 174.724 473.567 174.603 473.709 174.596 cv
495.396 173.545 li
495.567 173.547 495.659 173.648 495.665 173.79 cv
495.672 173.932 495.563 174.053 495.421 174.06 cv
473.734 175.11 li
473.722 175.11 li
cp
f
530.964 185.869 mo
530.964 185.869 519.913 198.258 518.032 198.84 cv
516.15 199.417 497.934 202.475 497.445 201.342 cv
496.972 200.238 497.648 198.748 498.776 197.232 cv
501.104 194.104 505.363 190.889 505.363 190.889 cv
522.51 183.23 li
526.489 184.47 li
530.964 185.869 li
cp
f
492.352 196.552 mo
492.203 198.711 491.88 200.275 491.27 200.377 cv
488.567 200.829 461.834 201.186 460.465 200.791 cv
459.096 200.391 454.881 200.048 454.993 197.422 cv
455.019 196.915 455.233 196.443 455.567 196.022 cv
456.982 196.253 460.982 196.822 467.178 197.078 cv
473.916 197.359 488.366 196.731 492.352 196.552 cv
cp
.360784 .411765 .647059 rgb
f
530.964 185.869 mo
530.964 185.869 519.913 198.258 518.032 198.84 cv
516.15 199.417 497.934 202.475 497.445 201.342 cv
496.972 200.238 497.648 198.748 498.776 197.232 cv
503.271 196.598 514.839 194.914 516.781 194.211 cv
517.859 193.817 520.638 190.989 523.386 187.963 cv
524.458 186.786 525.526 185.577 526.489 184.47 cv
527.696 183.088 528.737 181.868 529.412 181.065 cv
530.712 183.445 531.51 185.402 530.964 185.869 cv
cp
f
507.953 184.746 mo
507.825 184.746 507.714 184.65 507.697 184.52 cv
507.68 184.379 507.78 184.25 507.921 184.233 cv
512.268 183.689 li
512.404 183.669 512.537 183.771 512.556 183.913 cv
512.573 184.054 512.473 184.183 512.332 184.2 cv
507.985 184.744 li
507.953 184.746 li
cp
f
475.724 188.58 mo
475.582 188.538 li
472.64 186.604 li
472.521 186.525 472.488 186.366 472.566 186.247 cv
472.644 186.128 472.803 186.096 472.923 186.173 cv
475.865 188.107 li
475.984 188.186 476.017 188.345 475.938 188.464 cv
475.724 188.58 li
cp
f
500.161 107.309 mo
500.161 107.309 494.476 111.869 490.156 113.383 cv
485.836 114.897 484.027 114.436 483.713 113.826 cv
483.399 113.217 485.892 111.667 485.892 111.667 cv
485.892 111.667 481.793 112.978 481.129 111.63 cv
480.464 110.282 483.935 108.731 483.935 108.731 cv
483.935 108.731 480.814 109.063 480.999 107.753 cv
481.184 106.442 487.793 104.134 487.793 104.134 cv
487.793 104.134 484.174 104.19 484.304 103.175 cv
484.433 102.159 489.158 100.11 491.152 100.239 cv
493.146 100.368 495.823 101.42 495.823 101.42 cv
500.161 107.309 li
cp
.956863 .517647 .384314 rgb
f
492.444 71.0996 mo
492.444 71.0996 501.264 69.6157 510.907 78.334 cv
520.064 86.6128 523.274 96.6934 515.663 102.477 cv
508.052 108.261 498.815 110.761 498.815 110.761 cv
493.93 98.9941 li
502.06 94.021 li
492.444 71.0996 li
cp
.505882 .807843 .917647 rgb
f
495.408 98.3467 mo
495.2 98.2407 li
495.116 98.1255 495.142 97.9644 495.257 97.8809 cv
495.329 97.8286 502.547 92.6074 508.008 90.0269 cv
508.137 89.9663 508.29 90.0205 508.351 90.1499 cv
508.412 90.2783 508.356 90.4316 508.229 90.4927 cv
502.811 93.0522 495.631 98.2456 495.56 98.2979 cv
495.408 98.3467 li
cp
.360784 .411765 .647059 rgb
f
505.73 87.9102 mo
505.641 87.9121 li
505.117 87.9336 504.227 89.8667 503.563 91.9224 cv
504.989 90.4795 506.485 88.6538 506.245 88.0815 cv
506.186 87.9385 505.927 87.9102 505.73 87.9102 cv
cp
503.028 93.062 mo
502.895 93.0249 li
502.796 92.9648 502.749 92.8462 502.78 92.7349 cv
503.13 91.4956 504.366 87.4492 505.619 87.3975 cv
506.205 87.373 506.574 87.5366 506.72 87.8823 cv
507.24 89.1206 503.883 92.3564 503.204 92.9927 cv
503.028 93.062 li
cp
f
483.935 108.989 mo
483.834 108.989 483.738 108.929 483.697 108.831 cv
483.643 108.699 483.704 108.548 483.836 108.494 cv
489.205 106.258 li
489.336 106.205 489.486 106.266 489.541 106.396 cv
489.596 106.528 489.534 106.679 489.402 106.733 cv
484.033 108.969 li
483.935 108.989 li
cp
0 0 0 rgb
f
485.892 111.924 mo
485.798 111.924 485.706 111.872 485.661 111.782 cv
485.598 111.655 485.649 111.5 485.776 111.436 cv
490.846 108.898 li
490.971 108.834 491.127 108.885 491.191 109.013 cv
491.255 109.14 491.203 109.295 491.076 109.359 cv
486.007 111.897 li
485.892 111.924 li
cp
f
294.084 171.036 mo
294.084 171.036 296.44 165.813 298.035 165.518 cv
299.629 165.223 297.209 169.417 297.209 169.417 cv
301.379 167.275 li
301.379 167.275 306.18 165.352 307.212 165.674 cv
308.245 165.998 306.799 167.781 306.799 167.781 cv
306.799 167.781 309.714 166.549 309.408 168.323 cv
309.102 170.096 307.507 170.475 307.507 170.475 cv
307.507 170.475 306.714 171.573 306.157 173.672 cv
305.855 174.808 303.826 179.413 298.684 179.424 cv
292.65 179.437 294.084 171.036 294.084 171.036 cv
cp
1 .670588 .580392 rgb
f
294.059 174.845 mo
294.059 180.797 li
302.952 180.797 li
303.913 177.295 li
297.013 176.22 li
294.059 174.845 li
cp
f
283.63 183.2 mo
283.63 183.2 279.7 181.019 275.889 184.193 cv
272.078 187.367 275.2 191.112 272.362 192.93 cv
269.525 194.749 266.836 196.836 267.252 199.887 cv
267.669 202.938 266.31 206.7 263.719 205.236 cv
259.774 203.008 251.904 214.76 257.663 219.344 cv
270.092 229.237 287.06 205.638 287.06 205.638 cv
287.06 205.638 290.931 203.604 289.932 198.341 cv
289.235 194.671 283.621 188.896 283.63 183.2 cv
cp
0 0 0 rgb
f
274.082 186.793 mo
274.082 186.793 274.521 190.786 271.688 191.868 cv
269.446 192.725 267.429 193.067 266.394 196.18 cv
265.381 199.227 267.317 201.146 265.017 202.997 cv
262.717 204.849 261.629 202.752 258.261 204.841 cv
253.812 207.599 256.34 213.078 258.724 213.256 cv
261.107 213.434 271.447 205.545 271.447 205.545 cv
277.759 189.162 li
274.082 186.793 li
cp
f
283.499 199.146 mo
292.134 176.463 li
304.593 178.737 li
304.593 178.737 301.251 216.047 287.06 213.872 cv
272.869 211.698 283.499 199.146 283.499 199.146 cv
cp
.639216 .482353 .564706 rgb
f
305.407 172.402 mo
305.302 172.37 li
300.61 169.175 li
300.562 168.917 li
300.82 168.868 li
305.512 172.063 li
305.561 172.321 li
305.407 172.402 li
cp
0 0 0 rgb
f
297.583 176.288 mo
297.481 176.288 297.384 176.226 297.344 176.125 cv
297.292 175.993 297.357 175.843 297.49 175.791 cv
297.501 175.786 298.684 175.308 298.932 174.208 cv
299.147 173.253 298.63 172.1 297.396 170.778 cv
297.299 170.674 297.305 170.511 297.409 170.415 cv
297.513 170.317 297.676 170.323 297.772 170.427 cv
299.132 171.883 299.691 173.195 299.433 174.326 cv
299.121 175.694 297.736 176.248 297.677 176.271 cv
297.583 176.288 li
cp
f
298.839 161.369 mo
298.839 161.369 295.674 169.692 295.796 170.818 cv
295.918 171.945 302.09 173.896 302.09 173.896 cv
302.09 173.896 303.358 176.22 304.593 176.22 cv
305.828 176.218 307.507 170.475 307.507 170.475 cv
307.507 170.475 309.948 169.896 310.104 168.726 cv
310.261 167.557 308.067 161.403 308.067 161.403 cv
298.839 161.369 li
cp
.956863 .517647 .384314 rgb
f
310.88 237.847 mo
311.25 226.821 li
324.371 226.165 li
324.371 238.503 li
310.88 237.847 li
cp
f
368.806 135.408 mo
368.806 135.408 376.054 134.645 380.188 132.679 cv
384.322 130.714 385.282 129.113 385.076 128.459 cv
384.87 127.806 382.009 128.458 382.009 128.458 cv
382.009 128.458 385.842 126.504 385.366 125.08 cv
384.889 123.654 381.333 124.996 381.333 124.996 cv
381.333 124.996 383.783 123.036 382.729 122.235 cv
381.675 121.434 375.356 124.446 375.356 124.446 cv
375.356 124.446 377.966 121.939 377.159 121.309 cv
376.353 120.678 371.553 122.549 370.228 124.044 cv
368.903 125.54 367.742 128.171 367.742 128.171 cv
368.806 135.408 li
cp
f
371.092 130.157 mo
370.873 130.035 li
370.798 129.914 370.835 129.755 370.957 129.68 cv
374.931 127.229 375.098 124.463 375.099 124.436 cv
375.106 124.295 375.223 124.206 375.367 124.189 cv
375.509 124.195 375.619 124.314 375.614 124.456 cv
375.609 124.579 375.454 127.511 371.227 130.119 cv
371.092 130.157 li
cp
0 0 0 rgb
f
377.998 131.597 mo
377.878 131.597 377.77 131.513 377.745 131.39 cv
376.266 123.969 li
376.238 123.829 376.329 123.694 376.468 123.666 cv
376.609 123.636 376.743 123.729 376.771 123.868 cv
378.251 131.29 li
378.278 131.429 378.188 131.564 378.049 131.592 cv
377.998 131.597 li
cp
f
330.714 126.522 mo
330.714 126.522 349.101 126.658 352.801 126.418 cv
356.501 126.178 367.818 124.847 367.818 124.847 cv
374.228 139.423 li
374.228 139.423 364.426 143.845 356.003 145.563 cv
350.477 146.689 336.501 147.08 336.501 147.08 cv
330.714 126.522 li
cp
.25098 .313726 .498039 rgb
f
333.566 225.842 mo
337.65 236.73 li
351.698 234.784 li
346.801 222.346 li
333.566 225.842 li
cp
.956863 .517647 .384314 rgb
f
330.515 112.717 mo
330.515 112.717 333.057 107.464 330.637 106.561 cv
328.216 105.657 325.568 108.634 325.568 108.634 cv
325.568 108.634 320.33 109.524 318.505 112.645 cv
316.68 115.765 321.909 120.592 321.909 120.592 cv
330.515 112.717 li
cp
0 0 0 rgb
f
334.432 158.377 mo
330.854 189.318 li
330.854 189.318 330.214 204.265 328.434 216.886 cv
327.822 221.28 326.426 228.879 325.891 231.854 cv
305.146 230.127 li
306.342 216.831 309.213 177.685 310.397 171.378 cv
311.841 163.618 313.944 156.271 313.944 156.271 cv
331.921 158.116 li
334.432 158.377 li
cp
.572549 .705882 .917647 rgb
f
333.404 233.288 mo
331.47 229.198 327.233 216.843 325.575 211.722 cv
324.834 209.433 331.921 158.116 331.921 158.116 cv
331.933 157.997 li
338.302 156.971 li
338.302 156.971 350.798 212.658 353.556 228.561 cv
333.404 233.288 li
cp
f
313.98 166.997 mo
313.643 166.997 313.294 166.958 312.933 166.873 cv
312.794 166.84 312.709 166.701 312.742 166.563 cv
312.773 166.424 312.91 166.334 313.051 166.372 cv
316.873 167.271 319.319 162.307 319.343 162.257 cv
319.405 162.128 319.558 162.074 319.687 162.137 cv
319.815 162.199 319.869 162.352 319.807 162.48 cv
319.783 162.53 317.586 166.997 313.98 166.997 cv
cp
1 1 1 rgb
f
328.455 218.167 mo
328.312 218.166 328.197 218.051 328.197 217.908 cv
328.365 170.441 li
328.365 170.344 328.419 170.256 328.506 170.212 cv
336.254 166.295 li
336.38 166.232 336.536 166.281 336.601 166.409 cv
336.665 166.536 336.614 166.691 336.487 166.755 cv
328.879 170.601 li
328.712 217.91 li
328.711 218.052 328.596 218.167 328.455 218.167 cv
cp
f
330.714 126.522 mo
330.714 126.522 335.911 127.223 337.622 131.278 cv
339.333 135.333 338.769 158.507 338.769 158.507 cv
338.769 158.507 332.767 160.336 324.334 159.454 cv
315.903 158.572 313.235 156.287 313.235 156.287 cv
312.923 141.935 li
312.923 141.935 315.424 126.516 317.625 125.661 cv
319.827 124.805 327.298 125.369 330.714 126.522 cv
cp
.25098 .313726 .498039 rgb
f
322.743 121.208 mo
322.77 126.339 li
322.77 126.339 323.111 127.271 326.449 127.933 cv
328.637 128.366 329.728 127.697 329.728 127.697 cv
329.401 125.1 li
329.081 122.567 li
323.653 121.404 li
322.743 121.208 li
cp
.956863 .517647 .384314 rgb
f
323.653 121.404 mo
323.667 121.544 323.721 121.709 323.805 121.898 cv
324.967 124.456 328.109 124.991 329.401 125.1 cv
329.081 122.567 li
323.653 121.404 li
cp
0 0 0 rgb
f
330.001 111.273 mo
330.001 111.273 332.561 117.677 331.554 121.261 cv
330.548 124.845 327.451 124.262 325.603 123.558 cv
323.754 122.854 322.909 121.648 322.909 121.648 cv
322.909 121.648 321.165 122.258 320.028 120.552 cv
318.892 118.846 319.634 116.898 320.631 116.457 cv
321.629 116.015 322.796 116.775 322.796 116.775 cv
321.899 114.913 li
321.899 114.913 325.92 105.5 330.001 111.273 cv
cp
.956863 .517647 .384314 rgb
f
322.618 119.6 mo
322.464 119.549 li
320.269 117.91 li
320.154 117.825 320.131 117.664 320.216 117.55 cv
320.302 117.436 320.463 117.414 320.576 117.497 cv
322.771 119.136 li
322.886 119.221 322.909 119.382 322.824 119.496 cv
322.618 119.6 li
cp
0 0 0 rgb
f
320.617 119.592 mo
320.504 119.592 320.401 119.518 320.369 119.404 cv
320.331 119.267 320.411 119.125 320.547 119.086 cv
321.993 118.68 li
322.131 118.643 322.272 118.721 322.311 118.858 cv
322.349 118.995 322.269 119.137 322.132 119.176 cv
320.687 119.583 li
320.617 119.592 li
cp
f
325.922 114.075 mo
325.771 114.026 li
325.655 113.943 325.63 113.782 325.713 113.667 cv
326.4 112.721 327.324 112.886 327.716 113.107 cv
327.84 113.176 327.885 113.333 327.815 113.457 cv
327.746 113.581 327.588 113.623 327.466 113.557 cv
327.388 113.515 326.704 113.18 326.13 113.969 cv
325.922 114.075 li
cp
f
330.647 113.784 mo
330.479 113.722 li
330.007 113.318 329.508 113.613 329.487 113.625 cv
329.364 113.698 329.207 113.662 329.133 113.542 cv
329.059 113.422 329.094 113.265 329.213 113.189 cv
329.499 113.008 330.204 112.805 330.814 113.331 cv
330.922 113.423 330.935 113.586 330.842 113.694 cv
330.647 113.784 li
cp
f
329.972 118.844 mo
329.902 118.834 li
329.766 118.795 329.686 118.653 329.724 118.516 cv
330.218 116.763 328.955 116.107 328.9 116.081 cv
328.774 116.017 328.722 115.863 328.784 115.736 cv
328.847 115.608 329 115.556 329.127 115.618 cv
329.145 115.626 330.833 116.479 330.22 118.656 cv
330.188 118.77 330.085 118.844 329.972 118.844 cv
cp
f
330.626 116.249 mo
330.511 116.249 330.407 116.172 330.377 116.056 cv
330.071 114.883 li
330.035 114.745 330.118 114.604 330.255 114.569 cv
330.394 114.53 330.534 114.615 330.569 114.753 cv
330.875 115.926 li
330.911 116.064 330.829 116.205 330.691 116.24 cv
330.626 116.249 li
cp
f
327.543 116.345 mo
327.428 116.345 327.324 116.268 327.294 116.152 cv
326.989 114.979 li
326.953 114.841 327.035 114.701 327.173 114.665 cv
327.313 114.626 327.452 114.711 327.487 114.849 cv
327.792 116.022 li
327.828 116.16 327.746 116.301 327.608 116.336 cv
327.543 116.345 li
cp
f
330.515 112.717 mo
330.515 112.717 329.985 111.692 328.77 111.696 cv
327.555 111.7 326.845 112.608 326.845 112.608 cv
326.845 112.608 327.379 114.758 325.728 115.92 cv
324.075 117.082 322.796 116.775 322.796 116.775 cv
321.598 116.338 li
320.718 114.503 li
324.184 110.532 li
328.67 107.99 li
330.958 110.152 li
330.515 112.717 li
cp
f
328.493 120.734 mo
327.998 120.734 327.174 120.513 326.783 119.64 cv
326.725 119.51 326.783 119.358 326.912 119.3 cv
327.041 119.239 327.194 119.299 327.252 119.429 cv
327.644 120.301 328.558 120.219 328.595 120.214 cv
328.733 120.205 328.862 120.302 328.877 120.442 cv
328.893 120.583 328.792 120.71 328.65 120.726 cv
328.493 120.734 li
cp
f
338.844 147.337 mo
338.708 147.337 338.593 147.229 338.587 147.091 cv
338.212 138.965 li
338.206 138.823 338.315 138.703 338.458 138.696 cv
338.595 138.707 338.72 138.8 338.727 138.942 cv
339.102 147.068 li
339.108 147.21 338.998 147.33 338.856 147.337 cv
338.844 147.337 li
cp
.639216 .482353 .564706 rgb
f
325.176 247.234 mo
325.176 248.332 324.751 249.588 323.883 249.904 cv
323.014 250.221 315.98 250.879 309.825 250.414 cv
303.934 249.966 302.711 249.588 302.276 249.123 cv
302.064 248.886 302.479 247.788 302.954 246.725 cv
303.034 246.559 li
303.277 246.022 303.529 245.504 303.711 245.136 cv
303.893 244.784 304.116 244.45 304.378 244.126 cv
305.015 243.361 306.278 241.78 306.602 240.964 cv
307.026 239.875 307.673 237.521 308.107 236.415 cv
308.542 235.325 309.603 235.098 309.603 235.098 cv
309.603 235.098 313.698 231.972 322.589 235.01 cv
323.641 235.369 323.883 240.814 323.883 241.597 cv
323.883 242.378 li
323.883 243.106 324.458 244.547 324.833 245.741 cv
324.934 246.04 325.015 246.321 325.075 246.576 cv
325.136 246.83 325.176 247.05 325.176 247.234 cv
cp
f
371.975 248.719 mo
372.296 248.674 372.509 248.355 372.451 248.021 cv
372.171 246.438 371.188 242.013 368.666 240.149 cv
365.567 237.859 359.102 236.979 356.743 235.455 cv
354.383 233.931 351.729 230.229 350.333 230.943 cv
348.936 231.657 346.316 234.911 342.496 234.476 cv
338.676 234.04 336.909 233.128 335.888 234.06 cv
334.866 234.991 334.37 247.938 334.815 248.706 cv
335.261 249.474 340.632 248.725 341.101 248.846 cv
341.57 248.968 342.869 245.877 343.753 246.333 cv
344.637 246.789 345.722 248.227 347.024 248.882 cv
348.239 249.493 368.13 249.262 371.975 248.719 cv
cp
f
354.716 237.362 mo
354.608 237.338 li
354.483 237.28 354.426 237.135 354.478 237.008 cv
354.518 236.908 354.924 235.916 355.561 234.809 cv
356.605 232.537 357.524 230.036 357.172 229.254 cv
357.128 229.157 357.072 229.107 356.982 229.085 cv
356.79 229.04 356.618 229.074 356.447 229.201 cv
355.444 229.943 355.043 233.261 354.973 234.477 cv
354.965 234.618 354.843 234.749 354.702 234.719 cv
354.56 234.711 354.451 234.589 354.459 234.447 cv
354.486 233.976 354.764 229.806 356.14 228.787 cv
356.435 228.568 356.758 228.5 357.104 228.585 cv
357.348 228.645 357.533 228.803 357.642 229.043 cv
357.958 229.747 357.553 231.267 356.965 232.812 cv
357.728 231.972 358.601 231.413 359.495 231.671 cv
360.03 231.823 360.207 232.149 360.261 232.396 cv
360.592 233.892 357.121 236.955 356.724 237.299 cv
356.617 237.391 356.454 237.381 356.361 237.273 cv
356.268 237.166 356.279 237.003 356.386 236.91 cv
357.796 235.687 359.958 233.409 359.758 232.507 cv
359.735 232.403 359.669 232.256 359.353 232.165 cv
358.208 231.846 356.937 233.452 356.021 235.038 cv
355.516 236.132 355.066 236.993 354.944 237.225 cv
354.898 237.312 354.809 237.362 354.716 237.362 cv
cp
.968627 .701961 .411765 rgb
f
315.758 242.339 mo
315.681 242.324 li
315.367 242.201 312.607 241.09 312.282 239.982 cv
312.212 239.744 312.251 239.513 312.396 239.312 cv
312.546 239.104 312.761 238.981 313.035 238.944 cv
313.728 238.845 314.725 239.36 315.487 239.843 cv
314.637 238.638 313.481 236.771 313.809 235.933 cv
313.877 235.758 314.039 235.537 314.423 235.478 cv
316.392 235.183 317.711 240.852 317.855 241.499 cv
317.88 241.613 317.809 241.726 317.695 241.751 cv
317.58 241.781 317.468 241.704 317.443 241.591 cv
316.933 239.291 315.671 235.7 314.487 235.896 cv
314.289 235.926 314.23 236.014 314.202 236.087 cv
313.91 236.833 315.528 239.282 316.616 240.65 cv
316.6 240.932 li
316.319 240.947 li
315.719 240.467 313.979 239.259 313.092 239.362 cv
312.934 239.384 312.819 239.448 312.738 239.56 cv
312.669 239.655 312.653 239.749 312.687 239.863 cv
312.914 240.635 315.036 241.617 315.835 241.932 cv
315.943 241.974 315.997 242.097 315.954 242.205 cv
315.758 242.339 li
cp
1 .65098 .231373 rgb
f
327.545 128.36 mo
324.808 128.36 322.714 126.629 322.604 126.536 cv
322.496 126.445 322.482 126.282 322.574 126.174 cv
322.666 126.065 322.828 126.051 322.937 126.143 cv
322.968 126.169 326.151 128.797 329.635 127.457 cv
329.768 127.406 329.917 127.472 329.968 127.605 cv
330.019 127.738 329.953 127.887 329.82 127.938 cv
329.033 128.24 328.267 128.36 327.545 128.36 cv
cp
.639216 .482353 .564706 rgb
f
271.771 193.356 mo
271.771 193.356 263.667 182.617 262.583 175.275 cv
261.499 167.935 255.5 175.571 255.5 175.571 cv
254.507 178.523 li
254.507 178.523 256.212 194.915 262.575 200.017 cv
270.381 206.276 271.771 193.356 271.771 193.356 cv
cp
1 .670588 .580392 rgb
f
255.787 180.89 mo
255.787 180.89 252.439 175.191 251.647 171.116 cv
250.854 167.042 251.505 165.479 252.093 165.277 cv
252.681 165.075 253.746 167.515 253.746 167.515 cv
253.746 167.515 253.106 163.666 254.403 163.246 cv
255.699 162.826 256.636 166.143 256.636 166.143 cv
256.636 166.143 256.747 163.3 257.898 163.637 cv
259.05 163.975 260.255 170.207 260.255 170.207 cv
260.255 170.207 260.68 166.953 261.574 167.202 cv
262.468 167.451 263.688 171.96 263.311 173.732 cv
262.934 175.504 261.639 177.769 261.639 177.769 cv
255.787 180.89 li
cp
f
258.573 176.513 mo
258.441 176.513 258.328 176.412 258.317 176.277 cv
257.942 171.776 260.007 170.076 260.095 170.006 cv
260.206 169.917 260.367 169.936 260.456 170.046 cv
260.545 170.157 260.527 170.318 260.417 170.408 cv
260.398 170.423 258.48 172.029 258.831 176.234 cv
258.842 176.376 258.737 176.5 258.595 176.513 cv
258.573 176.513 li
cp
0 0 0 rgb
f
253.804 172.25 mo
253.707 172.25 253.614 172.195 253.571 172.102 cv
253.51 171.974 253.565 171.82 253.694 171.76 cv
259.906 168.842 li
260.033 168.781 260.188 168.836 260.248 168.965 cv
260.309 169.094 260.253 169.247 260.125 169.308 cv
253.913 172.226 li
253.804 172.25 li
cp
f
277.89 196.242 mo
278.017 201.302 li
278.017 201.302 278.966 202.733 281.932 202.9 cv
284.142 203.023 284.811 201.874 284.811 201.874 cv
284.166 197.459 li
278.792 196.418 li
277.89 196.242 li
cp
1 .670588 .580392 rgb
f
277.89 195.934 mo
277.906 196.071 277.963 196.233 278.049 196.418 cv
279.245 198.917 283.255 199.869 284.532 199.951 cv
284.166 197.459 li
277.89 195.934 li
cp
0 0 0 rgb
f
285.005 185.898 mo
285.005 185.898 287.82 192.175 286.861 195.727 cv
285.903 199.277 282.671 198.751 280.734 198.085 cv
278.796 197.418 277.889 196.243 277.889 196.243 cv
277.889 196.243 276.092 196.872 274.87 195.207 cv
273.647 193.542 274.371 191.608 275.397 191.157 cv
276.422 190.706 277.654 191.438 277.654 191.438 cv
276.677 189.615 li
276.677 189.615 280.625 180.266 285.005 185.898 cv
cp
1 .670588 .580392 rgb
f
277.654 191.438 mo
277.654 191.438 280.365 191.985 282.248 188.968 cv
284.131 185.951 283.958 184.712 283.958 184.712 cv
285.834 187.827 li
285.834 187.827 286.254 185.667 285.39 184.291 cv
284.526 182.914 283.63 183.2 283.63 183.2 cv
277.653 184.693 li
276.079 189.484 li
277.654 191.438 li
cp
0 0 0 rgb
f
284.79 193.967 mo
284.714 193.956 li
284.579 193.914 284.502 193.77 284.544 193.634 cv
284.89 192.503 284.035 191.271 284.026 191.258 cv
283.945 191.142 283.972 190.981 284.088 190.899 cv
284.204 190.816 284.365 190.845 284.447 190.96 cv
284.488 191.019 285.458 192.41 285.036 193.785 cv
285.002 193.896 284.9 193.967 284.79 193.967 cv
cp
f
277.394 194.452 mo
277.208 194.372 li
275.49 192.562 li
275.392 192.459 275.396 192.296 275.499 192.198 cv
275.602 192.101 275.766 192.104 275.863 192.208 cv
277.581 194.017 li
277.679 194.12 277.674 194.283 277.571 194.381 cv
277.394 194.452 li
cp
f
275.58 193.971 mo
275.455 193.971 275.345 193.88 275.326 193.753 cv
275.304 193.612 275.4 193.48 275.541 193.459 cv
276.724 193.276 li
276.865 193.253 276.997 193.35 277.018 193.491 cv
277.04 193.631 276.943 193.763 276.803 193.785 cv
275.62 193.968 li
275.58 193.971 li
cp
f
286.004 191.392 mo
285.894 191.392 285.792 191.321 285.758 191.21 cv
285.408 190.072 li
285.366 189.937 285.443 189.792 285.579 189.75 cv
285.718 189.708 285.858 189.785 285.9 189.921 cv
286.25 191.059 li
286.292 191.194 286.215 191.339 286.08 191.38 cv
286.004 191.392 li
cp
f
279.247 201.247 mo
279.247 201.247 268.569 181.726 266.018 176.031 cv
253.535 180.016 li
257.331 199.951 266.407 210.774 266.407 210.774 cv
266.407 210.774 266.583 229.921 266.846 230.272 cv
267.11 230.625 274.29 232.222 282.353 231.774 cv
290.416 231.328 292.174 230.185 292.614 229.921 cv
293.054 229.657 290.592 204.259 290.592 204.259 cv
290.592 204.259 285.579 201.332 279.247 201.247 cv
cp
.639216 .482353 .564706 rgb
f
282.819 191.698 mo
282.709 191.698 282.607 191.627 282.573 191.516 cv
282.224 190.378 li
282.182 190.242 282.258 190.098 282.394 190.056 cv
282.533 190.013 282.674 190.091 282.716 190.227 cv
283.065 191.365 li
283.107 191.501 283.031 191.645 282.895 191.687 cv
282.819 191.698 li
cp
0 0 0 rgb
f
281.922 194.427 mo
281.858 194.658 281.821 194.969 281.997 195.164 cv
282.158 195.343 282.58 195.312 282.948 195.231 cv
281.922 194.427 li
cp
282.447 195.809 mo
282.13 195.809 281.818 195.735 281.614 195.509 cv
281.065 194.898 281.555 193.93 281.576 193.889 cv
281.75 193.756 li
281.964 193.805 li
283.658 195.134 li
283.731 195.191 283.768 195.283 283.754 195.375 cv
283.74 195.466 283.678 195.543 283.592 195.577 cv
283.501 195.612 282.967 195.809 282.447 195.809 cv
cp
f
286.004 188.804 mo
284.84 188.606 li
284.7 188.582 284.606 188.448 284.63 188.308 cv
284.655 188.167 284.792 188.077 284.928 188.098 cv
286.048 188.293 li
286.188 188.317 286.282 188.451 286.258 188.591 cv
286.236 188.716 286.127 188.804 286.004 188.804 cv
cp
f
281.351 189.539 mo
281.257 189.539 281.166 189.488 281.121 189.398 cv
281.057 189.271 281.107 189.116 281.234 189.052 cv
283.07 188.123 li
283.194 188.058 283.352 188.108 283.416 188.236 cv
283.48 188.363 283.43 188.518 283.303 188.582 cv
281.467 189.511 li
281.351 189.539 li
cp
f
285.444 202.429 mo
285.444 202.429 285.166 201.351 284.884 200.9 cv
284.603 200.449 283.164 200.905 281.211 200.598 cv
279.258 200.29 278.3 199.186 277.963 199.147 cv
277.625 199.108 277.394 200.334 277.394 200.334 cv
277.394 200.334 278.479 201.7 278.649 201.896 cv
278.818 202.093 285.444 202.429 285.444 202.429 cv
cp
.639216 .482353 .564706 rgb
f
281.351 202.442 mo
281.036 202.396 278.613 201.981 277.942 200.925 cv
277.866 200.805 277.901 200.646 278.021 200.57 cv
278.141 200.494 278.3 200.529 278.376 200.649 cv
278.84 201.379 280.71 201.821 281.391 201.931 cv
281.532 201.953 281.627 202.085 281.605 202.226 cv
281.584 202.352 281.475 202.442 281.351 202.442 cv
cp
.968627 .701961 .411765 rgb
f
321.087 258.456 mo
320.565 264.265 li
309.408 264.265 li
309.408 257.687 li
321.087 258.456 li
cp
1 .670588 .580392 rgb
f
301.745 261.312 mo
300.06 266.965 li
287.78 264.053 li
289.925 257.687 li
301.745 261.312 li
cp
f
321.23 263.748 mo
321.23 263.748 322.984 269.457 323.639 270.209 cv
324.294 270.96 331.657 277.546 332.614 279.869 cv
333.572 282.192 332.329 285.418 331.729 285.515 cv
331.13 285.61 302.952 273.18 302.952 273.18 cv
308.506 259.403 li
321.23 263.748 li
cp
.572549 .705882 .917647 rgb
f
303.383 224.535 mo
303.383 224.535 319.519 220.608 323.943 227.427 cv
328.368 234.244 322.181 260.262 322.181 260.262 cv
307.323 260.262 li
303.383 224.535 li
cp
.360784 .411765 .647059 rgb
f
322.864 267.85 mo
322.864 267.85 316.977 270.683 317.723 271.438 cv
318.468 272.191 326.591 274.292 326.744 273.392 cv
326.896 272.492 323.806 268.175 322.864 267.85 cv
cp
.968627 .701961 .411765 rgb
f
266.856 230.446 mo
266.856 230.446 263.497 246.058 270.229 248.57 cv
276.962 251.084 292.483 248.104 292.483 248.104 cv
286.186 259.216 li
306.438 265.215 li
306.438 265.215 323.255 234.849 313.019 226.756 cv
302.783 218.662 274.229 230.446 274.229 230.446 cv
266.856 230.446 li
cp
.360784 .411765 .647059 rgb
f
301.225 266.707 mo
301.225 266.707 302.078 272.953 303.262 273.737 cv
304.445 274.522 309.461 278.55 312.042 281.977 cv
314.206 284.851 311.567 286.047 311.567 286.047 cv
294.525 284.059 li
281.131 271.586 li
287.671 261.003 li
301.225 266.707 li
cp
.572549 .705882 .917647 rgb
f
302.388 270.563 mo
302.388 270.563 296.512 273.419 297.261 274.171 cv
298.009 274.923 306.141 276.99 306.29 276.09 cv
306.438 275.189 303.332 270.885 302.388 270.563 cv
cp
.968627 .701961 .411765 rgb
f
295.825 243.013 mo
295.693 243.013 295.563 243.041 295.431 243.099 cv
294.288 243.594 293.34 246.074 292.905 247.536 cv
294.342 246.606 296.77 244.808 296.755 243.728 cv
296.753 243.582 296.709 243.365 296.35 243.163 cv
296.172 243.063 295.998 243.013 295.825 243.013 cv
cp
292.483 248.361 mo
292.33 248.311 li
292.246 248.249 292.208 248.143 292.233 248.042 cv
292.279 247.854 293.387 243.423 295.226 242.626 cv
295.683 242.429 296.146 242.458 296.603 242.714 cv
297.147 243.021 297.266 243.431 297.27 243.721 cv
297.293 245.477 293.094 248.038 292.615 248.324 cv
292.483 248.361 li
cp
1 1 1 rgb
f
309.409 259.533 mo
309.267 259.49 li
309.148 259.412 309.115 259.253 309.194 259.134 cv
309.238 259.066 313.667 252.23 315.71 239.64 cv
317.644 227.729 307.539 224.611 307.107 224.484 cv
306.971 224.444 306.893 224.301 306.933 224.165 cv
306.974 224.028 307.116 223.952 307.252 223.99 cv
307.363 224.022 318.227 227.356 316.219 239.722 cv
314.155 252.431 309.669 259.349 309.624 259.417 cv
309.409 259.533 li
cp
f
295.856 162.369 mo
295.856 162.369 299.652 141.324 307.18 132.844 cv
314.46 124.643 320.617 125.257 320.617 125.257 cv
316.82 153.216 li
310.277 163.516 li
295.856 162.369 li
cp
.25098 .313726 .498039 rgb
f
308.953 166.534 mo
309.493 167.579 308.141 168.061 308.141 168.061 cv
308.141 168.061 309.705 168.775 309.585 169.692 cv
309.466 170.608 308.117 170.865 308.117 170.865 cv
308.117 170.865 309.175 172.194 308.509 173.004 cv
307.843 173.815 301.622 172.88 301.363 172.103 cv
301.104 171.326 302.243 170.555 302.243 170.555 cv
302.243 170.555 301.14 169.616 301.227 168.823 cv
301.314 168.03 302.536 167.71 302.536 167.71 cv
302.536 167.71 301.086 166.84 301.343 166.279 cv
301.925 165.009 308.412 165.49 308.953 166.534 cv
cp
1 .670588 .580392 rgb
f
295.792 167.783 mo
295.792 167.783 298.489 164.43 299.633 165.518 cv
300.778 166.606 297.013 172.06 297.013 172.06 cv
294.748 171.298 li
295.792 167.783 li
cp
f
308.141 168.318 mo
302.52 167.967 li
302.378 167.958 302.27 167.836 302.279 167.694 cv
302.288 167.552 302.401 167.436 302.552 167.453 cv
308.157 167.804 li
308.299 167.813 308.407 167.935 308.397 168.077 cv
308.389 168.213 308.276 168.318 308.141 168.318 cv
cp
0 0 0 rgb
f
302.243 170.812 mo
302.102 170.812 301.987 170.699 301.985 170.559 cv
301.983 170.417 302.097 170.299 302.239 170.297 cv
307.503 170.218 li
307.64 170.215 307.762 170.329 307.764 170.471 cv
307.767 170.613 307.653 170.73 307.511 170.732 cv
302.247 170.812 li
302.243 170.812 li
cp
f
87.4473 279.475 mo
87.4473 286.619 li
98.9072 285.486 li
99.6938 282.086 li
99.5317 278.755 li
87.4473 279.475 li
cp
.956863 .517647 .384314 rgb
f
69.0088 274.365 mo
66.8677 281.183 li
78.1406 283.535 li
79.9097 280.526 li
80.7529 277.3 li
69.0088 274.365 li
cp
f
98.9072 219.087 mo
98.9072 219.087 105.187 279.458 104.991 280.355 cv
104.795 281.254 86.2305 280.911 86.2305 280.911 cv
84.7998 275.361 li
85.5664 219.087 li
98.9072 219.087 li
cp
.968627 .701961 .411765 rgb
f
72.9668 209.181 mo
72.9668 209.181 70.4204 217.596 70.6162 226.215 cv
70.812 234.833 73.3584 247.956 72.9668 248.936 cv
72.5752 249.915 66.6987 275.361 66.6987 275.361 cv
86.1514 280.911 li
86.1514 280.911 92.2598 255.986 92.4067 249.131 cv
92.5537 242.275 89.6934 222.885 89.6934 222.885 cv
98.9072 219.087 li
97.9761 210.74 li
72.9668 209.181 li
cp
f
103.051 183.116 mo
92.562 190.899 li
92.562 190.899 96.1274 196.125 107.464 199.771 cv
115.32 202.298 119.346 202.931 119.346 202.931 cv
119.346 202.931 125.8 204.496 129.607 204.397 cv
138.114 204.178 137.312 200.875 137.312 200.875 cv
135.51 200.494 li
135.51 200.494 137.115 200.256 137.537 199.441 cv
137.959 198.626 134.508 198.769 134.508 198.769 cv
134.508 198.769 136.203 197.958 134.688 197.622 cv
133.174 197.286 130.091 197.585 128.099 197.174 cv
126.106 196.763 126.106 196.763 126.106 196.763 cv
126.106 196.763 129.298 195.778 128.808 194.534 cv
128.317 193.291 125.194 194.464 124.179 194.696 cv
123.163 194.928 121.991 195.528 121.991 195.528 cv
121.991 195.528 108.497 191.308 103.051 183.116 cv
cp
.956863 .517647 .384314 rgb
f
90.0767 166.572 mo
84.9101 166.259 li
78.9419 179.733 li
98.7529 179.462 li
98.7529 179.462 100.296 173.375 97.4233 167.387 cv
94.5503 161.4 90.0767 166.572 90.0767 166.572 cv
cp
0 0 0 rgb
f
97.8242 174.391 mo
97.8242 174.391 101.037 178.203 104.163 181.262 cv
107.289 184.322 109.435 185.335 109.435 185.335 cv
100.567 199.073 li
98.0566 196.787 li
97.8242 174.391 li
cp
.360784 .411765 .647059 rgb
f
85.8838 158.488 mo
85.8838 158.488 85.6675 162.054 83.2085 163.372 cv
81.1084 164.498 78.9165 164.305 77.7041 167.326 cv
76.5181 170.284 78.3198 172.301 75.9302 173.997 cv
73.5405 175.692 72.5893 173.55 69.1265 175.417 cv
64.5537 177.882 65.2515 187.071 73.7183 186.998 cv
76.0898 186.977 82.1475 176.907 82.1475 176.907 cv
89.3843 161.056 li
85.8838 158.488 li
cp
0 0 0 rgb
f
85.8838 158.488 mo
85.8838 158.488 87.251 152.937 93.0503 153.876 cv
98.8491 154.817 97.5527 165.251 97.5527 165.251 cv
87.167 163.822 li
85.8838 158.488 li
cp
f
90.1338 171.456 mo
90.1338 171.456 82.9531 170.336 77.21 176.684 cv
70.8281 183.739 71.3481 209.737 71.3481 209.737 cv
71.3481 209.737 79.5347 211.411 89.4717 211.866 cv
99.4092 212.321 99.4092 212.321 99.4092 212.321 cv
99.4092 212.321 100.542 181.852 100.053 178.143 cv
99.5635 174.434 95.6777 172.477 90.1338 171.456 cv
cp
.360784 .411765 .647059 rgb
f
94.9595 174.597 mo
94.9595 174.597 94.5957 175.21 92.6973 174.918 cv
89.7749 174.468 88.9131 173.1 88.9131 173.1 cv
89.0854 168.077 li
89.9722 168.307 li
95.2324 169.659 li
95.0928 172.105 li
94.9595 174.597 li
cp
.956863 .517647 .384314 rgb
f
95.0928 172.105 mo
93.7026 171.88 91.0542 171.137 90.1016 168.792 cv
90.0244 168.61 89.9819 168.44 89.9722 168.307 cv
95.2324 169.659 li
95.0928 172.105 li
cp
0 0 0 rgb
f
96.7588 158.258 mo
96.7588 158.258 99.1704 164.646 98.0073 168.106 cv
96.8447 171.566 93.6743 170.851 91.7954 170.074 cv
89.9165 169.298 89.0879 168.079 89.0879 168.079 cv
89.0879 168.079 87.2695 168.594 86.1587 166.871 cv
85.0483 165.147 85.8818 163.276 86.9248 162.891 cv
87.9678 162.505 89.1435 163.304 89.1435 163.304 cv
88.2851 161.44 li
88.2851 161.44 92.7583 152.416 96.7588 158.258 cv
cp
.956863 .517647 .384314 rgb
f
97.3706 163.617 mo
97.2383 163.617 97.126 163.516 97.1147 163.382 cv
97.0146 162.211 li
97.0854 162.01 li
97.5845 161.492 li
97.6831 161.39 97.8462 161.387 97.9487 161.485 cv
98.0513 161.584 98.0542 161.747 97.9556 161.85 cv
97.5376 162.284 li
97.6274 163.338 li
97.6396 163.479 97.5347 163.604 97.3931 163.616 cv
97.3706 163.617 li
cp
0 0 0 rgb
f
92.9512 161.345 mo
92.8423 161.315 li
92.7407 161.255 92.7075 161.124 92.7676 161.022 cv
93.2461 160.216 94.2856 160.497 94.3301 160.51 cv
94.4434 160.542 94.5093 160.659 94.478 160.772 cv
94.4463 160.885 94.332 160.952 94.2153 160.921 cv
94.1836 160.912 93.4453 160.717 93.1348 161.24 cv
92.9512 161.345 li
cp
f
97.4482 160.94 mo
97.227 160.815 li
97.1875 160.75 97.041 160.562 96.894 160.554 cv
96.7685 160.553 96.6509 160.673 96.5713 160.775 cv
96.4853 160.887 96.3232 160.908 96.21 160.82 cv
96.0976 160.733 96.0776 160.571 96.165 160.459 cv
96.394 160.164 96.6445 160.019 96.9272 160.04 cv
97.3696 160.067 97.6396 160.501 97.6689 160.551 cv
97.7417 160.673 97.7017 160.832 97.5791 160.904 cv
97.4482 160.94 li
cp
f
89.1435 163.304 mo
89.1435 163.304 91.8716 163.542 93.9184 160.667 cv
95.9653 157.791 95.793 157.021 95.793 157.021 cv
97.4648 160.219 li
97.4648 160.219 98.0102 158.104 97.2373 156.689 cv
96.4643 155.273 95.5591 155.502 95.5591 155.502 cv
89.5478 156.623 li
87.7007 161.274 li
89.1435 163.304 li
cp
f
93.8994 163.685 mo
93.7651 163.685 93.6518 163.581 93.6431 163.445 cv
93.5654 162.272 li
93.6553 162.06 li
94.2905 161.517 li
94.3979 161.424 94.561 161.437 94.6533 161.546 cv
94.7456 161.654 94.7329 161.816 94.6245 161.909 cv
94.0879 162.367 li
94.1567 163.411 li
94.166 163.553 94.0586 163.675 93.917 163.685 cv
93.8994 163.685 li
cp
f
96.6064 165.878 mo
96.4526 165.871 96.3428 165.75 96.3491 165.609 cv
96.4053 164.407 95.7866 162.791 95.7803 162.775 cv
95.729 162.643 95.7949 162.493 95.9277 162.442 cv
96.0596 162.39 96.209 162.457 96.2607 162.589 cv
96.2876 162.659 96.9248 164.322 96.8638 165.632 cv
96.8574 165.771 96.7432 165.878 96.6064 165.878 cv
cp
f
94.7402 167.265 mo
94.8257 167.307 94.918 167.337 95.0171 167.35 cv
95.1489 167.361 li
94.7402 167.265 li
cp
95.1826 167.876 mo
94.9497 167.861 li
94.1494 167.755 93.6977 166.964 93.6787 166.93 cv
93.6977 166.649 li
93.7593 166.568 93.8643 166.529 93.9619 166.554 cv
96.0767 167.05 li
96.2637 167.223 li
96.21 167.472 li
96.1938 167.49 95.8398 167.876 95.1826 167.876 cv
cp
f
88.7715 165.943 mo
88.5762 165.854 li
86.9722 163.99 li
86.8794 163.882 86.8916 163.719 86.9995 163.626 cv
87.1069 163.535 87.27 163.546 87.3628 163.654 cv
88.9668 165.518 li
89.0596 165.625 89.0474 165.788 88.9394 165.881 cv
88.7715 165.943 li
cp
f
86.7183 165.819 mo
86.6059 165.819 86.5029 165.745 86.4707 165.631 cv
86.4316 165.495 86.5107 165.353 86.6475 165.313 cv
88.2104 164.868 li
88.3511 164.829 88.4902 164.909 88.5288 165.045 cv
88.5679 165.182 88.4888 165.324 88.352 165.363 cv
86.7891 165.809 li
86.7183 165.819 li
cp
f
94.1421 193.655 mo
85.1475 203.376 li
85.1475 203.376 89.062 207.419 96.1504 210.21 cv
102.212 212.597 108.422 212.942 112.72 212.467 cv
116.994 211.994 109.874 204.878 109.874 204.878 cv
109.874 204.878 99.2251 201.223 94.1421 193.655 cv
cp
.956863 .517647 .384314 rgb
f
83.4243 205.355 mo
83.2661 205.301 li
83.2295 205.272 79.6074 202.413 77.1899 197.414 cv
74.771 192.411 74.9434 186.619 74.9453 186.562 cv
74.9502 186.419 75.0869 186.331 75.2114 186.313 cv
75.3535 186.318 75.4648 186.437 75.46 186.579 cv
75.458 186.636 75.2915 192.304 77.6538 197.189 cv
79.7207 201.465 82.6821 204.136 83.4145 204.756 cv
84.9648 203.32 li
85.0684 203.224 85.2314 203.23 85.3286 203.334 cv
85.4253 203.438 85.4189 203.601 85.3144 203.697 cv
83.5991 205.286 li
83.4243 205.355 li
cp
.968627 .701961 .411765 rgb
f
88.082 183.932 mo
87.9355 183.932 87.9062 183.986 87.8945 184.008 cv
87.7627 184.253 87.9429 185.171 89.3013 187.107 cv
89.1406 185.603 88.7373 183.971 88.124 183.933 cv
88.082 183.932 li
cp
94.1421 193.912 mo
93.9448 193.82 li
93.9214 193.792 91.5806 191.002 89.4224 188.146 cv
88.2642 186.614 86.9839 184.615 87.4404 183.765 cv
87.5166 183.624 87.7119 183.391 88.1558 183.419 cv
89.5698 183.506 89.835 186.998 89.8799 187.897 cv
92.0171 190.721 94.3159 193.461 94.3393 193.489 cv
94.4307 193.598 94.4165 193.761 94.3076 193.852 cv
94.1421 193.912 li
cp
f
100.182 193.788 mo
100.001 193.763 99.9048 193.631 99.9268 193.491 cv
99.9355 193.435 100.797 187.858 100.959 185.189 cv
101.201 181.199 99.7725 177.958 99.7583 177.926 cv
99.7002 177.796 99.7583 177.644 99.8877 177.585 cv
100.017 177.525 100.169 177.584 100.228 177.715 cv
100.289 177.851 101.723 181.098 101.473 185.22 cv
101.31 187.914 100.444 193.514 100.436 193.57 cv
100.416 193.697 100.306 193.788 100.182 193.788 cv
cp
f
86.5483 279.208 mo
86.4814 279.199 li
86.3442 279.162 86.2627 279.021 86.2998 278.884 cv
86.3584 278.664 92.1934 256.881 91.915 251.877 cv
91.6357 246.836 89.4595 223.147 89.4375 222.908 cv
89.4287 222.815 89.4717 222.725 89.5488 222.672 cv
95.5083 218.62 li
95.625 218.54 95.7866 218.57 95.8662 218.688 cv
95.9463 218.806 95.9155 218.966 95.7983 219.046 cv
89.9643 223.013 li
90.1518 225.058 92.1611 247.011 92.4297 251.848 cv
92.7124 256.935 87.0386 278.118 86.7969 279.017 cv
86.7661 279.132 86.6621 279.208 86.5483 279.208 cv
cp
1 1 1 rgb
f
77.1899 246.755 mo
75.9814 246.755 74.5342 247.862 73.7422 248.56 cv
76.1743 248.166 78.1582 247.571 78.2393 247.185 cv
78.2422 247.17 78.2139 247.095 78.0229 246.978 cv
77.7685 246.822 77.4863 246.755 77.1899 246.755 cv
cp
72.9668 249.193 mo
72.8711 249.193 72.7817 249.14 72.7373 249.053 cv
72.6875 248.955 72.7051 248.837 72.7808 248.758 cv
72.9184 248.614 76.1826 245.247 78.2915 246.538 cv
78.7378 246.812 78.7832 247.098 78.7432 247.29 cv
78.5205 248.354 74.2925 249.014 73.0019 249.19 cv
72.9668 249.193 li
cp
f
87.8032 274.181 mo
87.7407 274.173 li
68.1055 269.274 li
67.9678 269.24 67.8838 269.1 67.918 268.962 cv
67.9526 268.824 68.0928 268.743 68.2305 268.774 cv
87.8315 273.664 li
104.329 273.234 li
104.475 273.234 104.59 273.346 104.593 273.485 cv
104.597 273.628 104.485 273.746 104.343 273.75 cv
87.8101 274.181 li
87.8032 274.181 li
cp
f
116.743 289.152 mo
113.899 287.021 107.942 286.167 105.776 284.746 cv
103.61 283.325 101.187 279.894 99.8935 280.544 cv
98.6006 281.193 96.1636 284.178 92.644 283.751 cv
89.1235 283.325 87.499 282.473 86.5513 283.325 cv
85.8896 283.92 85.229 289.568 85.0278 293.168 cv
83.7104 293.412 li
83.7104 296.993 li
91.2642 296.995 li
91.6963 297.11 92.9145 294.269 93.727 294.694 cv
94.5391 295.121 96.8379 296.383 98.0347 296.995 cv
98.0347 296.995 116.19 297.553 119.739 297.077 cv
120.036 297.037 120.235 296.745 120.183 296.437 cv
119.936 294.974 119.056 290.887 116.743 289.152 cv
cp
.568627 .419608 .505882 rgb
f
93.4126 292.734 mo
91.3276 289.856 85.8896 287.279 84.2412 285.28 cv
82.5923 283.282 81.2925 279.287 79.8657 279.525 cv
78.4385 279.764 75.2275 281.893 71.9912 280.444 cv
68.7549 278.995 67.4556 277.699 66.2978 278.233 cv
65.4897 278.606 63.187 283.806 61.9297 287.185 cv
60.5991 287.028 li
59.5391 290.448 li
66.7539 292.687 li
67.1323 292.924 69.1372 290.57 69.7871 291.218 cv
70.437 291.865 72.2593 293.751 73.2212 294.69 cv
73.2212 294.69 90.3984 300.596 93.9297 301.191 cv
94.2241 301.241 94.501 301.021 94.5425 300.711 cv
94.7393 299.24 95.1089 295.076 93.4126 292.734 cv
cp
.639216 .482353 .564706 rgb
f
105.208 211.871 mo
105.208 211.871 111.162 215.498 115.446 216.403 cv
119.729 217.309 121.389 216.648 121.612 216.031 cv
121.834 215.415 119.28 214.251 119.28 214.251 cv
119.28 214.251 123.329 214.99 123.793 213.63 cv
124.258 212.271 120.775 211.226 120.775 211.226 cv
120.775 211.226 123.776 211.157 123.439 209.937 cv
123.104 208.717 115.167 206.69 115.167 206.69 cv
115.167 206.69 117.862 205.621 117.615 204.674 cv
117.367 203.727 114.043 203.678 112.168 204.045 cv
110.292 204.412 108.6 205.752 108.6 205.752 cv
105.208 211.871 li
cp
.956863 .517647 .384314 rgb
f
121 211.528 mo
120.94 211.521 li
115.055 210.112 li
114.917 210.08 114.832 209.94 114.865 209.803 cv
114.897 209.665 115.032 209.577 115.175 209.612 cv
121.061 211.021 li
121.199 211.053 121.284 211.192 121.251 211.33 cv
121.223 211.448 121.117 211.528 121 211.528 cv
cp
0 0 0 rgb
f
119.448 214.669 mo
119.383 214.66 li
113.918 213.252 li
113.78 213.217 113.698 213.076 113.733 212.938 cv
113.769 212.802 113.904 212.716 114.047 212.754 cv
119.512 214.162 li
119.65 214.197 119.732 214.338 119.697 214.476 cv
119.667 214.592 119.562 214.669 119.448 214.669 cv
cp
f
93.3101 175.197 mo
90.9277 175.197 88.8501 173.388 88.7422 173.292 cv
88.6357 173.198 88.626 173.036 88.7202 172.929 cv
88.8144 172.823 88.977 172.813 89.0835 172.907 cv
89.1138 172.933 92.1392 175.563 94.855 174.361 cv
94.9844 174.303 95.1362 174.362 95.1948 174.492 cv
95.2524 174.623 95.1938 174.774 95.064 174.832 cv
94.477 175.092 93.8848 175.197 93.3101 175.197 cv
cp
.968627 .701961 .411765 rgb
f
132.279 202.215 mo
132.089 202.131 li
128.427 198.125 li
128.331 198.021 128.338 197.857 128.443 197.762 cv
128.547 197.665 128.71 197.673 128.807 197.778 cv
132.469 201.783 li
132.565 201.889 132.558 202.051 132.453 202.147 cv
132.279 202.215 li
cp
0 0 0 rgb
f
122.322 200.727 mo
122.214 200.727 122.114 200.658 122.078 200.55 cv
122.033 200.415 122.106 200.27 122.241 200.225 cv
122.27 200.215 125.06 199.263 125.86 196.687 cv
125.903 196.55 126.049 196.475 126.183 196.517 cv
126.319 196.559 126.395 196.703 126.353 196.839 cv
125.472 199.673 122.528 200.673 122.403 200.714 cv
122.322 200.727 li
cp
f
221.272 275.906 mo
221.272 275.906 217.812 259.078 210.449 254.683 cv
203.086 250.287 201.574 264.037 201.574 264.037 cv
201.574 264.037 213.269 276.64 215.853 282.626 cv
218.437 288.612 221.272 275.906 221.272 275.906 cv
cp
.956863 .517647 .384314 rgb
f
219.954 272.477 mo
219.954 272.477 226.033 276.498 228.794 280.148 cv
231.555 283.799 231.668 285.663 231.185 286.147 cv
230.7 286.633 228.462 284.733 228.462 284.733 cv
228.462 284.733 230.962 288.235 229.882 289.28 cv
228.802 290.324 226.265 287.494 226.265 287.494 cv
226.265 287.494 227.535 290.363 226.23 290.588 cv
224.926 290.813 220.709 285.225 220.709 285.225 cv
220.709 285.225 221.868 288.652 220.861 288.84 cv
219.855 289.027 216.46 285.153 215.974 283.215 cv
215.488 281.277 215.672 278.407 215.672 278.407 cv
219.954 272.477 li
cp
f
150.597 233.903 mo
150.597 233.903 159.886 248.357 168.337 249.807 cv
176.789 251.256 173.249 237.883 173.249 237.883 cv
173.249 237.883 157.8 230.338 153.234 225.684 cv
148.667 221.029 150.597 233.903 150.597 233.903 cv
cp
f
217.483 341.183 mo
222.757 346.005 li
233.339 337.656 li
227.111 332.786 li
217.483 341.183 li
cp
f
240.358 346.022 mo
241.038 345.292 240.999 344.129 240.266 343.374 cv
237.371 340.392 230.609 333.546 230.058 334.081 cv
229.355 334.765 224.784 343.321 224.784 343.321 cv
224.784 343.321 220.571 339.386 218.378 342.956 cv
216.696 345.696 216.658 350.839 216.732 353.084 cv
216.755 353.796 216.574 354.484 216.206 355.073 cv
214.623 357.609 210.533 364.858 213.397 367.971 cv
216.898 371.775 217.993 369.889 218.696 369.206 cv
219.299 368.619 235.72 351 240.358 346.022 cv
cp
.360784 .411765 .647059 rgb
f
205.296 274.715 mo
205.296 274.715 209.57 294.059 218.119 310.247 cv
226.667 326.437 230.747 331.062 230.747 331.062 cv
212.898 347.341 li
212.898 347.341 192.474 323.282 189.948 306.883 cv
187.422 290.484 187.617 275.767 187.617 275.767 cv
205.296 274.715 li
cp
.505882 .807843 .917647 rgb
f
170.807 235.812 mo
160.791 246.464 li
160.791 246.464 173.52 260.99 183.367 256.815 cv
193.215 252.641 190.795 243.34 190.795 243.34 cv
190.795 243.34 177.517 238.212 170.807 235.812 cv
cp
.968627 .701961 .411765 rgb
f
195.471 227.672 mo
195.471 227.672 203.776 227.737 206.587 233.839 cv
209.398 239.941 206.887 254.691 206.887 254.691 cv
195.228 253.873 li
195.471 227.672 li
cp
0 0 0 rgb
f
180.263 348.896 mo
180.343 355.781 li
193.863 358.22 li
193.669 349.073 li
180.263 348.896 li
cp
.956863 .517647 .384314 rgb
f
193.863 369.646 mo
194.86 369.61 195.655 368.759 195.67 367.707 cv
195.732 363.551 195.377 353.335 194.608 353.324 cv
193.628 353.31 184.346 356.129 184.346 356.129 cv
184.346 356.129 184.149 350.366 180.074 351.341 cv
176.947 352.089 173.284 355.698 171.749 357.338 cv
171.261 357.858 170.647 358.217 169.97 358.373 cv
167.058 359.046 159.04 361.28 158.864 365.507 cv
158.649 370.672 160.758 370.112 161.738 370.126 cv
162.579 370.139 187.063 369.886 193.863 369.646 cv
cp
.360784 .411765 .647059 rgb
f
191.822 242.806 mo
198.828 243.489 li
205.762 276.667 li
205.762 276.667 201.753 277.506 196.411 277.687 cv
191.069 277.867 193.096 254.364 193.096 254.364 cv
191.822 242.806 li
cp
.968627 .701961 .411765 rgb
f
178.874 275.136 mo
178.874 275.136 171.006 296.791 168.869 311.614 cv
166.732 326.437 174.114 350.51 174.114 350.51 cv
196.845 350.194 li
196.845 350.194 192.571 326.331 191.794 319.078 cv
191.211 311.088 195.291 276.502 195.291 276.502 cv
178.874 275.136 li
cp
.505882 .807843 .917647 rgb
f
203.797 287.935 mo
200.247 287.935 198.61 284.322 198.592 284.28 cv
198.535 284.15 198.594 283.999 198.724 283.941 cv
198.854 283.885 199.006 283.942 199.063 284.073 cv
199.142 284.249 201.026 288.381 205.239 287.213 cv
205.379 287.172 205.518 287.256 205.556 287.392 cv
205.594 287.529 205.514 287.671 205.377 287.709 cv
204.813 287.865 204.287 287.935 203.797 287.935 cv
cp
.639216 .482353 .564706 rgb
f
215.014 306.299 mo
213.944 306.739 212.771 307.397 212.692 307.896 cv
212.684 307.947 212.66 308.102 212.939 308.311 cv
213.011 308.362 213.085 308.378 213.182 308.354 cv
213.706 308.234 214.476 307.195 215.014 306.299 cv
cp
213.099 308.88 mo
212.93 308.88 212.771 308.827 212.631 308.723 cv
212.194 308.396 212.146 308.05 212.183 307.816 cv
212.361 306.688 214.979 305.742 215.502 305.563 cv
215.601 305.53 215.712 305.56 215.781 305.64 cv
215.849 305.72 215.862 305.833 215.814 305.927 cv
215.671 306.2 214.391 308.606 213.296 308.856 cv
213.099 308.88 li
cp
f
191.822 314.031 mo
191.725 314.031 191.632 313.976 191.588 313.882 cv
188.894 308.053 187.708 291.893 187.57 289.9 cv
181.057 287.924 li
180.921 287.883 180.844 287.739 180.885 287.603 cv
180.927 287.468 181.07 287.39 181.207 287.432 cv
187.89 289.46 li
187.992 289.491 188.065 289.582 188.072 289.689 cv
188.083 289.868 189.284 307.668 192.056 313.665 cv
192.116 313.795 192.06 313.947 191.93 314.007 cv
191.822 314.031 li
cp
f
178.069 265.845 mo
177.651 270.377 178.069 276.812 178.069 276.812 cv
178.069 276.812 182.819 277.735 190.633 277.862 cv
194.124 277.917 197.523 277.646 200.224 277.318 cv
200.224 277.318 194.834 243.185 194.439 243.2 cv
191.35 243.326 188.379 241.603 183.71 244.503 cv
179.486 247.123 178.745 256.172 178.745 256.172 cv
178.745 256.172 178.561 260.509 178.069 265.845 cv
cp
.968627 .701961 .411765 rgb
f
194.627 238.68 mo
194.361 244.063 li
194.361 244.063 193.689 245.766 190.527 245.866 cv
188.172 245.94 186.999 245.166 186.999 245.166 cv
187.46 242.456 li
187.914 239.813 li
193.663 238.844 li
194.627 238.68 li
cp
.956863 .517647 .384314 rgb
f
193.663 238.844 mo
193.642 238.989 193.577 239.16 193.48 239.355 cv
192.143 241.984 188.821 242.401 187.46 242.456 cv
187.914 239.813 li
193.663 238.844 li
cp
0 0 0 rgb
f
187.32 227.483 mo
187.32 227.483 184.162 234.093 185.09 237.898 cv
186.018 241.703 189.472 241.227 191.552 240.567 cv
193.631 239.908 194.627 238.681 194.627 238.681 cv
194.627 238.681 196.525 239.396 197.869 237.655 cv
199.213 235.914 198.493 233.838 197.413 233.331 cv
196.333 232.824 195.002 233.571 195.002 233.571 cv
196.09 231.656 li
196.09 231.656 192.129 221.602 187.32 227.483 cv
cp
.956863 .517647 .384314 rgb
f
186.591 233.848 mo
186.539 233.842 li
186.4 233.813 186.31 233.678 186.338 233.538 cv
186.584 232.336 li
186.152 232.126 li
186.024 232.064 185.97 231.91 186.032 231.782 cv
186.095 231.653 186.249 231.601 186.376 231.663 cv
186.989 231.96 li
187.095 232.011 187.152 232.128 187.129 232.243 cv
186.843 233.642 li
186.818 233.764 186.711 233.848 186.591 233.848 cv
cp
0 0 0 rgb
f
190.391 234.352 mo
190.209 234.325 190.113 234.193 190.136 234.053 cv
190.335 232.815 li
189.888 232.534 li
189.768 232.459 189.732 232.3 189.808 232.179 cv
189.883 232.06 190.043 232.022 190.163 232.099 cv
190.753 232.471 li
190.841 232.525 190.887 232.628 190.871 232.729 cv
190.645 234.135 li
190.624 234.261 190.515 234.352 190.391 234.352 cv
cp
f
195.021 233.843 mo
195.021 233.843 191.872 232.888 190.605 230.805 cv
189.447 228.899 189.096 226.748 189.096 226.748 cv
189.096 226.748 188.377 227.242 187.454 228.429 cv
186.729 229.359 186.104 230.517 186.104 230.517 cv
186.104 230.517 185.245 226.003 189.356 224.738 cv
193.467 223.475 196.716 226.365 197.582 228.938 cv
198.447 231.509 195.021 233.843 195.021 233.843 cv
cp
f
197.202 233.072 mo
197.126 233.061 li
196.991 233.019 196.914 232.875 196.956 232.738 cv
197.76 230.124 197.05 228.611 197.043 228.597 cv
196.981 228.469 197.034 228.315 197.161 228.253 cv
197.289 228.187 197.442 228.241 197.505 228.369 cv
197.539 228.437 198.318 230.063 197.448 232.891 cv
197.414 233.001 197.313 233.072 197.202 233.072 cv
cp
.639216 .482353 .564706 rgb
f
191.34 231.458 mo
191.27 231.447 li
189.554 230.956 li
189.417 230.917 189.338 230.774 189.377 230.638 cv
189.417 230.502 189.561 230.423 189.696 230.462 cv
191.411 230.953 li
191.548 230.992 191.627 231.135 191.588 231.271 cv
191.556 231.384 191.453 231.458 191.34 231.458 cv
cp
0 0 0 rgb
f
186.104 230.774 mo
185.97 230.774 185.856 230.67 185.848 230.534 cv
185.838 230.392 185.945 230.27 186.087 230.26 cv
187.29 230.18 li
187.42 230.179 187.554 230.276 187.563 230.419 cv
187.573 230.562 187.466 230.684 187.324 230.693 cv
186.122 230.773 li
186.104 230.774 li
cp
f
187.863 236.096 mo
187.665 236.003 li
186.784 234.941 187.922 233.039 187.971 232.958 cv
188.044 232.836 188.204 232.798 188.324 232.872 cv
188.446 232.945 188.485 233.104 188.411 233.226 cv
188.132 233.688 187.524 235.026 188.062 235.673 cv
188.152 235.782 188.137 235.945 188.028 236.036 cv
187.863 236.096 li
cp
f
189.261 237.8 mo
189.137 237.8 189.027 237.71 189.007 237.583 cv
188.984 237.443 189.079 237.312 189.219 237.288 cv
189.26 237.281 190.011 237.137 190.27 236.32 cv
190.313 236.185 190.458 236.106 190.593 236.153 cv
190.729 236.196 190.804 236.341 190.761 236.477 cv
190.403 237.605 189.347 237.789 189.302 237.796 cv
189.261 237.8 li
cp
f
195.163 236.45 mo
194.956 236.346 li
194.872 236.231 194.896 236.07 195.01 235.985 cv
197.3 234.292 li
197.414 234.206 197.576 234.23 197.66 234.346 cv
197.745 234.46 197.721 234.621 197.606 234.706 cv
195.316 236.399 li
195.163 236.45 li
cp
f
197.284 236.219 mo
197.215 236.209 li
195.898 235.846 li
195.761 235.808 195.681 235.666 195.719 235.529 cv
195.756 235.392 195.896 235.307 196.035 235.35 cv
197.352 235.713 li
197.489 235.751 197.57 235.893 197.532 236.029 cv
197.5 236.144 197.397 236.219 197.284 236.219 cv
cp
f
189.998 246.112 mo
188.915 246.112 187.68 245.816 186.326 245.008 cv
186.204 244.936 186.164 244.777 186.236 244.655 cv
186.31 244.532 186.469 244.492 186.589 244.566 cv
191.218 247.33 194.242 243.748 194.368 243.594 cv
194.458 243.483 194.621 243.468 194.73 243.558 cv
194.84 243.647 194.856 243.81 194.766 243.92 cv
194.742 243.95 192.927 246.112 189.998 246.112 cv
cp
1 1 1 rgb
f
153.063 236.628 mo
153.063 236.628 145.943 235.066 142.053 232.654 cv
138.162 230.243 137.385 228.545 137.663 227.919 cv
137.939 227.292 140.711 228.258 140.711 228.258 cv
140.711 228.258 137.118 225.892 137.749 224.527 cv
138.381 223.164 141.767 224.892 141.767 224.892 cv
141.767 224.892 139.549 222.672 140.686 221.993 cv
141.821 221.313 147.767 225.008 147.767 225.008 cv
147.767 225.008 145.452 222.227 146.323 221.689 cv
147.195 221.153 151.757 223.544 152.908 225.177 cv
154.06 226.81 154.921 229.554 154.921 229.554 cv
153.063 236.628 li
cp
.956863 .517647 .384314 rgb
f
151.401 231.158 mo
151.243 231.104 li
147.331 228.044 147.501 225.112 147.51 224.988 cv
147.521 224.847 147.643 224.753 147.785 224.751 cv
147.927 224.762 148.033 224.885 148.024 225.026 cv
148.022 225.054 147.882 227.821 151.56 230.697 cv
151.672 230.785 151.692 230.947 151.604 231.059 cv
151.401 231.158 li
cp
0 0 0 rgb
f
144.378 231.824 mo
144.3 231.812 li
144.165 231.769 144.089 231.624 144.132 231.488 cv
146.425 224.276 li
146.468 224.141 146.613 224.064 146.749 224.109 cv
146.884 224.152 146.959 224.297 146.917 224.433 cv
144.624 231.645 li
144.588 231.754 144.487 231.824 144.378 231.824 cv
cp
f
178.699 257.389 mo
178.522 257.366 178.424 257.235 178.444 257.095 cv
179.104 252.418 li
179.125 252.276 179.259 252.177 179.396 252.199 cv
179.536 252.219 179.634 252.35 179.614 252.49 cv
178.954 257.167 li
178.936 257.296 178.825 257.389 178.699 257.389 cv
cp
1 1 1 rgb
f
198.828 243.489 mo
198.828 243.489 207.617 246.16 212.43 251.883 cv
217.243 257.605 219.189 262.482 219.189 262.482 cv
201.574 267.333 li
195.163 256.575 li
198.828 243.489 li
cp
.968627 .701961 .411765 rgb
f
226.265 287.752 mo
226.068 287.659 li
222.421 283.307 li
222.33 283.198 222.344 283.035 222.453 282.944 cv
222.561 282.854 222.724 282.865 222.815 282.977 cv
226.462 287.329 li
226.554 287.438 226.54 287.601 226.431 287.691 cv
226.265 287.752 li
cp
0 0 0 rgb
f
228.462 284.991 mo
228.274 284.909 li
225.214 281.631 li
225.117 281.526 225.123 281.364 225.227 281.267 cv
225.331 281.171 225.494 281.174 225.591 281.279 cv
228.651 284.558 li
228.748 284.662 228.742 284.824 228.638 284.922 cv
228.462 284.991 li
cp
f
669.986 141.396 mo
669.986 141.396 664.375 142.812 661.475 152.006 cv
658.839 160.362 663.509 170.58 663.509 170.58 cv
670.216 170.866 li
670.216 170.866 671.085 155.387 679.492 150.458 cv
685.435 146.974 669.986 141.396 669.986 141.396 cv
cp
.956863 .517647 .384314 rgb
f
747.388 118.682 mo
747.388 118.682 748.291 112.107 748.668 111.748 cv
749.044 111.388 757.11 104.657 757.471 102.707 cv
757.83 100.757 756.428 99.8779 756.428 99.8779 cv
756.428 99.8779 734.54 107.625 733.951 108.292 cv
733.363 108.958 736.257 118.488 736.257 118.488 cv
747.388 118.682 li
cp
f
757.031 100.487 mo
734.013 109.888 li
732.896 106.701 li
756.115 97.7852 li
757.031 100.487 li
cp
0 0 0 rgb
f
754.397 106.556 mo
751.807 108.988 li
748.091 104.138 li
750.699 102.339 li
754.397 106.556 li
cp
f
724.697 121.348 mo
724.697 121.348 724.393 114.719 724.697 114.297 cv
725.003 113.875 731.713 105.792 731.713 103.809 cv
731.713 101.826 730.175 101.216 730.175 101.216 cv
730.175 101.216 710.056 112.807 709.599 113.57 cv
709.141 114.333 713.717 123.178 713.717 123.178 cv
724.697 121.348 li
cp
.956863 .517647 .384314 rgb
f
700.641 137.786 mo
700.641 137.786 703.756 134.428 716.872 134.148 cv
729.987 133.868 733.595 134.93 733.595 134.93 cv
733.084 115.504 li
749.597 113.35 li
749.597 113.35 757.203 133.309 757.039 142.681 cv
756.875 152.053 749.17 155.411 746.71 155.97 cv
744.251 156.53 699.559 156.219 699.559 156.219 cv
700.641 137.786 li
cp
.572549 .705882 .917647 rgb
f
734.25 136.458 mo
726.777 116.38 li
710.292 117.714 li
715.232 134.769 li
734.25 136.458 li
cp
f
712.887 143.199 mo
702.135 156.305 li
702.135 156.305 697.777 156.612 692.237 156.76 cv
686.697 156.909 680.699 155.986 680.699 155.986 cv
680.003 153.947 li
676.048 157.425 li
662.499 145.64 li
662.499 145.64 669.385 139.875 678.074 135.946 cv
686.765 132.016 697.312 131.332 712.887 143.199 cv
cp
.639216 .482353 .564706 rgb
f
697.448 150.714 mo
697.373 150.714 697.283 150.74 697.175 150.82 cv
697.01 150.942 696.929 151.097 696.921 151.307 cv
696.885 152.323 698.516 154.099 699.611 155.14 cv
699.16 153.339 698.354 151.035 697.585 150.742 cv
697.448 150.714 li
cp
700.047 156.141 mo
699.879 156.079 li
699.517 155.767 696.345 152.988 696.406 151.288 cv
696.42 150.925 696.579 150.62 696.868 150.406 cv
697.152 150.195 697.466 150.145 697.769 150.261 cv
699.211 150.81 700.191 155.318 700.299 155.831 cv
700.321 155.938 700.272 156.049 700.178 156.105 cv
700.047 156.141 li
cp
.968627 .701961 .411765 rgb
f
691.959 131.201 mo
693.034 135.325 li
693.034 135.325 691.819 137.173 688.862 137.484 cv
685.852 137.8 686.414 136.274 686.414 136.274 cv
686.178 134.148 li
691.129 131.625 li
691.959 131.201 li
cp
.956863 .517647 .384314 rgb
f
691.136 131.644 mo
691.162 131.783 691.155 131.957 691.127 132.163 cv
690.718 134.951 687.93 136.274 686.414 136.274 cv
686.228 134.274 li
691.136 131.644 li
cp
0 0 0 rgb
f
681.932 123.292 mo
681.932 123.292 681.086 130.239 683.087 133.401 cv
685.087 136.563 688.068 135.079 689.751 133.848 cv
691.433 132.618 691.96 131.202 691.96 131.202 cv
691.96 131.202 693.896 131.272 694.582 129.286 cv
695.269 127.3 693.983 125.64 692.851 125.51 cv
691.719 125.38 690.742 126.462 690.742 126.462 cv
691.144 124.396 li
691.144 124.396 684.492 116.501 681.932 123.292 cv
cp
.956863 .517647 .384314 rgb
f
684.492 131.075 mo
684.279 130.963 li
683.457 129.755 683.979 128.114 684.002 128.044 cv
684.047 127.91 684.188 127.835 684.327 127.88 cv
684.462 127.924 684.536 128.069 684.492 128.204 cv
684.487 128.219 684.026 129.676 684.705 130.673 cv
684.785 130.791 684.755 130.951 684.637 131.031 cv
684.492 131.075 li
cp
0 0 0 rgb
f
691.825 129.319 mo
691.711 129.293 li
691.584 129.23 691.531 129.076 691.595 128.948 cv
692.719 126.672 li
692.781 126.545 692.934 126.492 693.063 126.556 cv
693.19 126.619 693.243 126.773 693.18 126.901 cv
692.056 129.176 li
692.011 129.267 691.92 129.319 691.825 129.319 cv
cp
f
692.237 128.485 mo
692.111 128.485 692.002 128.393 691.982 128.265 cv
691.962 128.125 692.059 127.994 692.199 127.973 cv
693.404 127.794 li
693.541 127.769 693.676 127.871 693.697 128.011 cv
693.718 128.152 693.621 128.283 693.48 128.304 cv
692.275 128.482 li
692.237 128.485 li
cp
f
690.742 126.462 mo
690.742 126.462 690.237 127.071 689.557 126.493 cv
688.876 125.914 689.229 123.479 689.229 123.479 cv
689.229 123.479 687.464 124.493 686.098 124.225 cv
684.732 123.957 683.626 122.406 683.626 122.406 cv
683.626 122.406 683.314 124.47 680.48 124.473 cv
677.646 124.476 676.071 121.1 678.616 119.532 cv
681.162 117.964 683.049 118.724 683.049 118.724 cv
683.049 118.724 682.614 116.057 686.422 116.272 cv
689.892 116.468 691.615 120.21 691.615 120.21 cv
691.615 120.21 693.514 119.724 694.497 121.649 cv
695.481 123.574 693.552 125.776 693.552 125.776 cv
693.552 125.776 691.957 125.398 690.742 126.462 cv
cp
f
686.568 127.937 mo
686.445 127.937 686.336 127.848 686.314 127.723 cv
686.11 126.535 li
686.086 126.395 686.181 126.262 686.32 126.238 cv
686.459 126.212 686.594 126.308 686.618 126.448 cv
686.822 127.636 li
686.847 127.776 686.752 127.909 686.612 127.933 cv
686.568 127.937 li
cp
f
683.094 128.704 mo
682.969 128.704 682.858 128.613 682.839 128.486 cv
682.657 127.295 li
682.636 127.154 682.732 127.023 682.873 127.001 cv
683.023 126.981 683.146 127.077 683.167 127.217 cv
683.349 128.408 li
683.37 128.548 683.273 128.68 683.133 128.701 cv
683.094 128.704 li
cp
f
686.884 125.688 mo
686.781 125.688 686.685 125.626 686.645 125.525 cv
686.425 124.974 685.671 125.053 685.642 125.056 cv
685.502 125.069 685.372 124.971 685.356 124.83 cv
685.34 124.689 685.439 124.562 685.58 124.544 cv
685.633 124.54 686.755 124.415 687.123 125.334 cv
687.176 125.466 687.111 125.616 686.979 125.669 cv
686.884 125.688 li
cp
f
682.277 126.353 mo
682.126 126.346 682.017 126.231 682.02 126.091 cv
682.027 125.776 682.29 125.175 683.229 125.155 cv
683.373 125.155 683.488 125.267 683.491 125.407 cv
683.494 125.549 683.381 125.667 683.238 125.67 cv
682.595 125.684 682.539 126.038 682.534 126.109 cv
682.525 126.245 682.412 126.353 682.277 126.353 cv
cp
f
686.019 132.742 mo
685.927 132.742 685.838 132.693 685.791 132.606 cv
685.725 132.481 685.771 132.326 685.896 132.258 cv
685.92 132.245 686.478 131.936 686.425 131.405 cv
686.41 131.264 686.514 131.138 686.655 131.124 cv
686.813 131.107 686.923 131.213 686.937 131.354 cv
687.024 132.23 686.175 132.693 686.139 132.712 cv
686.019 132.742 li
cp
f
730.878 101.706 mo
709.948 115.128 li
708.272 112.197 li
729.487 99.2153 li
730.878 101.706 li
cp
f
729.39 108.151 mo
727.284 111.013 li
722.749 106.919 li
724.988 104.676 li
729.39 108.151 li
cp
f
734.23 136.336 mo
734.442 137.823 734.868 139.643 735.417 139.911 cv
735.477 139.939 735.556 139.957 735.687 139.874 cv
735.818 139.791 735.89 139.675 735.911 139.511 cv
736.014 138.726 734.995 137.274 734.23 136.336 cv
cp
735.516 140.45 mo
735.387 140.45 735.276 140.415 735.191 140.374 cv
734.159 139.87 733.743 136.732 733.636 135.734 cv
732.262 135.402 723.036 133.287 715.375 134.318 cv
715.228 134.337 715.104 134.237 715.086 134.097 cv
715.066 133.956 715.165 133.826 715.307 133.807 cv
723.572 132.694 733.637 135.202 733.931 135.276 cv
734.021 135.316 li
734.331 135.645 736.606 138.16 736.422 139.577 cv
736.381 139.891 736.223 140.144 735.964 140.309 cv
735.799 140.413 735.647 140.45 735.516 140.45 cv
cp
1 1 1 rgb
f
688.374 137.756 mo
686.063 137.756 685.777 136.701 685.752 136.573 cv
685.724 136.434 685.813 136.298 685.952 136.27 cv
686.097 136.238 686.228 136.332 686.256 136.471 cv
686.257 136.473 686.534 137.364 688.847 137.227 cv
691.812 137.051 693.266 134.718 693.28 134.694 cv
693.354 134.572 693.513 134.535 693.634 134.608 cv
693.755 134.681 693.794 134.839 693.721 134.961 cv
693.656 135.066 692.119 137.549 688.878 137.741 cv
688.7 137.751 688.532 137.756 688.374 137.756 cv
cp
.968627 .701961 .411765 rgb
f
712.073 144.195 mo
712.073 144.195 718.181 152.526 714.061 161.338 cv
709.94 170.151 693.816 173.637 693.816 173.637 cv
688.488 167.35 li
703.225 153.947 li
712.073 144.195 li
cp
.956863 .517647 .384314 rgb
f
680.003 154.205 mo
679.889 154.205 679.784 154.128 679.754 154.013 cv
678.733 150.131 li
678.697 149.993 678.779 149.853 678.917 149.816 cv
679.054 149.78 679.195 149.863 679.231 150 cv
680.252 153.882 li
680.288 154.02 680.206 154.16 680.068 154.196 cv
680.003 154.205 li
cp
.968627 .701961 .411765 rgb
f
691.331 165.376 mo
691.331 165.376 688.161 165.633 686.272 166.749 cv
684.385 167.865 681.859 169.411 682.778 170.183 cv
683.698 170.956 686.636 170.183 686.636 170.183 cv
686.636 170.183 679.835 174.452 679.406 175.836 cv
678.977 177.221 681.214 177.018 681.214 177.018 cv
681.214 177.018 679.568 178.551 680.518 178.959 cv
681.466 179.367 683.937 178.387 683.937 178.387 cv
683.937 178.387 682.587 179.6 684.258 179.956 cv
685.93 180.312 690.556 178.595 693.864 175.333 cv
697.174 172.071 698.032 168.294 698.032 168.294 cv
691.331 165.376 li
cp
.956863 .517647 .384314 rgb
f
681.214 177.275 mo
681.114 177.275 681.02 177.217 680.978 177.12 cv
680.921 176.99 680.98 176.838 681.111 176.781 cv
681.152 176.764 685.207 174.982 687.505 172.514 cv
687.602 172.409 687.763 172.402 687.869 172.5 cv
687.973 172.597 687.979 172.76 687.882 172.864 cv
685.51 175.413 681.486 177.18 681.316 177.254 cv
681.214 177.275 li
cp
0 0 0 rgb
f
683.937 178.645 mo
683.826 178.645 683.725 178.573 683.69 178.463 cv
683.648 178.327 683.725 178.183 683.86 178.141 cv
683.895 178.13 687.275 177.059 689.562 174.548 cv
689.656 174.443 689.818 174.434 689.926 174.531 cv
690.03 174.626 690.038 174.79 689.942 174.895 cv
687.56 177.512 684.156 178.588 684.013 178.633 cv
683.937 178.645 li
cp
f
670.57 165.583 mo
670.57 165.583 673.074 167.544 674.034 169.517 cv
674.994 171.489 676.249 174.169 675.057 174.308 cv
673.864 174.445 671.839 172.182 671.839 172.182 cv
671.839 172.182 675.159 179.492 674.754 180.884 cv
674.349 182.276 672.595 180.873 672.595 180.873 cv
672.595 180.873 673.123 183.059 672.105 182.876 cv
671.089 182.694 669.568 180.514 669.568 180.514 cv
669.568 180.514 670.025 182.271 668.436 181.646 cv
666.845 181.021 663.932 177.039 662.968 172.494 cv
662.005 167.948 663.37 164.324 663.37 164.324 cv
670.57 165.583 li
cp
.956863 .517647 .384314 rgb
f
672.595 181.13 mo
672.379 181.013 li
672.277 180.857 669.895 177.166 669.321 173.732 cv
669.298 173.592 669.393 173.459 669.533 173.436 cv
669.671 173.413 669.807 173.507 669.829 173.647 cv
670.385 176.973 672.786 180.695 672.811 180.732 cv
672.888 180.852 672.854 181.011 672.735 181.088 cv
672.595 181.13 li
cp
0 0 0 rgb
f
669.568 180.771 mo
669.369 180.677 li
669.273 180.561 667.028 177.788 666.482 174.29 cv
666.461 174.149 666.557 174.018 666.697 173.996 cv
666.85 173.977 666.97 174.07 666.992 174.21 cv
667.515 177.566 669.745 180.324 669.768 180.351 cv
669.857 180.461 669.842 180.624 669.731 180.713 cv
669.568 180.771 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2204.w037.n003.308B.p1.308-temp_01.eps)
%%CreationDate: 4/11/2022 5:14 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3Q=eo07Uera".M4ffg6!+pS/KZ"$-JgmCjPJpkD_(@:]8KRe:q`U^[/%I8m#qj7Ya4UAnAVr;_8L*W>6FtaN(/*34FR>\p
%79.o5<E3;[;q1jGhnm72dRhfM;^>B@kO=.Bdaft83a4,A.m^Rcgo(s>Ai!@9f,Dn.-1fTh.L5r)r8K6qJo\Eq6V3XC_EHsOm9*N$
%;E;hK)AU#`fL_?Y`YHUChLo-1!.JPT?F<UI(P?5=*u+H!n9^Asi`qU!Va7?eUdD1%;KT46(5Y<]n\=/r-c'Z!fkU;a;Q]e0"d>hW
%Cg-(;;"s2b:`,E!s"2-L8iF3LgZ93I7Yt$Za4?-"7B@t/F[VZDQOO[Dj?Jq.8&&bU#k7lF2>f[2f)5n>l\_C'[%?=</CpND"Lb=t
%(At8?$sH^9Lb'2`;2/^LV-`k"!E#epR7U%Sf2WRB`%O5-BSRk_P-4(p-7IaDOufPu-@g^*=PB\S"Q)kgO%n_9i"q"MdrVP:3\C:3
%I>4j.RLoA`Ug4HKkLEH<A7lS"UY7]+'n\9l-7^<Bp//T!K^^WjETT2tK,-;u>.KX8JEk!T%bm8]s"e=FH%Fi&;*CkLeLh-8lZU_I
%*8OF2#?]Fp78FgE;pPZEl&NkCkIC#H=%r80MT<$,,[Q7YauY8XH.47uQE$G?\s5*H*<^15P+8T/7]@4^=pO+\s,cf8Y42#WMbst)
%BXNFAB1::Q1'^ZJTYZ7*<l`m!]5h3M9.3<d<GYTROg6h9JSNbSq4!9)\2l&(+!pll762.VEPoT,[Z,c"&-$5s*&S.P2[oW70^r/]
%TYKW0,Wj7_gR-3nnXFB*1>BfZ[[kV369Pk.GTNaPi#g)/H'lhI0H#>V^R-R9_.8rBB$FlUQV7V4jDt$2/n`oaHS1'[E]KSF&ktrp
%'[\u+YF(UTDA\HUh_5r=Kmtfpo#8/9^EHPN(XjL*pm:Kq`Bc:)?hbGP+]J.PMk\(_73bb+Qgg"W&4XC<<[q$?!@C1bn1UZ\jUgHU
%,/dDO;d!!qiEr%=E_dRGjAY>WrIfEu.\;=m_dph5rl(V1+t;^I2l8S4JB<mCY%]@(RMgCh^\A6UV!S0^1?&n_^R,FT`4o9>[(0#l
%;@9X'hA-Ce]HqRJ;%fkp0c:]IQOW&J1-gYnUsYWFfj&AN$3,cpO?q_mO[5/$E__*R*q:m1UMV#sUiN/snLpb*"sH'Hjh)s<n^0C2
%9BXQf2]CQ@#k>:Dcpki5$.gbo5,F=_T%6Sh7u6>ciVZRD0c@0e(/G=2^XI[kGhQ#/bGMkK!hr-Ea?SCCUY\f<5^)"2UOL4:(%h[_
%dWlpj=sD'0[3jc%,AhL)8(p4s\2[(R80j^1:,9#@(/2&L)KC=-HtT<SA,gYArY3&pJ#5fP8+6'lA@F)s7ITl@j3[8B48n?RoXjFD
%[Cbd4.ReiEhW_dsRXU=Sks*7\bu,s9VuLp`kkF;3r_p^abg)snnLrEGrQ`1*GN;U[1T$G\k"r)EDe:A`9=_U7M2HiP%a$\rd5,+K
%b@NPjr!G*O+AA`u,QXnnQ-60K:E[?VHBtDI@_E1^cY-FTmSX&ao4VP]f@$3@HqolWJHhCeK^U0<%]pTrK2A^`I5H58-\o';iOZ%a
%Jold78DX[K,Uq<2&IR27<$6UR(5n!/n-$TN57g:@BTaeZ>,82\nBE942#JB.&],]t_aKi3_ZKH='qE2,"0S2rP;Oo7j%K^mH5Uhi
%,$7Jmq5,%O*_kpgY%;Bd)IF)GL<bUQob3K+T93_IKP85Lc;nf4!l`e?3nM60TpW-S-e$M=W"?l#KdMEO;E5ju`Nn`dee:VCbHZ7m
%,+`O5j`T+,P#'aR6m,[.L%.KL/CR.%Rq1Xq#dV7\:5<cte.]7Q.1OHl+jm0R9"?'O.hufbAV2<2>q;JoS?/ks)BbGEmm<!_e9&tF
%]1%UUO8O'8#Lr5/&6^)HCM.gUZtA(LJ]&EfLXbg^KN-;Nbd<e4*L;fLA5aD2STX:`%]-d:N3kidH),m[PL=-XXpMjSWBj:'1&sag
%)3/*F-`-Cb8ZL-f3leL>U\/0We26QS3Mm*^&iO!B-ZURIYrj%`8!BU7(,TICY]8/`d2&*@3t=k$?LT!Cbi:7N<6#>7Qh$XdXhu;f
%7G"8'"%BhJNkOqsS-l'%2/#jL,7QZl*0H\7-_YAhA3jCskNkTq3'2e;KCH%U]U&'C6i#.?$H6T`1ZVgu(EQ;&l6-IMr.JWK4ViI,
%R)*TP.VKm1o*4;H-hThi4+b0e=r;O/_S-W9*n'1R,0IBP2'Za7b/lY*<-Y4t7)gu=UR7TCQLgU*VUD<2Z?Me:dhZc&%LlSdH:R@7
%N&8$Jf[hOd[+5rF=uXZW[[=I[P_W6OhOP\1YY<K&Z!Nu]f@[gZLFb5VXDL9]3]3]Nl9/UiXP%2cMt_.WGG[X[%b3`$(6t`D!?qV5
%4_aMP>\YIeG1Kb9Cb/G9V=M\E)4c"-=J\c-Vkm6@7o_mr0F-A71_BjV(Fb'TU;f6HFD7Q$TmE*1N2T*QSbVWLODJZ$+?qbm'em^F
%muZ7[/1lEk"8N.&."q^KJg3Ak-E,TaL-4&L.IWA>A;N.ME6p:]3nC(aF9hi`:6Y3aYd&jFDWfF$A8q/r+b<B$V5U[N*W@jn/Kf/f
%7'Vj,dQtY#@>U!^s4C:L\]@bo__Ucj/d+(FhUX8!XEp<`Njn[TMH_uRqZNoMXq)n<[,>;!d3.QQRg9Q.]a?m'2!MA.'aur0.HX88
%pB9SD.3m=rmfH]M&k%(.WPN#?e*D5p7_h]dg3Jt9\h%G[>7Z\VSd,]oV.q8-+1ngQ<CRE4b)'7?aZ.p$,0jbTHf-'4]#SYDm;Z:W
%^@bh$n=nb[E3+\@TZ-0BhP%DebJR?sH>9gVdMK2VNAe1ib[c%P/kGN.Ih:TaVZ>UO?/-m'Q2iK<1`R?<a_r^\+(;hg+r[B=b+_N9
%7LH4.Ls`)Z)RVqC6q7@EgIPhA8)"d=g[4C,Ef.aX'&+0/EBk9uZj.qaHTD`ZBs,r+AHZ0t'd5ILC-!RQb!qpBlsAHrmI*cE])mR/
%N=+JD2'r$CCkS(a@cX@V)u!5[pRfhq''!G!X!I10L*E+/(md-O<"p?ga?Z/jr6o8rRhVhBq&j%tHdjmNETRIXOfssj&b#?:^/Ks-
%Lt@K*WPPm=)b>>ehXb+Xim%iT+57X5#K4TXSam'\.H3`M@huL6r_[plH-9j_#qR&U692marp'$<ThA'*8pFrNd7b-&6T"kpKs4u!
%b6R_@q])0IBo^0f0]LPX61Gb&Kc:J!7#F'H1jb70o'GJDpFm7\.Q(DV0@98'DZD.o:]hg&]%T19[Fd181OZLLW(JG23,\:&k#aXt
%gYG]`-8ZlE-[d(YO:"(N7RYjP`nF.D_^qKN4-E=hGMsq;h-g&lZ_J\;4rkMlfs!b'/?"5`:.[oDH,(XS$NHti-]j]JO-qVp&NW=W
%==;I_n&C4GB[fbp(Sp2B*VM=/6#@'D8_A84-b*eip*+?[BV7B6f$pqA!;W_(Hh87U)fq6WUEtYUW/*EIg_o'6Z+i3liWFP$`D)K_
%TaTQs`Pfli$g1IPS5@lP#D"W1>,C&qUN:[LAZ):3;2g&Y&U';XO5tp<\,DFDmo?u51l78ZCi)!LJJX^_%aNp>YkcF9UlR?JFkl5s
%rre+LLba'LQqp5"SIF*XFiXds'HQTS(*2Xmp%N]"#^W0YP6nafTi420[PWLllpg2+E2+D4!Funqn;jnCLC'#gDRA;"43DD(G6g7e
%BhDe8:,?k.cltp1J\GVukF*O-%3aRq6QD(rY!Jr;AE#nq'pLrK"`,fJ3["ka<%X9!dt4MB;o*b[`Go?XLpqKg;\=p[1eUM"Y%c7j
%Oq_%\U$_u+f2CS-&K$DP[j'"LWGmP@E_4+_.l'YKG+S3@`ssch.*U9fdkYC$O[`",`XJu4CD,KDfd0-9>?"-r/u/O8%kC<]*B$>/
%.O]$a\<+'<OUX4-Or(NKbbO*N#u)`PbXB;#.]#[Zc:"S;!t'l3I?0<goVJgZ6XD3ha6`/&peEt$RT6,`'pstkQ;]io]+CVDF%Y[Z
%-5;V1KdO/h,(#Qe8XIdJbJnokQS!4BA3Qh%.t`7*'togb8XlV3Td'-*;KTe9A>*.?R@W<i;loGC/Zu9#j^'7GH&McfY6.Dr1GX[0
%:l`8o%rtjA8)6a#;\GQ>j5ra!G7?#Hf8SpPZA1*U4haEI#hqa,=eY<6.HPF%,>5Q_>LoWDOM^!)%N'RC8Dd".QQ`dmUm(>n,<!X0
%A<7,M@1tBL`\JH<k[Y[]&`)dEmYWN,d\taq:9?-Upn`;RmY&7=iG'4uH#B6uHtgIo;>4Usqh9m3NH<E%6VJDH0u#?ilU;h9LWq;(
%FO`:5$X]%(5oh_W5n-M8fY98W"N:6ZAq)poGh+k%<9=<lV+IQs?K!S)N!]n'Qaj<,k%Oe6@4u`=ZaoM3")/3qX<+V-%@d08>,P*\
%En:'WB/G6Q<o*(VJO345*]?bhaS:D%-a"MXFF^+/8j-OmnF#AS?('PdSobG34mHl]T1JM.?9,(a*d(@]'H*Rrg1cjue7;-6Cp:k7
%^lXD-_o_0b%a8ag6g]9kl$uMV!%F1-"K5JoAA<l5j5L3@b%$>?iq/R@Eh(,>E@0e%*l#]r.f%SR[!@sr3,"=>gGYu6h"(s-M'Hl_
%lZaRB(*C%^)80EKi-o/m]C'7=HV7]7kJF=mh<U9<.k@)jKsO=Y]I:Cj8:9L#\o`g`b/-?761:)?PG2pS_h@g%m+C%bE)e*0+(Y7n
%L!eb1.qU*r4+'<W?UVD%)U9&mDFh42X%;]48X&g,1,JWc;sGLP$$MARQOb,7SW7]3Bn:SP>m?b"hf_$#gg!A[;<WC\/pZoE?(Mcc
%=g;T0OU[1!mD)#fj.-tuNACHqnjYK%ES\k_m]4qVkK-s(Wlo_^_G7Lp!G1V-VH1NH5`@(c_.L`I>.Jh"IZ;('hbJf)]Db#584S32
%_]!&6<AC06J,a^`IrhfRbAI#o[o$qmpSp0[s8ChqW`ZkCP`)3]W\mD`Jtd:-r>!&J.*Ek]<&nah"XjJeLM;p#WP1-`^g,Q2":G)B
%nrg3S4\kumE)UOOU&laS;uIc%CNZ=YRP%?la(<$N2\bgM=CAl8*IdNE:/R.@0PJ.Z<G'Tkej1j_'U#>gquI+WT41fSnVW=+Z;W<*
%(AcN=0[8hm^K%eeQ`cftlHAtaEp:$kfC)<8-/E5nn!(.^XW5pBj7cB%ic!m*bW312+T:`*<%S:`jg8<."]7Fj8f^9tQ.%h0Nc:6R
%oDrtoWa`\KN,YJ5n;qClBV(S"N2!a7=0J(Na%<;mZp5ncWt+s'YT="0@4bG\je,dnL;hWF;7U@c-l.a/T9\_G\^[]Kj9iu5he88^
%jl#cDZP<m'L=D)2HW=O&cq6-08uCE\eLINAd*<.qZ$1Tg?$4\ue=LParF;<u\u+bmVgM_RCTM&%(qldD-rk-Uj%;_"FThl63&%J<
%%iqr4Q2Z#SZ(!8/>8Rjb&Umb=iS3+>r*c]EOO)TX!Me6E`m5emD(3[.<6A59E?3Q`-sa;d!U+8-&uHQV^GAUCY#I#3Jgs?c.iWgh
%?A(Q&T@QfF9l$]2]rP,CIck'P/'>j\'OAD;PCE8LD3hV0m$"=3=(i5>!>DSpL`(>D3"u>1i8L<uB&RA2(4M:(Kc9L&KS)\13P$C4
%K,b2S_4-[8<*X0Q**)qc'jGl:=CUO7S!gm]FF2Vs_$s2M(6@TtZ\bf-j*J3l)F:]8N[#")E)atKG1nWl(P:U>d9K%A$4@r8ND-A'
%E)s.?Arpd2hqGkk*/iL4IT4PU_`=d+.n>;Zs#l0J/B,Q&ii-*CD3\Ka2k79&8Vb=tj7"ClNbN>+EM*d#@/'^;S.4dq!o\e)0G5+o
%P<Y#J>!6Qoi*j[Q9U'WuD=4d^DA7\.3ie>#g\0Z7nnkG&[Gl2Yk\!+j54k!3(U?lc,YKL>]$"HTJiJq2$/!<'2p0^i9]aLO<,OUZ
%Rn`!V;n:R\DT\hs2[pjVq=7sre=<,P>`=rg$(]8Y(l2gG\_15*2OBoXja+3eS'1bckAohFHVco>o8C!u;mA?lY"um(/fk[95-*/V
%Bq"M/@ckE\hmkAKqq8bVSF=C8TUW&m2Y^T&[kl$E1WAFMF_Jj2h4Jh&7d1*CqX%n$jB'h/gYd>Rc*a%1B$_G]rfhT"@[utg38X8j
%@N<F^3'tq7Sn4LX^4&J]b!brD$kka<pS3-L]6K9BLh=8=itm<rJmXPE,Ub#^'jkNo`A$_c5ji^mES#\p.6.Mqj7,[h9ohFSd<7kc
%NBiP?Qi4qL5P82;W5e("h-!4e@!qr/[;*&05D['&bCiVMn94+79jlbSp#MFjM4`G(lg`X&'n_KQ,PNpQCSbbr+)g#Mp@lWfAR.1>
%7\cC#1DWa3e896E<mfRs":nbnR*JutEO,Z,;MuM7SK\^Y__o&ee%"i=n`IZD_h0[)*b'@6p\jlOGgJq#KAS)bmOCLQcMmB&%4fo9
%GQ*,$nf\+YfQNd6CS+MF0rJZ'SA\"g6T,E$AVKk$B\We?aXQt-VGeRdQ&8_/c_$-dajb(eF<_'?`E:e7rt$8f@If`dA&XXjq*O"h
%jP5JJMdu%mc%O+l`E5*gQt;.7MdYR_fsP@LF6O.K=DGm]*^&D[\1*a5M7?JEd@[_3Z@c>UIYUu0`Y`[8E#LK+B@#S-=I>M]R2L@)
%d;ij3*i6cpfUJ6JlSTDIBVlr?2qH*[alqXr*!L[0B-<_3c5hP*Z1$IHH+#ql@OC_`IuL&dg"Cho>Na]=naul/ADimF$OX'67C5bL
%i"La2YoeAmFQXKJ2dlQY6=R="B&%GiUHQDVMQr;0\aulPTR7ZBamJJ8p=6a[N/GB6(qZ=LkH?tjLe!qNWECnOK`Ib6Eo>OsF3'1m
%Fe5*HB,YZ4XS>UsN/d)DR-?$s5Gd\@-@HlZ0_lR+Xl]r1g@L^DO#hn`9Fh=baYC8C1$56pA)C`L1\UMocG@n"]XoH?i:D_NrODO/
%C98CaNQs0kg6MA^4ZZFY@cC7a2Fb/ke`)P,[1SG;rC0P%aYC;beO!EM;6^bO4G^,!=+3\"(uF33oV5m$&WjOl%/u.'&jC^t%VoM$
%;/t]aJ+u6<ZpYaF>CIgZQqUG=MPZf0;9ChoE]IG/BmFgEPY9QBO)\?ui0OfV[5^JH6IIU^3,TYB8fZrSA0W%J@W\,LS3+`(WfbRX
%r+`2Db5k`B>80cI`GC6BMF<<=bh,^/f%jISauCt[9Q27L@@AB;i\31^SU2h2;5X,NJT:*cS&M*UhSp`T-'f&q+[aS/a.a9F.2F3>
%1LiZIr9;K]^5g#(a.gLko4P<VZWNGp/BWT]__f?,`*m9ELRdUh7FD):Ypck>T*b%d-Tr6A0MSf#EL7Vjq_kR].'WuK$0h,4EgLAN
%@qoIqZjG.AA7(oE/,X:^M:lGGZhk+P9Yn*l?^N-`OBhbCFiR&n^Z)=>cYf$dq#soNjX0>V)V0]"1,H7P&$]pDbc\nr_9B(,m+T[d
%9nZg,B`Ko0f;?_s$W*fYX#@;!s)"epF4R52=drR%R8s,[>;^Cjkir\6=\PQ0M]m\%]8J[H)h>84o^HbZbdpX[&^7i6X;c;*UZ9ce
%62A%Ws1FeT"-!8>-R;ip@`=/oUU6W2$M5"[:8n,\d`Yjlki.e7m;[=88PdoL\"<L,79+)NV*A\'Si#bXn&]N\-L00G;RI@sPcF[(
%4Y/J'HJl9<Z0i)6dZ02B:!pCk<REAmX"*VmK$Wr#"[=D6'YLWg)7ud9`g:[dNNQbS_Ko[#pZ&M7p2cKhR';Wj0mq-8=?-,C/_)?D
%=qcY>UNVU:Vb`7'khCP5FXno<E?"Y)ndjRhHcVWN;&Y#pmme%0"fCPX[2?R3a(\uV,J96a%M/NTRj9&6dI@cX<V!jGT+V[g#a[Uk
%V:JouBZ75\'/d-ZbQXAq+XXXi3VJfF`9BA^p<'5G@nt>m3Je[e%if(,AHjtQl*iS,qnLU!a5q.;GIIN5g]-Z]cYWW*[f?4d';F1Z
%mo]&Y:?>D-VKi--%,\PsXK,P[L[s,in*^iMg[gu!"l@q(D]`k/HbQgLhgS`XQ>UToE?=g-0kMOd7q6HD@dh%%`k7+38j+r]-AHqa
%2f<#`'ULC3q&!n*29egs$?M\OSBfWLA'>20ESh?()3i=P+2\sFQYu7qOC5bP2tFsrW\[#dEG=3_K@pUb\?D"5C72D>ZC\/BQH<a^
%A@#jQ.9\'n_thl#,7(;Ri1^?Y^hi8D[e7=5.gN2Y7Sqm?2>h4HrSWN;5PqWJ-$S.7--_FS/F3<c<SFR(&$qIS-_>?X%EjdJ:/H[`
%1"VtLZm/nSad1$?.?D3l87PT(F?Z%(:>A5qqdqu>J3VqYY#>DU['!%qaikc[o#I0,O)O>orGLej3m?#^/K]+J)&\&]`YM>:"4kN(
%Zcj1kAd^8uKpUK0Mp0^fiFTIeo&rbAn\PZ<At]ScC__]+^W[I"Ad^8Q1DEX&#6/K?BsrQa0LAOfKP.`F1j1B?;g6R+K@DaO$V5d;
%/FY&>dpufD;(f8:rDMOLSk1a@ER&6Yq`PU4GSp1%-K<gG0tV(-UrN254:PfEK8sT29[!^]#7cd#>F<EGFI_1(1`IIU`%)o+Jan;4
%aP#K2JV2u.m^GDgCn6fsLpPj&f)@U^[kF</q8M'KfqWb?kN\m8ZqODA.R1q<@C,"\j"c9]r,MGabtU!-+o.+j(fNF.e!4B)"g]'+
%0ruYJ3:kL8=HIe&B6696q2"<5pA#r]Ac@U/JDW'sPG6T_9a8U31Xl3)m+DeaMJ$VOE&m?tAh=F(,L-9P_XTW-'6-.2&NWPaNGFD/
%;iRKN+/NGJ!(`DnABYm1R(3Ua"VHIqBBpDp0_r"elPPiGB[,*_`jmV1;m;8oLPOPD`bZZ*>`H^uBQ^bD1%@l(X^b&I3_%;R'h^FX
%Wu/0kjqpE7`)s43(mcuf1Lo<YD]4(ujd-KnV)XUu1uD,a_W"'!/shN:Z-B]6%!%?c><Ac!iqWHmksr]sS1AHVmE-%)oR!\2m:,'P
%0ib?H[S!Yg^XY5V[0+mKQ--@VP>[Ic8rOnHDqrS9ZsGSRN:G\^<\9?JXGq0g*lAW9Xr-HGg?a]j^S.UZ'gmTj)Z:C<Z2CYl7]d:n
%4XA^Z318dLP5_N6#5tZXT<i_$\m:%6E\\F7Vs^.<=Hi2n5H$KP*oue_fP+P<N==06^N7,Q[-eVUC1YUV^>c@N$htWqJ1l&6!kr+u
%o3Vh!C4TBTU+M)M0J@M<f&G6E?&XgVO#(!uB=rAi`K/G3S^$99CG$FLLsK[SUZjA:g"bJUc,CMAB=#/=?sts_S'C)-Zaipp!Y[AZ
%S''B`(mc[Fk]AE]B=$jXCcXMEcHW5-Zg$7]3[[\c/o.lSD8VF`Q,e>+\#rHACb?bBZh`B9bic'ARa8r^k.`[DS$M>s@\-jHG68ps
%Shn3l8ke'Wf@dhMj(oBDK5L[V193,&(M(`BqA_HSok,nu(eo[']LT,#N2;ERce'2:Rkd[Gf*OC*f4D^9^SOc*<qcuuf$DTCCXgV[
%cZ5Q;G*[$ah'e$e:1Q#HlG:5,0&b#J8]R:2L$6#^DqnEgJ+'P:l!0;k2u=Bf+cI(EeD`\nEnh+-lt70,(Aq:[J<Y@Z>fDL8CUP0@
%INaNjQCN>][DeSHVH.QBr4\5lP@ej+3MpFm2\J#tgr2<*?,gGk8?b9k#Sq^NbRehh)Rn+EYV?U=6>8mt1ZSKb<SF^$A\s\,il@(!
%Dc0DdD_Y>+KsW(JT<]bPg%+ZVPh,g\+iMmm=\kV[Dsfne%\4GtDH]2XfpMW_0m.=$XQ(=>kF[(&)T6[`]!I@#kK8X0JEtp[AWiUY
%R85[2M>hicd4+D!1T+pQS>)uem=*tln&O34RRLSETdAV-Yb**q&7Z-]O41W,p$q1<hjmUW&&q`Kd.dLe83CR\j2#Yu>'H5Sf(0:s
%C2!F$Od0Fj`V#mTASaGX^N^Tpj-[0hEAfd?gaJ6\i#%6)E??1\o^UVm3;3<"m)R'M:*F7[irkC%PIQ3,He@9;4$D&lO2"<+7(.oF
%[rG*9,<UZ=q+UD!XL"h#:"iOoVXfT5'7M[`0'$m[#RHke6XK;V\/=sR9S<`('UAXKlViTJkE^LS@k2f@;/uLFk@.>j"?AYh0W89;
%\!`W3Z[L;N9?*3UZkIpZ`mHUbP?j5(dhqto-.]!QEf'$c6CZn+-?**(Q#\cg2]kh$E8:WY6=[dRo/gI,/AgiFm6Q\PKG.i,ZoHA?
%Sk+A-@2=5gL=D'(W)5-bDh:H]e<m-+X1pJ$:#`$hbJ0&^L5B$Se!1b3(51Y)\4^sBl4I6a>e=0!R7K+h9oU^g.&o&ic"qUTbXUF4
%[-9M]l&c1*O=:Y\Gs6$=e`KSr-Rk!_Rn#*p@e>o\BN)D8nM"<rm+4HCI%"WTo^Nc5+X(d'Er#0+Jk;Kk4Oc\mb2U:6Kin=#$6JsR
%UkR<iVI&XhMrDR8#\G6%F]b[c6Rh*-QZ\%\KA0:(r8iG.G??6-\b*AkEZ>!!Of-D'6)e>\3`+7aG4SHhn>lP*cqo`@7A+YQNsbhC
%j-Rrc>A@5Bd^*,Z]E*N:KtABjDlb?Y7M%6sPOfSmlU)b7d#Z$Y&n[p'jF:/U0B'Z1:VTDL9/TnNGk6"jqW!%4p7k6o@AdB0!:@T-
%Zh=]oc65"XdUu?KQ$PFr'<0+dro#"dpto9tOV@MRFA1$._+RSXNi..Lq4Icn+$<OZ/VdnbS&-^=U?Lu?r:V$mI0JsBLdF*u5($7n
%ir@rW'C63*9+ct'&`MAQ`O>*+0Eeh=bNIM2#H_#l)*,E[#j'5O:8!8PX$IMV5uPeDgKu?lq1o"Khf/['l%kq8eqY\(%u!Wul"6A2
%q9='`?(_%>qQk3J.q;HVT4eiud!di+U9h6o])qSZXP\V1Z#I+e!Gjjm<>scq&4XDU5PH6m+E9B04B=1dW0Vm%J)P/#TY5<P]NB#W
%IJ4]*Xe?st,fUp\c@A8sRe#'e(Y*Z-MN9Y7*hipS6):DEl]B15L:G1_CLb1s($=k&(bO>HpVG5"YQuO;l(;c+s'?6=rM#"HGe,Nd
%P#&0N&P'GX=$@OV6G(pN<W8^q(^hr<B)4F#a6+)a5,b=XeL%l\o[2j=0bb$jr0I0rrT83H37MHe1L4:sH1PPDL\GfP-I$S10Kj#Q
%<AmSR^H>'GnWZ0`#(,0*LU/fo17&RAF%f\VFZ4#MQ8b&1=AP/-KLF.N*Beah'Gg0-Z@iMB!OJQa%BN:8<ZB!1Ffbfg<'Ig+*ApHu
%_q-sV1#88;`ebhhOY60ea#oE<(BK0C=O9nO>(.(=X$8k.pTKFA0=!Hu=D^f(/IricEY&qi/RA^:G;Qd.USXKQmq%d_J6Q$3kMIlC
%Y5Ro_:iD\i4RTJ\p_3#C@eoT@B=5>GUMX.g`Pdtoo+\se\utjgU-c!l=#B#B.Z!fFe=NNdS4BF*XHi`b!%A"*TC;"3=DA5QWp>*9
%%u)UDND`VfQ@8uX9r5IJ/tbsD'G==6S+iJlq;i7Xa<iDT$KG\82O?nh0ClZ[JS(1C/CmJ9:4(Klf34;S;gV-:h5VnOI^9bG+tbG&
%eD:+Ue<NK_<?E^^.-])VD]:u=mFI>reGX^?!&7R/jX<SV7Y/JMI:')kmVD2*e6QkAj74H.W_!@92hGYgp`:hr_*9M_Vc[^0f;3Me
%`EU)h)m0bgbnhldIeC>14H1$dF\G\J\>T_?O*4gNJJ;9R'gtBgCFR-S:tS'qn:RBZ(FkbB:,rWRKst8L3ZM`kC:EINN8[nV"5U?G
%rT\7S^C?Ff>!3RujbC/_#7\>8WE&d9lpBU?63FOb:Fi_(bIX+kP@E=lI;1Fe/sgiP(Jk1[!l+Hp;B86j1ap-0>ED!T/,3\?<Ke]l
%D6h%.^gb[Cb=ZKfhp67&LfO1_#``rZY1Gs":$!"[M4bi:%iY+1WK.cgPB":Rc@ptOb"\gRBWC/l2,IK']K-H'lAr=]'\f+cO6o]a
%#N(/S\)R%\;_SCI`,;[o\(YGp;7d?e$Sf%@V"UjkOoi&gc/JLH(1(_U*W"E*pr*k_?Y.:p'U@-JXfh"jMnqWpYgU_8$TA=KV[\$`
%6A%[5V4,bDRSd+f&(>[XQYTiO]bhQ,'[!75(^XG@q$.>c/^Vu5(;6*16$h8]GMil\$]Kj)3>'OT)p#*WCD;?_DB>(&_cf_4SK!kW
%'UiJhCG4Gk:@0$n.N,$?_l,_\W"g!3$4IRMdOp#/#`>I%7BdGt<]UX+<]@s3#qZI=-#>msCdQMl/0rZoaR1%7rX$`oXDWWo.h3q`
%0K"Y19cSY_[AXN_V(,=s$W$"Q4u1lNISDYgR-83[]4+?6a#f4U]45uL6d>;D"`6YAW=aud$.FM>CE7*o&kGrCe(<,nGa_RQGRSB3
%]YePR;jr]L[Hf)s_<@S8%@!FJpn/)Qg24&L\BO)`WI>;.\0"mh*Q&&6'"'nL&uk]g:;bhSX9$>Od0sb8r#f=&S1e<)NHlSt3+(:?
%pSp/0V9cXs2l_W^Upj0hXYM1SBF+3aj_Sl<2&)>AT1ZNm[U+n&&[T@tR2#5&L64=g:sk]6;utr*ko?(g+-mh"MTuf89N])p5AKQ7
%m>uF6;EE"/PO@AO)o@Jc5"Mg-CrSTAXcSdTRo4N6CG#h9dV[P'iNRI07-67EAQ]4=D*T>bQ;FA3"0=eAel[b"kg]sC9*_9[ol=TT
%ocUF0$rF"/en',-;X_YsR'7B:R"d=R5b=@#DMrL[RTf^q,4X$pB@-eHojUV*LC"3-ep=S&%UWB&FoBQj<ROB])_*e0(!1gh:/XZ(
%5H<;G$en(QmJoh`fgJSU05cL7$C.7=?n[j=5Q-JC*9VIbe))RlY6C+\]$":.[T'YAgV`U#?I_+TN$D&"]mY\M`%do1^KR`G>^!Rg
%P)?l.bsA4XVJK<A"!mb>4kXB;&b:adcmTBDPWHr(dM`B;5o![Ah@+P)B:EQKPI1TUog=]Q1pB<K$KFVa="X^!!L&75)@Ya3hDVH!
%'G(dmE:q"&c=Qo+5I?3f+["R-6URUA9h%l@L'db,bIA>MGsb7&5,`%U</#(nbDY_c=.Y$9dpB(SN[#(mT^:8t<fPrUe=4SBSIZc<
%0M&tOgWFq7lP`sspHdn,Ig4AZI:@.?+;Hgiltp.F-HW3?(huc9>-P34;C`[1PIf:C3g^]L4*k`&8Ca'V66kjR]ir9I[?W;/LKJCk
%co!FM$qo(]Je7bK=^O':IcJ-K?BjYGo]H<nppK!m%aoMg-l+n_gQN;o1^m#/qJn;-PUPe@+&4+Si2amOZm#<04]U6Q?T3b:.@0:Z
%Rp%YL1O=8+ZESB!dk>G_Y=gi\(u3<7_6&dA4i@+?34IE]M89#.0lb9jLnnh=\,CkFCn2'?6=J9iH&#752#8eTG2(Yq\I^AE=aeH)
%m4,<+I%sPh0"](?IKkc4=C/NpW*M`I>.m`O_BYGBqH^5nCKNmI6/!S5MX<BE*kuu+C/t0tKO\2SW0aB9okeD8)5A9Gl$N+4WVCWm
%aOU]/Tsscl4iMJ7drnAdRAUEAiDQU]/[De_:2Yb/QKQEN<$+'Y0GiE.kfP4'72H7O>T(d%UUCDG+)I`GHrVA5Rb?G:X_^hLh0o2Y
%O\"iG^#R`/X2MX;D'QZ4oZGq2q$W2Fl-l,Sq7NtTQq0%de\n3XlK%'hdE@hWarPm-jW;*NhrPVtoCZJ*IO,UW?a>O,e"sTC@eo[:
%'^JruSYKQ>5H#p&^MLR9e)8--#(A^.3M134n6t8br0_VMdk?>Z9$uW=-Epf_I/:8Q+-r56f:=RK^"<%%MgS5<ma_dDH:/F=]e=3]
%f)kc:Eo.^Vpoll9Kg/5@a'WcCe&lb0H3Vpd/gXG3nDu*rRQK2.\3Dh.e(PsWhoV+OB,gW2OD8?j-gOM%Yca*qF.&]k%DSLpfCb[f
%gY\=eK+EGo/$7]72oo(CN<ciD<[CA"bM7Jkrl]b/fC*mccd]M\ZYV^g2"E;k)X37Sj4)bkk!Er5rDX#I07V]dI^8bmHaE?Z+hQVi
%4qjn-GoBLAdD0L35&mK5pP]2;qrGYlqW1%*q=SO.rhT)4[U5A=mBcJ0n+E6iH@"VSZG"D'!nm+'-lQ*1I`#.[o_puWKjUH/5W\LX
%.-oD6!b->g?N[?%qk!o(0Ccu%S#E'V/,3]E,U1kaN@+VdoS%(.4A9M%l$)Sl;CBF"Ms6dlH';(3S@ngoGr<3^s*SIap@d`gqP4!8
%ID8oiHhm&7.4qp*W7W>2Dcj:fK&Yeg[oB2IgWht*m2amRIc2JLHN%Z#FlsmN^&7Sui2lA-F,.3oUg<cgCZGEeIU[H3eSpn?Win?[
%Ve[rdRF5paO(pY>O5%cmd!Xg=]YDRb?Z$p6^#.JW=Z)bm#OT0VSqF/Yk,Y8JCNZbMg4)&2"8_r,RU5aFI)t^jpQhJ^FSTM$8=-H4
%CWG+AhAE4]@8C+@pHE"UR="NDlH\!ZVsVFYC3iCbfhH1?p!oCsV<aAXSt+!\XFE(4l%=WU:;nuJrZ[?t=(6VI>>NJ\ZoTpCI.]@Z
%aBk=^GT3&=il14!;EDi4[ds(>>[lgamC1$_:%'NFlr:TYK_=3`:\\cj[p4")?hWT-H1b`ijjqDCf!1>b()(bIT/IASCY?VD'7KO7
%Z/@l#?@734@4ta:<-K#!0?P@L.m'Z:`7+[eA7G5V>WT-5nbFB6rc.+:,'gl9P1[8r4\r#Aj#7:Hkl_<&^@`a[[*S,m[J9*2_Hr`3
%S8bj97`'S!?mNCTq'rXpT(ni..ZfipM<Be`:1ASIohj_f`Uhj&bGr">88g]:-8H\*Y7`pTN@0S<n[FjA<t"\^M7o\\Ht%T=SP%uA
%Kr`/NMq+*2nY3^`G]TE*,u41Ebf%'gp,m?Br]6Bj>?fiR]YAcALXgd"HgW.C^F=Y+Ho\Oa'%[pIVhsEfqNJilEBBf&X8/m9rM'-<
%;;$?k/Q"T%mO#X_0#&]9C\k*B`1GkXS$/_#jqcG;Mf['cDpRTI1G@7gp#a,X3VC2FRPV='$</foIGK96k8l6-cY[N"5L++!q9S20
%2VrkObM8YYcK.7YRr`qKp<%IPO0=T+Nf")(ge%<9FmcnbEAmPdKn;Lcb&_W*VhqIblO$U>ZaH^WQ-Q(Rb'a0:>lE=2_eN@JkP"i/
%C#d>5UA<edI\h.73PU#X^REc5GOE,OBWTLk'u)d/m*!u)r6(;-n)q$4YE.gQSZ96rr8mnKq;[NSbk\TKce%@;c*&\CJ+DlGoDZ#P
%Qk+(1/+[-@rNB&BI.\b+2r@k6h*.5gH?&OeBe=E'AG,Q^h%OpHs6C=KEF*qMID#FMA:)(_G`p0`92Ak3WV%VDX-_D$PI9QE-^Vs"
%h'X:'/rlS!S+@_ng`5\<4h:U@Cd4o.G*<;jXnHh7Amt5s@=DXm^%?;147oQ]Ft9u3nEb+6HQfNJS1a0b]t%?,fRLW@E9\]U0"dZh
%]j:D<^AkW<r*$BB^0Z4J?Du`q.Z9.XD_<Zu(Z-bj(G#/Ie!\rogcX.O/A<[3QD'bd?2J)\n_ie_Fn'9fmJ5c=2nR\"^039.DZf=C
%@PrM#>\pUI>V7Td0@uQAK8m?5k/F7ZdajniO%\a9R^oeLFBVp1rj_o9l*@[$?i&Ql4'9)!hlSM2np=G2Xo"G<cl+NR5>NgXDnNR&
%[V'M25QC#WQ?R@RDjM!M7P:<5:D]?^Ie4#k`Rje\E]L8UbH:F9gr`MU.'.5q<f^=PI"$G(`TLiRAbTE;\T44Q0<Vs9S[i#$;G6A[
%Pd\oBR[%f&f6Y#irO2PZ\bKV4WVn:CmHKO1k5Eb1`fo?FS&LiroNa'Dr:ISeIscQLqXi`\X*4/EF_0\.e#MieY#`#<c!@Mb^Sj)l
%LMPT6lK,k:`i;8T>ZgrNi$MN0F!hGsZaP6=T3fufH\ZC_enZAYG+,tig/4P(^\7*EZ*@@)@dL0rY4"$qkGi1hlg"r5X6\'nH>5Tc
%q!E*M^O/sa^T]m?lX)h^*j"6H:[Zfg\*ql.CAPh6dU'R=-XY`\Z'sbQ`U[U2,6."$dbd9=Pq9\QQ8dr4)p^Fn:JS&Ogu>uSO_MT,
%]Q(=31,e!]^](kHc-b8?G5V/>?!^8h;iUDEHhE*SkLA+cj*C=W2LDE0^G.:I$5I=aHcp]57ahiK2RMYF.sK^=Y9%B?2+Q9$[7j;q
%^,j!T(VZ/4])I(k<SstHPkG"!kBHdWVo`5X(n<Y`\,?/eZ'%8P)Rd3I`Q2.gcAc<]rS%&-4aCahc/6+pguXY*eX.;Xbc:L:RBpS@
%I^_@N^4#jRAHqUp1sMofUhQsf5AaQ[V))cOAhjbFq8Ug><ER"9X`%uN*W,*MoF'F(^:^aml&AX=m,[f]^+M(*m;Ljn7H`o*drrBh
%@Lbo<h9Yt:SVq@`hC1?t:Ru)0#Fg@@9D@,?=*8^OP;_7kgKTGNC&d9rDuSssmchReZ'Se0W-`H+m[e]2Jg\q:h.LMm:J:05Ci8Ct
%&n&F[lu'NFmcp:<ZfbJiB'[Qf\[H']G&pm@lr%oj/Ggm2<P3^m[+4`tb@g,2]_1W&k%j57nQfSlRI>T0H1pXfrKl^50A^93Da,hV
%4?rK,$I>n.T'S\F^UB*g[GCf$p@IYDVsVD#VgI0"mglW/CtD>Q`>@k+RJRfTLQ,(_Np?H#(Og6Rqk?s^]pB[.],ND%Nj86IFEo&"
%Z<4Z@V\5Udh5:\]6RfEAI!;'k]Y1sLI9lF4dS%pS^S\\'m7M]>Xu=_#e%>59HD@\OeRXhu:Q8%?cYmGk>HQMFS*Smgm$"pG@b*P#
%Ch@#r-'R"XQZoEFrQE%AcGnjeBd`:3?.h7<Qq6V/SlX_0Q7fp1F'BT-?LBMW5L3UW[@4^ac'@J(f"1a(GAlRSX4dHY:cR,+[^sn3
%V0`$,=4uWRrN!DO456qg:Wp4oCM3P!H`<9qYC#FS$CST2hJVBH8m=N-]cG>#^-4]lqt0aQ,1taZ55NX]J,]H=`BHsV4><A'<dr_=
%]ZWOSddc+.rcBU^1k0`>iTn=;QFJp,/u:?/BBLT>i+mWhEOb;hhArK[SI^LBf)4K8jk7]@;=Yj=Fd2j+l:2rYg1s49G4(]WofI[&
%GjiVlp@2/KF6cQ[dnT_!S#afI3V&IPTUIeuX7j]Xo#@q\o"t1eS6WQC02=!PkH@Z?K#R?1h2RWae'CN7os;Tla43!?m)?<;j3?\\
%ZeO'Up%d(R`Vb#X_uAfoqpUmMc5UD#pD;EDkM!nkh=e\(c/R%#bE__!$.W:XDK!fRhn'8;Q]7L%S[\<n:LE!#XY+P*]tHWY]Nb@*
%`-I^JFFO2Vdg+]WTC>K4ml0_+0A`>'D:[QFG#n/U[%$4,&,XB6k7>PXf@qBKSei"]1CL&R+$X)`[m)0&,o<8D:KrUDf:U@GSE<&d
%cH=FFe$nL)+!oe$HnIETc``Mpk;ualbF3KPG^HprA]<G?J&tZtq_+R+ZjQer^$CaYMjG6Hrqi&&Vga!]ps&K_amnoo7IfC4](,Fh
%Uu3<&/teZMBiFn*W9s'L7=4FqC[k+bD%nK:+'&I7[;#lccekXQEb=Xu`d%0YE-$-s[XE4Ho?t-+FCXe5k]H@[(?XJ146'%XlgB"m
%EcG0pD_t)Ka-EdTS+Fl8V<VJ1*Rh4cEFJ>%l,V>sfD=mko6YD\>eIhmVO[PGf=G=<[e%Kj^M@UNAaXDH]CPOGBr1B'cb6J6/UL.@
%SL*Z5[BQ>gYH9h,<pfQ1j0EiP^&>%8X%2dSj3t%^p"F0?2,s1lrN^9g]A3#@)@7W+1gVLn>r8^U3kNY%KcBL\D+AYp>mOE'qb0VJ
%"9R$iZt;ed>J8IV8ti)'+9/_5f.ZUNf5/A)+bc90hsZ2iV_h@.^pppS]cQqX3Qe+lTS(sB.-ITJgg]AN5sV"*l@/%ODUcJmLV7`=
%9id'c%HVdlJpT)Ri6oG]2L!\1XKGXa.&(t%8eOpI'&4PdH;BKq3PX7Y%'D6U_2m5Zj9P.M@q3<]V_,YeoG`FkIj(eJ8biu4hq:*'
%$^uY+2Zfgu(FX*P=D7sk4@J(+IbY*,V<Oa='u-cAP#b+;Xt%ltr$MD6n!no#_RS9pEo&&F_qufc-PcQcelM'IaBGVo6*Z*X&2Ipm
%[sk<VPc?R4,.*Cg"Y'uiVuenMX+gcm!i8:/YC*25dsOA7C=fZ@bG>7L;f1O-(I7Ir2+munU;CTgX?KHR)lTpq6j/dD9"TD1G>fda
%1eb%_.(R\QeV>^2E_U3!r_faNUrAJ%cPjUD^^ZX/giBNZQ?GaoVEJ^Z.NJtD8CL7jX.+a!55&oI]k@LXO<eM/03.IN;fNRjT_.$=
%HpAP1T`.C?SMAR%g0uBF/^JDG>1HDgQ*W,V#IS<KE7_$gJh48NHB>R^I<CVc=YtcX%<cEGanTus4C/A`0acW'8V#&M]5(KNX+%%l
%1[12g-sOUhM2t?r)1C@7B'e66T;%/`.&,2a240q>XkGhPSiXAm%1.2!`^qN2dbQQVLNKDE1!;on!N=*.N`kZ%eA,ITec)n8Xn2P0
%$Dm,`3,T@e1tnf_[;'\`GXKs`8[oP)M)4+<h@Rj7bY(GF"ue>IZT?fC^FenLgN=qL9+<eh:eB.IKbcA`#RJ#+3rT55@le]9^XJ!J
%Z&`"8N*a/,)SPkX`MPl8rq,!p$@O<8eX-FP#343o>3#Tm\?o`M]anrk]t<Sq.joO]G01sl[Co?k$u-i">hH(m^d*+PO[5f:)B)!r
%#AUW@.<hc@*1.\GN\^'3ph&g&(@K"'X??j'C7bd'pd^)\<c`T>7P!(&CJ;6@hPHqO=j+K&GQO_2;A?(.pMiEDoXc_9`u4VMKgtI`
%Drpqi60QZ)1;-PclJ6_,-K3%j)U)kbF*nOsSNU9HZZ4LDje0RL'Ku=6bfeshC7d<@KX:-;pU&id"8;2R=oc%@gh\8E[<=N*jno()
%eU%Jg3YOIOKejLBrqG=NVJRX;+Oq(u0:k#ffL2q?<AAHJQI^?N$5r35;6pHJXO2dLQ7A6s0s-PdDBT><k]P\<[X^<P+V4SdDNQ/L
%K3l]uYrhmQYN%(#mOGeZ_&!L,r:U*hDjdE@7tp*+6t&>bYIca_;"CJM;dVh*WY+n2P+RMBVNB.T]X<f*+8GQMs8K3]FJS1(mNmg?
%a^BA,"1c";JsQP=ps5X!?3&'U0YRCD-beigm8+q4l$d>f'3*NQX1.1uF#/Mgg_nhHIYWq+?KTe#q?.<`^^oWqDJnaEo4;YG(mo"i
%m5JfZ=h`031HI9s$Ls<BkcH)O?F>Fe^L3i+jA>0O\Bq""eWUE1p;@4!ZFRM[FS;i^e9Ek)O&?fhj_CC<YM]EZpih*";>Usp8p%!R
%.Vn'1h#1P@:k+Zem6S+YJjbfWlL\jM<31![<-J2*/FmXGirc1$K<[VRoC8/W^Yr82,F;:?*CU@(?MW,\3G9C)(HP*$A4(Q99c@>d
%C+IIXb1fQun_2dR,n3r+$q!mUQ=W.\%3K[f1WTe9r)qLcHV=lEf+9ZBh69FZgN6DafLO!0PHLf6laj)C>oc`qI#nHKmhu727ass1
%BF1UHh-2`VaKBehdW%rJKNp0ER@^Al+Kp;68OEa"U>e#M:$N3f(Y'Hk"bFT'bkIj$RbU(>j5SK,$a4_2*F3gXK+>?3+js7gTF@[Y
%\Z4U#M<^\37Ih\OEj_^@!_]i/*;lm^MT[oA:q2nD[Ql#P\/Bn.,"NE7J9#X``C8bnl]oC'dMS]i7#`I2.SAH8Xe]gu7'L"G"2P8!
%X!^mf#Ts;*W95F+a)PdD&aCZ"dr^kRNf`9B!\;49PA4=%NVZLH&!o$/"#ObRgqfH_D-44oIfN4-9LBCpG1*akaUntr8_5(?i@**8
%PB:)#'2Xq!m2@7^Ojn58Jj;\XVKtWt!bs"j$bDj)*(Wl39Rrj`3@"usU\ULG%r'ISgB.d?1`Pm5enrhZ<6top%:(/37u)762JpL?
%?/+S-Qg6n\!:E*YNp32[nH:[E;9])U,8;;$Kpi=$>usF1d#:C4V1^lfoJs05)`npkGdRt&a<WO*M9Am^9?[m-B94_Y<['gQ2$1q!
%(/!VgF\=%pUZqaa9u,uU_&,^"@@85a_\#^UhBG,-'MsHfe$UUb@W.PDgTr?t&o-B-+dZeUfPdU$$'a["OeB!,_X*D8_b)1&Udd[V
%AqQi+-u7Y%)5mj]63,ib,O3W@/M7NgWaf-L<JRV:VPTCc#$?6M@(EFX&q/C:Zqo:a(=TXh-#m`al$8^LTP+aN%pFd+$7K##BEC4e
%cnS?HSd="O2Dk[?#aW[=4!p2(JTs"b1.&Ag.S(h*ZqO=sQdXTB%Aq5lO:=\0mY#]4F(pIS$B/Z,:(=%Q)EPr5W.]6I6XYTKe"C7S
%H3S''&DX+(3`U_+k=JB/LcF$)qU\)hD4'Ml\/gGbTIi6#VkS`48(C$L*E,`pVCO)VJcnLM+AoMC#c364NiJ?Y*Khg">)/tBS>o--
%?sHrlPisC/S$43[9:D`Odh5"^)PF"?/hJeE604,ZDH^.6V!'F^4eAC[B)",/)JG\B:Gjt15`,>f=4bq)e1mVe].SZ-s*L=?fe@*,
%:c@T75d<+KT_bTH&?Xu$hi6p_O=Y7/k'KuiB\hUmami.d%e'Mc"-J=p!t(MW5[rRA"I/Fjg19^9-pfW#\.f!_>jm1o3ttp&ROBAj
%1`[T_\QT&G3[c7]Sq;\dAeSTjJA?T``&]0"dis@-AuRW0=dNCmWn1W?3%`L51q]UnXs;PNUV!CR1-J`IDZl:1e'nd5RFj3)a=n%*
%LBrRq9(`a\#%J"j6W>Xg17]['1f$uhoK4ii5d'.Y@O2Z*M31%qZr@rTX]mRZ2$')rf7Qm?NQ>K"<)Y.s":R0O/tg,?\>DPs#jt;]
%-)#3]%K&[9\6(\+S7!4&2Zels"\]NL][q7A)^0#ocmVU/-`8r=#U/+G-W(pKPU&S<R&7Yu?RRKmGcd>h!jNK@O=Vm)2Gd;S==K"4
%F>\SGa&.sT<a6/I#7V$X(I;>sD%^T:jdhr_\Q!Kj/HKS&g0pAEpWB2`Zaf$nE8'k%/THKp2/o(oU.ZMR&AXY+*7"b3#b#D0UmLY#
%-IJPs<*72(@W*I$Po#;Db76]V7S'G.o:bne79Y+uZdQg5:=;0>H7CPk/$O<18IO,cTeD")lZfEUJD_]'&Hdrb$_S"'7b(TGcsVM<
%&9+3mNAtVaApRhh*(PiX1;O_DcqC)?3DtrPj(Q.S`K.:B"YL;I[:MWa=>61n;,AAD>9qP3\H0pG+u)MW,c1k-@cHKgk+g'e+[pKm
%'M-S5Hqoli(5?>g8I[LE-JD"pfHLI*@bFjmK]4*b:+e+Q6>[]g0md"/B=3MZrpI@`8="gu\O"`>,n80S";'+8;[uS+iSAK&rTH=g
%,(c"CgL>e_#jO[TL+A4q.$,CD16e_,Nl[CEBYGk9YnsdY]R3m"Bh;]H24-$!qjO?ID5nbPH&@2uD#m'2PY<2B"l-BnaO-uN0;II^
%(lDE8N3FWc?*R]?AL%m+aFjOl4\*^*OFuk!66-[Q&gO*7C8!W4>F/l031PW^$f77DHTfUCTFErjJEA<Gf][+)-pkA!L(8:Wnon.=
%RL1lY#hgVK/>4?UQO_9^X(7;C=pB/+QKK#/`p8_ZO;8/qCe:k$W@j;q_Q&fN<_R!*"IO.lkQ,LY@=`9R:pa1]E<k)p5W'@U9.3Tk
%8[3A=7$(o<2QRJ>@BuVY%kj0Dj0S6J\I4[CW$'O/_(l$WN4K"P'`uFLL^Tu<!5J`jU8rbUB]?sg)INlY*,$?inXRpC.8@`QP6&\B
%0q8a8!]."I)'-jW_<O9KU2j[%F#>.s:qHcSW&I%1rC4b[qMjbToc'&BkZ>fA3O'ak%a;C^Op_&A%ZORU5a@p0-QO@Diej'i3"nOZ
%7#3W2?@8^./ieo1I7[m7L$9UZRUK?fJ>1I#YX:*1&l9:TLU/b_OI`aE/J=l>@\6;Y(8<j-d)!4@'SjE!D7PO#08Cf5F"lL0m`/I8
%qKM6CV?QD"a4ctpk\M5jQ=B%ZLr'@s9O*P_eSGV*@Dla./F`YTXUuZj%)#6$OpL@:NM;3D9@H$CApkf]Ygs@7#kWfnOFjT6apNZr
%X!Er4FLWNFmOt7X`!jnC7#&a>@N[?.Q1L_;*kMUJLo*u"1m_<,>phcOf0jGFU(ar/2Ka^98l`iS=2i,jW`F'e*R!_EX)>a1Nk#(_
%?D7+?RO`,W1Rt9/idu6If*E#].Y(d-@;1j1_eLL:EXF,36G)ni;;9GDD&_:6<2>B0$R#T=)gk/B-mSjOLJ3*<''@#D#BSJ#pdi#&
%Eghr</Rf0d>cOrJoo`<"NhLL0f"8Gu'nS-A#A\nEehEi9'G8]nND58.2?[H9EG^)>1+u6'O2>mZ-*311Os2lQmmZZ>YIgi;TRq'K
%NY>tXL:6>M)AP,36QM/aUMA/hE&%rqWGU$O72SI8)_HYmh9[?]MI>a%bL?ZV%KPGGRK<a#fOKZ73;&:COJZ[=O]DN(%!%/]da:`T
%s,1XQ84KD7K6[MZY*9QCi\b!i?3E5"+i[*5b2M]/M^$GEqeo+K>\%e[#t\eqW$?hfXDOC-80r2:@##:]!Kn156o7F*A44sAmP&Vl
%#'((k-D;i0Kfi!?C1Kk)U5a^L?3@hJf+UD7Ct0<E(QaF]#pe"-759h6V%H5ms*>[rQXi7?oQiT5)DJY#OT'(ER3`)P-\nmk!9+2(
%<_<oj;`bPMX_%j3"dRcZkjtN"YW6)ZKGk_kO_A5ImW3&<0QHD<#`.nP6LbX!&KtV:<1t;O::DVm7g!.B2$\K!VSUVK=(9NTFbj8E
%6)jraF%cT;7!CeK(q?4^+Z`j&O?aNs8;*^Vf)cp?TgjcI,ha*&-_Q6aX<H`aSrW4F`CgK7637Iu;+Z_=DHXp7@d72Q:k<-9;&PsV
%Tb_$g%+FaFa6YOA$3k03E:Sbl[q'ddXiSr@NqHSnK8rS@08'L5E7pBaffBR>;^G:CCpf?Ug'UZ`C+Fg^fiBLQ>i(L@'p`_@&r$#G
%*eZc;"Qd*_!@6FMFKIpe0_'0']46C3a!He,OrQo+l![['Ogg0j;h-D(]iNPb"OKb%)I7!45Z!&DTHT2m#aGtKd\-e5\$1=aX%(Og
%$o'?X5*E'7G9bc:\HkXik5m-7T8P+%58PdUG>u/Mq!WA68aEV@S=<&TP9Y%;]2ul\:)qh''u0[^Et](dNJG=06m(PD`ZIE)nIR<4
%lNRRLkmog;TuK5X!Ci+%QoG=!FGs.?gfT=[*\-sSe-Cr=DVkOHIEk_Q7&]D>;Q)``)rZ>T(tZT;g\j0(a):_U7%jL=#Y&s:i_Q`l
%U2Oi]B*s"o)[8fQg+8'm+bi?"\8VFV_a\/PU]!8Z5'9$5<29sc"'g6(ZU>MP]VQML@U"'Y,jaKH.,2ZRMW;<i6G:5oSo!Qb2I6p:
%+*!hMfBt+&!7%AhNc6sp1MdJ,2*+2oR"("-M[gu2C66,D_o$.i97lf3A^^?;!S&n;dt86mQ)0[]G*jsR20,W<;9.'>78:t1"V`-'
%F"(RF`0V5Nf=#sE'JiH%6<rpY_7-4C=o"c?cn2,G.o5Kt/>W,teGLtp((?OGY%et\G*#MOlHh:E@r`>6;RD/L3O0YB.U%?*77V$i
%kbu!ff295EY!X*R?%X)tRBE?$n?kEjaKHt6"8C7I#aD9nc5rZ+GcQk"d1RZ<]"*YMAlM?tn1KP\VSZ>#F_mU"0l#2==#Cr[\&8<F
%qZ5*Wa,;h]"RZ\gLj0]c1ec;=&m3%KU1m0!fcl=-E`AbOk`D[>aUj9_V6`Ae`Ns?idOQ":9!E<+<iD?PZ<fMZmn*=?6i,sk4s7!p
%a&N8mikZ819r9_rjr:1JZB5-SE<Ht!bB-j2K4f<N@(fi0Zp^j0RWMHD9/E5`JcuggAPbiCOeG=)%<H_t8rJenBnf`H"GP>r.%sfm
%NO.1fRE*t[LFJm5i7aZ\-QLeg+<;e#3c6N;BUQ.,"._$:3k>B[fg`.`b]s>!BIY%b3FlOu[,rc'3ABlJ.Mu6\64O_Ui])hh#3.0A
%<C@9/jmE`eR_#7eOG1!K=c":/2Uas=>*`%@^+g@r%aJf"8Nj'Squ+bP&2uS)<elPqSX@2&($"7>cS@m']=:s2ZkY&nJ0Hj@@&W:f
%Zr#.I[A'B?&k,6A8Q78MJ<(D(&b?Jn5.ZHC3/lZ;KH;N^W?T^_0G9Y:(P8;l'@5tN<J5\d(=ser\]\B<SD_Nn*IdKK)]jP>6)$HF
%pH$u?A>"rm/m5g<al*5*L2b%sm/obTKkn;6a`+^VF0IL*=h9Nk;sDFrLrb0[@(mH%O$<(2IRF/KDjqU1K?b;*0tQ9O'3`;lEu#pf
%Vl8ahVLTkdg+%a5j`Wm-`p=IS?B.(VUMM>fEDFqNIp/q?5oH([L,-"q*]^#;B".<7Q(s2$#`q<2KMo+0i])#8ZMCQ!9uoYn8Sg#^
%?J<nN)0h+bZU?WG;;34!RA1$jR`Z`mk[d/'CmRn+724n2Q6MVak,u-:<m..p9Hlj7.WDgEAB-<9cq_D-Oe@dS#piOYV/b(t-1a3,
%Qo\Q2!8::@d%RRF<of:?Sq)R`(^Z,Z.!;jIK0goVhif5Q<K5'Aj/?Q/RN`QGJnq+%ob&\%8L$Om'\1;2*G#JsYZt827"Ra?,a=HD
%'h=\XQH`o!A9\[6jH5QO:/T+/!R(l?&qpT;lN]*kUmlHGeT"LMH=YLG_D!N6KN+I9\nhZr6:'m]6oQS*_bWtH_c6hGD[7(G)FG3o
%=3%!r\e0g]7`*1WJk#$K5[f3`6q4sOR(U3?,pjn;,NQ@i^a?uQ_cnfW:[?B7N>u,FLSf'qp.S?`\qNF]A32?lF9IGh(/V0uYdd6Q
%@D/tD3K93!n[8q_VAD&u*eZo+b[[:Y[XJ7o80sfqTa@Z0UK(f>#SH@]DA')qn4Eg`G=cVHY*hP^"eF>T\,scDjp5OV5[`tI'U8[e
%"O`L2k"615:tJCL1_?>tEj*nK"BHM`f#BN%6G4A%`QceX:Wad$6i4@lJ;)D,0!co`4afqM&Q9EAPW2A6*#rN7<6#G;Mmcj&n4=E.
%(GAlf*I>"@6ld*+#G.n#V897K`^>SL[2^Ye,]],C4ij0;,&2YB@)delI1?ZUWp*'9M9[7p0gn0D#4XmeZAdKSiJuU/8iXjS"SS5&
%n[IO;nP#kK3C\du@8<OXQIhgDYR77=3hi?GI'+^X3<V`-LL@(BW2NP9;4Wl96i'2&41LKNMqJR7i+Nt:KXL&hLg,OKE562S\q&d7
%5aKA]N)0q*cnKfK8YkH#Bhc_](pTt@$T,?uQOOpo//`Gl9Q.b$<*^))]kJt\JM&!M1hB5-FG/YJ^Q!"B@<(L0fIgI4@.eP2<X_Li
%4XhKOi[PT&W>J7)j$cagTH0q'\5M>E>%<BN.1-u5";E$C%k`RWXXt`md5tJ<1iJ%.33nI]JR=J%'sV'LARl\s9#PH%)P&$`#=uc-
%>bMc:$E4V6::<t=B<GGs^GB:BHH0]pF^/h#4!;W(!44&1"EQ@Q:I2mn6D>SH3]VXYQYJ?OK']:g62:\Q2*tU,6kN(E0(-60,1ao0
%N(b?]=`a6eb7q9Ej?>\)X@.Y,C'9cb/JQ6Ml]OoBf[tZc!H-n**ce%XHEF134=gi7W<>%R;-/t0P'mruSH?a\E"bo59GXEWJRDnL
%74q5#--;Db.+:a161YeE=catBG;6DRf#10+-mV8K.FD%5Pd>8Dr,#/9Zk\GA`F)0*<YM7'-OnfD^cVdCHIA7W,\hid/qc'Or/2-9
%j;?,'LaZQa&rOSrD(t$/Wg4eGR6lXK+..eRLUdG+C#!u9LBN=L#UlTS.$!oM/X]+cR)P%Ln.J;([n;uV.cI,'-(o(Jb+Li(*(<D>
%kqO'CDlHJZ`.DSIbjoke@`SnoBE[(3'qnY<AL%UCau:kgdhB'_1%B@b&d`Tq%F>BU,Y*QBN-3>*dIa-]X`'/:fB>4gN3d'be/Z_3
%e29*R5\WK\_4p-V=7:fIQj:tj,,.!@TnUp6]hf:k,sXpHO'kWrL.;_hZA\ccoKWg<>=(Xp,a8olPf6ejQH2DpR6)5>IX=7mJ\U[%
%ToD/#TG`qEoQL$'VP.GnQ0?tl3aNh?Ou6\WU]hQ&KJ9!a*iK]JZF(&l74?H'PB[^$Wg*SgM*;.+HP2m1ZO$TCF"tkW2,[*5&<`gJ
%RX)q9f0g!SLnZ]I\uY'm+i.RO8.[i@()9`#=sR@(L6)ckhGaJl-E;\k/g<^q>spOPTesq;CX,7=$RT)T76F"X=&$'d,(rY:L+T&V
%Au1j^$E/U3pRjaE%PEAT')Zt$a0@75T;]P8F&E+$A)H!8<fkZNbT`,JB&p4j)DKmDs7+1j^V"G/)ab>nOX3AHNo;%>J<D(l`S`+F
%5gb0F3"h=_"PY\B#d=7!LsZr6$mIGY9GeNMesQY-$MAF12V9"opS<2Xi;#n@$rSTY7)V64O%*V`35!U$'9;3(C3l0G>%COKpZ>Ha
%`YK^&&$D'5U5V-(O&-bOcep3\V%h%moML^,MDtl=?9fK/PKK5bO:VHS'FUaW^:L03=/-(TqJ8:MX]\U20Ole990i(_Fm(+Z*(@pq
%LX!nX]a7V'&^nKtdGQ5eF^__OLrJV'c:_6WH5RuDJtoV$_X*D@_b)1&UddU0fg9\K\Sg*=hsC?o1F*WG!>`3hLdcX;raD"+B.O'P
%QclXQ*psB6j_@A>mRN`N'EkO*J.+QnD)%qB6BOfXabA_n*=''jKR,XXOD*]gRA,Fqf:IXD6=cd>*B2JJ)iU['kpF)R5X=k,Rn$aV
%)0Ka<9rN`Ogd>P3G]Ud;%A,Qg0N8mM/aF@#EXg:Xd'lTLFVE;B3qUf0K"<0t<4@BuFbcfIg5]p5ZlN$mBcD:EVd1K`itI2iN"XN\
%RiZ&U+o(,C[)<6h0JA?DNWMg*1f]2i,%YtTlOfE\qeh#,*/9-p$Y`JrL.0"0)2`/en5:0!6r@#,3W&k?#4EFm+M?RPVSR$lWmd.Y
%6?,%mpZpLi:bRT7[;[t[POcaSKJ[(\a)l;8-9G64?=2hlVb>''Rn,dr7iD8Ibp>bPEm59*I3qEu)BFpZXpG_+E56>ATQt6rpr)h>
%Z!%?CA.fcKV^T+6+Nj)GY<]0j=GHlFZq)=93@]tDeh*6Gg"Co_3j(<4b4,OBf/1$_D4:[YEg2F4;JCbn.$9WbbQta2c0g6AO86-q
%WgZmC]JLGBcS\.mQ9cCV7#'hQC6Ep#U[/!6.TI=d6UF+C,a8onPf?klQ:u\`i-4W-Yj_u2c"&cNkr([QK#SBrVhbs1MSjsZ$E0qd
%a%;@CS4m0^dR?\QO!Gn^&4!m='?6361u(gWZ+5UsEhjfjaMBV8/_>t9"<;Hg"ppR392T6@"p+8R.#QV6H'Y/oned78EB5^JnL?k3
%H\gra\,UsPC'2Y!Oqudk+EZ(d7>u&*4TQhOJ.CF:k6S#C',d(lB>ueK6%XgpOD*9IU=)@;o1C;4F7LR['Am+41lOVp:2f^?@Qd)/
%0^)+dfq^#_28&+(4sE<]_$o8<b,C>^fcHl6eB#*(S3.Q)ZLGd@*N!Z.aQ-Fa&X9@+B]'?S,)WrT@g%XG!s_GM5clN=ZPR;=i2D3E
%*j,s*`MqM<FG.MW3@(YWU\ULG5A!mMDhea*(]fXm7>\l9;<%3c/L$&b2a+TJ(8<-8dH!l!,[*gX95+RN`ToB]G(F%W6?<8G&2,(5
%MfWtW`*h:IeB=P;6mG4,n`)D[kX:Z1#e=K4)oLYl%0dahEZLF1(nr)+6Rm;Sd$n]l<XEELLVtMa?j`tO$Gbn&2/Y7?T$a6H$s1k_
%;:?!l5^MK:e8thMRZ>`kdpZsaU8(m<7>DRLMKWtc7M?O(O;$OtU(SP[i->rgNJO/e(/POZH7W6oJAP7o]=:[/V!'FVNA=sF,[/7C
%SkQ:Nh6hA+-0iBPTQLhmm[?KfSa`XG;hd^=74?_Xr49*lnu*k%[L;bK8/=-So0"OPr%hWnD^"Y$4EYE/!KkU8a5m?J,g3#(bu<,3
%C%)j)&[H6pG(s>/K\4M<Q9^h$.WSC`7b/["3_ebhbOh4HYt*;%Gc2V,Ni,op1@=(D84Z:/KMmu0dO8JY@YqDkqleLW:u33$\7Nha
%0H[";2i]*N30eL)r10Sg\[[#YUXPn,%`iYR[B),uCLH>EibZ9Sekj;2)3g7SA0=g(V3=PX_qZY7C2:[I,Uap-67LGOELaKjai''1
%q3T9Dkj[5nahl(LP?otXl/_gM:I+Lc2-eTG:kWqK*\7=F98>&RUtbNdWJkSl@k(r-GSN?dMhHBoP`]Zj.!*oYH@L=0*?.$K1C5Ro
%TTC&uV.9tQETXiDo2mKi>`7K.L]M)*;W1'@\fm_lME7mdJ;DkM5T%%Z;!iqWoqqt^2*u09<eS=D%`25a3[p5SaeL!QRn_]NntNg<
%aBa/*GR4\uOAJQQ:`/Aq>:/ml++F5]B.BL8@@,("\o,pW+M?H"o)t;Z5@>(XLmiR.[-FlB%TUF;7**5t)Y=M#&[gg+q.0j92;g#Y
%&LtUC8^kVCMNA_d'h#o!R.&#=T](5A,>]HVW;&%H"^EJs-3I`iJ.h>(ndgaD_+X6=_\a@-nN4!'&!XU9H=ET<Io,@Nd(93ilq'<6
%KOH7H$c#Dp@YUGlAj:b9*f%7hYrP((p<L$&]>K#[3KdloQu@An0KIl(R;Y3NVt#]9FH+MO6HB57CTr4R!<m,Q@!fBqM@1^)kS0_R
%d!S@5FI6u93Ch8Kia)/UR+>:Y]MXSMGYH*")ajrlTokTAMG#,f=O".1i\M;aTaEE,*`AL30)jH((]W4I0ah6N!Z*`,N8KITJkTh8
%iZDN,s4rIpMWU$aKpE,i2G@?NFkRUlH7('I>sgm)gcLP=Sq3j!&SqKb-$%cC/^V=hUGrRfE%=%%%]m0K3s^Q5E_&+T*6n5RHm6!R
%E6m9[4`Q:qWNUrPTlj9T%`oRoN66rQbI-Qd[Vk%"&,%7\dcm071?f3EI"2T2FsRh=D5r?`$Ce$sNRIg4Ml4NNEW;Fpre/mJi)EI+
%/6@hj:FM+T.s0NI"S#(N/4b<A&P`;:"?%E35pYI4mSG`T9s_2:7H=!;$sQ]GAYH#7ML(9o6-UPiC,maoe8eNfUud]RN[P!"hK_&&
%]VC-tcYIW.=+p(K%ZcklU*_LTd/3K)<6'5S;\:L9eD)@Qa&@&'QqToSJWDghlViOj+U`T!ZG8WJEWcpg@+f(#gTZkYQmX(SY0%NX
%6;Y]Y;6D)WL"F_HhSKUK+Np-]q-MR24H,2eBDsSdE^_BZiBm_8$=KHW\u(?56E3[R3a)_NB-]k*B$pb*)kdJmDBTgo)]FFIC'g'f
%Ul_6c=L%)M82uKg6T<57*AYQiO\nHQ>TD_)LLbi]OGaml0,>dVIZ\UQ>F_]"BV(r+>s/37!Pt5H+O/B[%Yu)E/[.KNL(Zk,K18f[
%mR8U7XTZ_doF[#gf2g#,^(d=TF%r?I&W3NK;*qEf(h9S$9`Ae*]kN33-`;`A/$ptp[V^^8l^sX2)'NUd*Mj:#`lE:co6q<?NWkX'
%/u!U&ZQ^3_3M*"eFV6+O8KC+g'_PSh&^QJ]1qL+G<['gQ2%iO'QAS&\3b@l+21V7I1"ck>(P?=e%TJ(Qod+:Caq@re:I#M49QkC-
%p2!)c/AorH(.-Aeae;hA/0,?QEhro]F:q-k4@N!@W80-h)A:6"`(D:',Xt*Ld8FtKZYmUt5(!3_:*!j*P"i*KjAFt`?3ee>WL`2[
%9]?S=ETj8cm[_4Jp`N?IK/3X$VtYJ!(j6M!fcq(4<$bVg>Dc76MKc^Bgf-ZNLC+[U*6!Kc$A508MMGDXEpt(;FOYDoM@>V?WRt>k
%L18d]hJ$2[;7q?!9l!^"(qJNUa4]_l?Qd/IH"(8'LXdi$S6=a)-2lS.[CEJqla*isVp(s9S,FCKoS6JF?k=7:V(%B.T0I.5"$@UE
%lhbY"Nhr_br;W\HV1/G&#)mPu=4E(Z#@;@=O1#=(#MsLhaetD?]Zn_;LQ2WP7Lg"=#EB?(a,R$LE81^*&Vl@%AoZJ=j+s"cefknN
%e+!UFo"s(o!#[c8[X%?i6c%Y6?&cmREY,)m0$Y-*3hk)O>lpOU)D%Y=A$"@eq`a_>L5BPVB7n2@$lVMMecQ-d%jSa`3?YX_it;#@
%7)Oi(ZoYh8a%8;r\PeNaD!TfL8+&?opZnb1\Q;hL"&#dA5rsErD1UOM,bQ%dA.DI!^>ZZ3,#k;*o^U?22&qeH4@f!+q&-Q@2j#Hb
%2kud'OHQK$a(%73;D8b&Do6\Wm71r:Eo-1rkl41-PEWpRTIC4Zno49W*.1W2gBTP7T+,?-,>1LNXGPg'XPo0h?-U9(&VE3<3CNHQ
%e]HJb%O.Xqqo;YElEuQ\aDpHEqD)fLj,IJ]J67\*-2F-pBHn'Cck_R7j@giDA`JD[9M6p<JjKMaPYrEb(%Tg*NPBg[%(V)uB+/0C
%_V9DG[U']BH&<MbLbh@0dOg5cV\./T"EP-6m<_F'A*JkQRYf3pMHDAt1(o!L@q2<)&$#3%-qK+5j6"<R84\JcEdEGV3*0B@)9E>J
%0NH+kj5d!S5#mBp")JqO3&t7Eb6[)pZW'F[D;?O=/+djK;n"&DUJF_*?'Yc(?ojqdAXOTf'PgYq7g]lS*6n4'3r_-WE-,@O9;^8`
%,eUD/U!FtqUkF.h'h)c!VrJZ]\RI%E7"R7#6`36`:o)[=EJ>'?OfO<j-)r1(?:9\s]o[,l6@fUf5U5eN+U[?&PGu(XO&s\c&2HR*
%mM/RQ_aB3d_!#%(#/Z'8.+H)PcpNVqFbB]t/0oMZTKZm4F;>8[DdsqB4OK4fi;V31OFK8!9=0CjdW"Di9H,("Bq(-5P#28KUJY:t
%[D>RF&"l5W!,mf0+Zt6Hf4kK=ZBLSk@,A+I$Q!Km]+aJkODM*\RdWiDOR_q'\/M_T6D9mUn6&m:0*gb$G;p3H$+01g.T9%+O@q"D
%"8g07'60+r+Pi^b)T\k7:WO3-F/W.k<6LA^9Hcc[ZqM5A']o$^('t]*+[I8+&k],=MW;?l9BNGSj$J/2iTej4Wt'ERR:ce=StbkW
%nIS,[dnK:'OYT<G``/UV,?-H>99G,W:N;Wb,uCJ&7Y8do#d[#F%P*[7O;\G%A4sm=k.5-qL_i'<k=-!0UV</!dg,_/i+okaH#+m!
%dHtsj(8i.H%N`mF<-FD!M\!N5+G61OE2dIeTdi56",%F)8+'J9;6+-=*%FK9Eg4cXaQZ>f5S:;-O58N'\A50S=dD]4>_J:;q8*1n
%aKAh\lJNZV&D.-Aj(KB>X6@2m<&a;7*`FDd)_^I)`M=!`,J'HuC-.#8D$qcDG$%qHm&3rVfcc'4ZGE-Z#8Ds9`nUMUS_`>iiSt>7
%#h8.e"1nVln\jc;A0U<s`=+^L$nI1Ah'K7]LtEKR1\!1><6aLOJT_///Rtc[!'2H]@$,d`9_?h.&])XOR>N4_`s4jZ6:i#@#6U\s
%+[]d_0JMCBhEh#@Nt_6Q_E^cR?1F4I8#J)(KM^sUE0QIQ-:on"#lakj]t9Gu8$]5l.Zh+W@=R,iAK7u)0q0a^-,`/,]`$pS*k?$f
%.M*_Q!kWfJ9q_U.qJUY=N:?<:)-%7Z#]C+JlN+$98*3;u:CZ?r]88uTpf'O$?G<,[-_l#=I^jc7$HSmP4lZRS^!$TD[skiX^[60e
%r"/6s,aB?ANUu^E`2BK\qAgI`]S6c1+&oAl,f^<lSGHWS:eP6B5+i(EUrV5hdcoe5"atXkN]Gl\TW;A_rc3h5$ARB.EKAo3jW=%U
%5MXFhp:=[]]mSiW'oq02aY#1CEi;9/pScZgEf/9b[&8=;-qWuhH\(=#n":&rjR+17LSjf=;rufZnqt=8Yoe=F52O'6%@'qF]D3KN
%8KOL'/Dab6!nn#Vp'hP4"Hd-WX%0PV]=gAfp:XgHY5\b6a$Jf\'nh)#B"@9kMdG71K3J-M-[%Un?1iS`^&/;LQc$0)N(,JXme5GZ
%kGaN5HsZ<9PG\idI,E+<^aoju@;UsC#GDd?B43m!B:u5&W87@-*Jt05/X5!GmX"\/C]1lF38T,q.n]3,@i$Rgc`!?9eAcA".,?-%
%Y#HB"nc2rLOL&#m3trdr`&VeKh8ODUg"-e]4j[\7*;&KRDuS;3s5,.$EHD\.4iX:4.FR48`6WIbdc-)UoM^9EBWq)0dQ8U?ORAg!
%_gU6HH:HlY9d\?\mI8!>d!*f!d)Uoc4=F^3+s%mZ([/ZtZW]?3.h%DaLrs]nmW_)8@SCk>NmDCZB&rO;6d@'/TuI!e<#c/)_TEcM
%\sd)g*4d3'H431cmX'7=EltH>p[g7`hp]p8Xf$)]]63c;;]e'sp4a(uc(X7KZ#W>Z1tP?u30q-oF:WN>E;!U#UFXER^H\G@FR<At
%mNKmsrMmR1Pq%gg0:hj)]r&E&,`7oV:j([(eloXT1"qe2Z*nMW\).#gh=oe_9'peiGIQ>oT%o7sL7Y#aTZ?1YkgL@*r,5aXha5;E
%\)3*q<:VeU^$T[8gChkVEC6A8A^KSL6\/.GmOK>C6<@:>pLkbgUqXIU>neNtIr7Ln*oA\K[JN/`?F/Eo:8kGQ6m_Mf46Z*L*`0WF
%h<iM.]l'<H.cnbCV?>aT\eWC@JJCbI2tY4jo/^e<OSFAZ(Yi<sf<Qh$4c4Jno+00l-sMY.i9mQFI<^.W5[t#>PB1q.XdRqTJ&iXP
%pGNP\>`R,h4!41-?2b>e^qkP@[dSq:n[+&u.o>'j:mrNq[C_]MLB9nnmO9(P#dl*Cr"6#W7_F)\S&uO35$$$cQ`hh0a_7j/IJ%(m
%k9SrVEK?Vk\]=Wf&%D+R]l'.NV`,0UY>P(=)[0QHR\[sl^aFd.LYP_!P^>YF)uKu<b@OK;;%DWo]Xtpa<%u%5C`jf@h_<ETj&JnL
%ooFZ)=loW#GL50h4J7/h]A&lpHegH,K9YEO7uM32Q@5VUX&5I^n\4[3h4aC.,jI\NURbo5kb7EBg2;L(B\UY0`@:H\9f3?hB,!-@
%lg*s^\0lXV(>SN9*9cG]M]_HQ94.9$q)OfBs!:R'=F:&r3W:6!F4H;cr_[_62bA7aV#;_PoWWZ1F40?e]NDiZe!dW!YMQ$nqbV<L
%7Am7,e-6;lj*Gnt(.I$J#4BIBNP1D04l`tq5JPF[idH1DKDlA73L&G$G(8lUPu7lJ(,E#[+[3gIb<(r72;9JJ*M:_S*e/T^pQ3i6
%?YIH/k_oIXoYk1FH2PQdHseV)Z-Rt!+!nsWO6jpaos$L"5o[m/rl^LK6WrmPJ[*fOgFa2,>P>n18"08p6s8e4Xi,=:mUPF[KZ.l=
%gWMR-[!-`?4j`63IaFuG^A37H."gH%D=`4;j8@),RT"Xi&![Mg0^'ApF76k83aesfLdU;7b'P4R$*ZKJ'C*^*h;.H<@`':9HgZGK
%5.ooAK>s,<d/t)_8:I[\`rWU9&Xr%*$OT]cIB/qY5,0tc_rUNMkL8=h#5\qi"c7<N?Z\+UL0;u`NinAOk^E2dQ8mCOqRPH-GMRWK
%DnZ'rY?Pi9q4W#;e[lWF+<5?P*qo^#Y2U[ddN]V6,P_hLmn9''DJgjkBp8#[N90e\)SdB(4lX#9?T$EL:ri+oSI:.m?&EB]aWSiP
%BMeH7!c9l<+?<bC83++`+/+Y5S-/9,BV+[VHqM_ob9V*q$%%-hJKESBTMJpBo7&d49.TZ]JjQ5Ym?LF[@YVO)TFmXVE7UXYT[k@t
%f3kfCquW=`S]J`*fZ.r1j4pcH:<i`IbH5m2r@=1<=eA8X^5jlO"\MENFrp2[`QLAqHKk==`M\-XAU]<gjfL6/$[\<8W"*Q-9.]b/
%:I\Q/,6\ER9Wr07Vll@_C!j^,BS(^(GWV`h5!J]TUj74(;kqAbZL1T!gIQP7G_FAc4JI/fa4ok5?FS-3jkfaFo]BSeh<S+7LcIJQ
%F^2-)a(qPe%6Pb('g3!86l#WFKMH*O8$m'd4?$cV>k?e-1B[IBn9P+!)6A,U]5*Or<DrASp(,732',T/n+4eA?hM!)IVg1nq%a<l
%NASV'\tE@"+<NGOTVrX[%0bI4q(Qoeq?YVgac5'Gqi$R$nhtc2=/e_phVCCTTFVR:(uUUoF^=`T-RVm$d%6m"!8UuD%R"`YGJ!H`
%Y?L)/ZlSo&<@71k`hnaR3HB;poIt\bHYD]5CZ-L9kQa:M?D8YLZWo%&eG.V<P_1G)iLZN6'(PT)'=eKI2XV]rZGUI-7Ua0Gm`6Dp
%6+oN@pA#jJeiIWIkI3Iua+lT<-sM250rYZj1t!+*NYV*/HO.04*-U'Gc$S(+-(d7?Pf.[0f]S%Ff_hr-nK2u*9eGVE7bb1Oh<,lJ
%Y.s&!q@RSb$:h/sWFF4=3aI5FW+3Vjc"4Q?4N=0:r/86uV"^oSAh`mpW9ST9XlC;0gGtkA]8bhThY)rl#Mf$4gPaj*)pdu#^MWV[
%dbaH%%A[;+$>mhXoD]h1dHNiRci=ZE?M:/LUO.p6Ed;m'N9>l/<t4rNY&T]BrbJk]s4K5X[C0RNOM:^9VtjuOq"pd)pBr2`==Kk*
%@kYFb%ZP/qEk;$3&`.6%2hSR!;A$`,BV2N43!hgB]c;@i%D=*"No&STK?DF/Kg*8qJKEG=K0F_RF2$elqi>!us,hL&R^?Sn?XHn6
%;0MkWC==4jq\]<nZK&]^Z6K``l!8%NAD,\)7u1[kARlhR.H3$Kk3YHcNZK;R0B35#Y#*Pl7]!1Gb.G:?D.ksfs7Y4MI<^"WK>pgF
%E\7$PDlB]ffCMA$U&2<E5lKE_\%@(DlaHVs\h[/5C*@>:;tqflqJjh0?XG'];=@>SOaB@U4$Ptj:Oi<FH;XY2rcVs,-=UH1cOK*U
%j#[G`I8MSpI(PpB<%Y-5LHIi2[s:7;g3:"f+8<?`^.7\_Q@`:\O(R:HbfN*jW=0Y-7K6;!i5+5r_1#eB+-^;)NC:hd=sB:O)ap&+
%^;4DVmm+GkaFUG$KFG4rr"D7u--K76X")(pa(g=;UbksUc"s/5W)ZQ6%.%hG6n45)E'$"g"sr]7r#6]fhD[9oIh+5s+$sWFI1mcX
%=>jL44M)3RWJ/RTRrs>?qpRWp8CO1;dl\4H6ThDeF%S[?j?Rp(HM.22Kgk[?,gjm3:^&C`ND?J#&WP@t1EE^H7(\(Cb6+/6.n4LH
%$L(,oRu/g2W#ZH,bs2E,1O^R\YjUD61'ejX+W1=raI_3TfC^#j6H59l(e?CX]th!%ooB''/#gsmfAFZWDlQ?ZeAF1"Vj$RTjUhYf
%Q$heEZ&F2^m#.J0XOrM&+Bd!9OG#q<^Su"!V"`?7":H][b"CMb]Id3G%DYa:*jFu3,=E,?'m*.T_6jbnNI8IH+r0`Sm3js%o:a[9
%@!&lc]3#XQ\1YNFR^<>!lP]1l^;..'3UKbu)j*H>F<4OGF!V#^e]M`XVNWgmHe01j]V'#Z,/>B7c]6=!8LE&CdpTd-&1!Uc59$QU
%WnnXkAKgkkkb@Y4'%k<h'I$TD7Ol@sI4JJ,%5*YP+5BY=7_/+kb6ki0gt-(qDK$+?O.n0/!>#m)<*h+!MaE!hb=N]U-""7"Pj7ba
%3b?;hP1cFKX%r4+Ht'+AI.7%%L\q#T#t7Vol^.n>(#N=4kdYQ'a(G7W$Z/8I<D21,#EnDpYSLLqWRQ].(3""\&hh*OrR^+B9EsE7
%!PjGI?auUh7IkCB6>aFfQ:+#hL($Bp9kLRFS0A3=iW]Tkp5kZ_SljJ`?RZ97]D[lMA_CQ&ebM!n$T)B6-n?b;IQ"tn\V_+9@!B5(
%OU3#f3(,J&j_<SNTVRa)2,VXSlVuI[PG*U>['=mJJDs2+*WA8tYclbB]%K?*mI=Qe-/#:0V?#9/JA5IjpR*Q^d9)\-li4uhq3oS$
%;thZ%D+J+nM@uXi0`2/!]gWZ8W.J;Vp!?([]m2K;ilm!&N0>Y+fo>B-b*M(s`ou(PLA!'<H2quMXA)YEo[HKPXaV(PF6lnj!^MSb
%X*:nghGd)8;Y*8=GFnNb2`ki]hk\.O>ks]AO&:J6+m]pDhQV]0g56#3^p]0n7SP?b$mer!lV2rPG*.&C/`=!+%]_V$jk*\=LA/IW
%,0G(*PF!6S!_?m]!3QnlDQ3I$f56EOW+rq16bDq\VB:Cnh_U8,0.;o$W:3?#(JPlIl][%X0+2ask.&"nb/bs3l>]8t.cM<)cnGIn
%HN@*L[ehOj*;>\#'*R_"?>KY"(.^7jpF1cr1u\L9Bs%a;^/)N(^f12BW-V_ic/75CG.G$"I:N60F],dE8Is\\\L\D$-:3O-dff:;
%pV>AA-%-^@86fHOC_G/e9*&b3\V8]aC9X_",H,o41Sbp^LdRc=4X#Ln&l;\+YRe6_D\ueY[[D33,O\3qA.)_=hW+s>\?LKVlQ^"S
%o?S&/.:hY!@V*R8Auq&G[-8^BDX22"(1uDeY=N"e6A[H$e'(.e-0=%NA]/,>OV"2KDL3-mYBL%.<s[k;5V*QV_N5<QCI6,5]."<0
%0\HEZ>22h]RaYZBJpQl"35\h.OhL*+/$h<86KJ#]IE&m5$^"F`+JFQ?qHsfR&k]6BKX:r5hhIS^CW.3<kX54_.^lD6VtY?Keh&P*
%`X71qBrZ%'aAVFq(1BM^O^[7DkHU'bT%7OU(8ufn9Ps=M=m([EQpQ(C+miOd6H3t0-.Gi;^W'[9i*p3Q=CK6X/6(-o5[&(I09<Ht
%>>cH>`hrD^>>Y.l>gsgBER./:370VgiUljVB6#RgHRo,'GPa;f]s\Do6Qt';V3N536<)dLWQ+KkK4mKm2I]8W<M.OFhs4ql1/i<[
%mB:MHBO5ijDkR!/A$rlW<`(8(R'+e_WU+=iob%<@0TqR]/j:79`3Ml*cO.Uf>?eaXSR9!b;EM*TauDZqmQMmElE$a\C2hHL%V(_l
%;CH=9TF"J%cotkE.\[CTQ"9;n:7V58rNNQBBc;WlZXbr)aB&?[L_4L&A"+F;.]ElaNE>!LSH39L2Tg$9q%_":TKrVQ9]m/D`dC-"
%KIfKC%MTWT=iJ%YD1>2a*YlF6W&4H<-ZsZ5XY*[@*LBS;U`S'i7^?<h(1nBqqS]hj]h3o`e%\>K?oPeB*L6lf/P?J.;pM\#OG;.'
%pCMAc:c:$gV&f2;\Mq[.T9aNrj3`5L/+<,2KYa1K3)b4FL8&[0JHipYJVrJ@2")1m`73HOqVlj"#a/mRW:].4Z4L^Mi3\'8)t/R`
%\j6\'F2,C3BTiQJ9O4;<ZP0:kUo/(jJDb=9o$Gd=6OjR!#S$p\V"(*"mS-]Ckh/5u'JW?In#<L+8M#!FKS!O*&#5CQ;fe^mCoEC-
%d,T6D2d^H:K1:^-h+&AR@`!ccn&U'Wm`r1#"H=^BmJhJTR*I=+[j=RTZP,*5cKRi5UhKU:5F53Gl`'RKmS4m._pE:*&$*69\(0nU
%jEbTH"a[qsrlE+fg:[u4&4=t-i*(jjV_UOnOctaXoK8"OJ.8P_2p6L&29Zljl?cRhoHpS1%GbiWZmP[X>i!JVf6d/S!L5]U;9\b%
%%UV]omdR8%\_e:hqm!Ze:[:tV*9#0&\DQrc^Gq=E.);>Cf2H'Q,e"8Z4TC@lng9LS^\4'[)9)R"GPf3!/d\6YIBUBu`;OKGrm(r0
%rZ+mX9aYYe?;oFM!eF(RXnNmF9r1r&-S.W4U5:SdM"7@NM]Yd.d;ih]TK6Um8j2)(e[(nI\m4ifVfH+nKTeup-UPW*#+!2ln'S%[
%FM^I]:9qFdi/?Olp&Ah0rtV$=,r=pa.B!2^!^EprOJbX.katT-S"%3SYDI+e80$J'4GLA+0'^Y3]--j*VI_AWc^L'7,Y>8].XA22
%#B)]D__6"75Xfq3jm-RZq(D/rUVT_3'b>oG*.TY:n<\47@HC`TB-$X/*pr15LXbCqr_(oBec4tA&3Sk=-Mk%`nGak?!b/StdJhR[
%TGgaY-GK)tQLI4`W'Y"hk?RLl[fhs16P&t$8cZ')nf1)"<-+$iqdl0j$)3=M6bL0f&G5A\Ha&M(Eg/]a:_b\9j"4V$r-S-j\(_\f
%QF=u>=e+J?H"oo[c*Q<$:CekD_iYY]\@]YFdCVL<ZT"DfiW%fUKp32'pksu5s6L3PYr@W,,NJfr^#9dq%B5Z?<?T:H;'At/"ZKPi
%'=#a3*E`q^[)kbdhb-Gul2CktBM%Z*[H$Hl*>.2?^[8'\pu+TX&%g+b>43p2r`bO\PKlkmGia;X52Cji[!1tN\#[8sh-Ks)VXRr5
%?s"n/qt66?T2"972MJ,lIJLp=oIC"M.9.:3.,R9m.P-?X"?.!<YA2`Gbb(lUpFJhElM9^,m)gqIpjbZ>^#n>a?Tn7dS&&I/qtt\K
%+Pi-JG-[#5#hBK\\5?9&a:8(g1iX9ZHRkk_9mK5LUJ'[T4`1N%_&rPUU-]NShdAbG.>tZ0,_'1QfYB`CZcf`ZIiF:W:4&=s"K7c`
%'c.#`\Q_?;HTHg'Tum6F7/?`?h$UQR+Oj5++H?1LB4\=6VI#TF6F^5pY\f]/>m%+TlgOk$f-Tm4aPQm1T7;u0Ve@$Y7o57*MuEe,
%W44c!bX8p"&,84/Bii..]lp0c9CVckWHkV]=Bg/mg7p<:Vf$j?Y'4TMenaatpMoUW5E^\jKZN%0.QiV/,'N=]Bh$fD>-1;BKU43h
%Var&ApQR7W\=4s(M]9Xg&XF(fKi?,hrYk0EcYgWKYN7]GqrQ_KrqOfX0-^5b*e!nlp=R-f'FJ;)'p)+o.98p"L2Z#=J/(d2#(C]T
%6"-KQ5mGI#P]ePm>T0>D:WX3XG@dMJY=RbD!Q!+[Lo=**nTIaOXBnR')LlEDi`<\+hfig4Z=6h>^hWS1ICNEKlilQ21QpOMW`1,s
%#PO?[nL@A3-9(iDo_@`*s4]X0mAF_oik1\l=\'&K3FK%;8>t@KhndD"A[^0Mc>7u371eq52OfB\BXPsf"C$jr!7D,<4C*IjZ!U(.
%5h'"qb#F?A)m#-hU[BI!&)V6-PZ9Q=6Ft?HJ86<gbo,^DDAbLInhV\k[9%8BrDLcX8p,3"FC[3[S+;&D/,Nq^55qTGqL^fb5;llB
%`Ea:392pb5*4YfaI37#eKoqinT3h8k$91uDlF4^eU9rK!lZ?B(F\:@`$AA">rMjEW&P2r>Z;!\J;482L<iK&].^baDICjajpO9qR
%c$mrUp2'<3:/uY@YB<k&&C*90A!NXn^&,YcI]MT)hO;V,A^F7,.D%05>1JU)%4)u4M-<-kQr"W%q%YYX)RIC/V]i4\e5'9/+LUYm
%(i:^C@/8:)S@b`4HYM_EMTqEV25RW<=S<YUHV].K0+4+SJIQ6mTM"IYel6p!K.l-GpTLbf(NRN6,Up(S9gW?\>,tOES!>k&WNiqW
%V9t1qfXk?ZkF8?FRhNJI0p.eX-cG*$59SQ"apYjd7U"[gD6K\I65SL2OQM5H4thoS7/g@k!lgKnZCK0@I.grd'%:E&QeeVg)$DCY
%:kuU&<.U[D6n$Ob#1+G8pj/nlCteU!+@UkJj%4hk=sR!a'BA[#5Nf)<nJ`d.qj;:IZMn,3RCjlke\,qmRqVO_)WF5o'I$ZfUPS<(
%WB&^*D@dG^8,)3gK*q,;Nc395mcnHB0l&^DBE06.YX^ilEAp9SPX!rBl^ECPCCKMa[)VH@%7`LW74".5KDSZjD=(k$X(j!-D:eFI
%;#`/kD`t8RoXj*+^trENhsb2-Ht2T?$^LaA6#Vl4-)pW,ai>-RaF1OdOtVJ<gM$"Mb10$0AP^Ya-[:e<j@fYn=J]KI8u-DTlZ/OF
%]"4('01[OTJo8+qV"jTW@6'`I:AOr_kS3@:>%9YH#0JOhM4i9$.JrOtQn-57@7Mh\jVi->X,bqWF7gF^5k';"Y\h3(@/bZjdt.>E
%iS78'-H/[gR]IUnG`?C^0=:4MF[5rp:[HDdmJW75/[]Vbq\3]WOaL1#\Y4H<KdJ7*+'/3k6Y=XeWBDl;4W1dubt4'u8iKp.aY_O#
%[4YSk*3T:m5A\qS$l<IFo,OTfb[ldpV_>dJfDM@Z/uAR.EqV<Al[JZtc$c4Vb;".fX]r0n9Th,$V(5`l!hsA+(9=Uf&hKs;S=ilL
%:h+c0(i8o2>],P\Khsq_Q;POSMgn*^)=SgG8/`Z<CkLn8IHg_0_g:A?AdNc5Xj>X1W4VTA>L,JX-El+nb@l6g-@j)g_@)eC8>pd#
%(X=(j2bR^mkmodnp5s?!Sl^%rn*urEa'C_kJ7c*EeFY3/1Y/pGJGglS9T3Z97/!&IfOc(>Ou!dkOphW"_7SG0p45ot]cADb?*9\c
%WO;V`aMZsKb:+HqioeGPP#Q=!fC$-FCtgYe_4_%Gg8Vs`[Hu/H:g/"Tqa.XgnXh[r^>E=JBWOuf2^ZBs!XG;@#02r<e3<_mXk1mn
%)RGX/As+p#7TFbpdT\@Dm$(_rB@e'Vk-b%HM.X=J`lY6u>3XHtOL\,8h&d^(ASB#AXpdf`Vfl4KGU:IYqs;XS1lHgDdt7B+m"DFi
%gVMh,bJ.VHVQ9.hmU+Vos)[AN^fdDEc:fO%;@P-*jDnp1]SbPe=2O!:4'T46_%H3M+&qoMWT0=T59*W`rfS<()Ijj\J6G$]kdFn_
%"ZMlJM*!U.0KYF0l&+6_B2:fG404Ap1<FZUhOSUdr!Z;jgP(p0RT!1G?m"r3MZr8hFp$#p@LoCSft?2jET$)fpac&(U]n-,d%PBA
%LK`;9Up\YQ2B!2p#-Me#pSBj^'+&BdA4O2Cd@Ea(2J)W<9f0'K<Lp&PPc>SPm_ue,K9C$\Pj;h[^Zllp=m=cBnU'^<EGV$`/X>P4
%o*3/;cd`%rdg42jo"igMNo;Tje/5)0p'k*94YA6BCl:6^k,KI05"&dUOaS"3:*418a,3b-b..^+jmiX&.D=qHXl%j,N[l#b8b52A
%lVfC;')hghF57]5oDa4"o^I@e@$6V7?,Pm9Q8><?-IE)/WZ62[8cm7LjRs>?81o`#q0(gQ+&fLT>]36G%"%)>)KdGtB_U37j'E:p
%TN//$@jVSg#bADHAdif]@Z!<Ge#A;s3V=0>Fqc>K_nF"H5V&ns>Di<>-+@j-bb^A7-%7d,(A&h9G,^kn\7N3PY5mY3>Vjg`H[jFF
%O,a!;PQ\bics@8'N8pJQJkpsKPjV@6mRj-/Kqt]W"1^`.KG-[XEFRW(VJ+jij#ghIk%h/:-bqp[@=?,&2/,LId+,2#NBCCQS8k3)
%j4p3:/%PNcdc6,7q-BCsk=iGeW6<(2kR*Rdp0XePa@s`7Ti]Y(3NMc7ou>9TkL'sM^-J.m&H3-Je!e;Z:rqT"E\/VdIgFd"XeS>N
%bne&UcBA'*J*`ac*ruO(MfsV6i)?]*p'_9(C#5OKOf8bB:DKf[q5i_kPn:h!g]M)u#nhqMSr?8N7Hc$0$D:k+$5.kET?D)'j7EjV
%#^"F.O"U/jJ9onV%`DX`4($]W\[FnCV:%]u7BN2/56mf2g]ZZN`WeuK:/eL7l-^?md0j67O)_qX*K89PEQcR0qMW@>dAh\qJCsUd
%AgI28_ETASG^+2ie;+u'#$CiaP(X7hA0ePC1RDWp2V>V=.oa?a@E5QC$NS`HOmEr,1*IMqLbNWYP$/L))4m&(:[nU9ro+lGeR6<)
%>CY(-r6\*?LRmF_F?\+bT45a)3M4,?$.KPsUbVcM`C.OP2IjN<N4g'7\W$=BC@dtJd,X)ajkT9-q)2VZ=j7Ukn]"@E)B3!;2]AI:
%!\:i#Ka^8AFPC*ODBlS^n4^#V0ghVdcfU%KQ3U[8od?HM1RH]qV[[B&F*Z#u&)-@Z?/p=UBro?5IJ_9iL(pje==oR))f2un=%bRs
%FiT8&&?QP/cYogp@C7Aa\6DVOCXo07jG94,g6_PLEjfq]TJb`WI0f:SM(^m)$V;0uTmMtqm"n(*Q/cJ>DuAO3YcNoR=%tLVI6LJ"
%oR8%.9,hqBT"Gu;IXM@^KTEjq29.sDB+(<8liah6V2*'<qjh=&8V9GuqJDj`*X?bZ5[ce8Go.I(bCVI#`%(fNCJS<D&XO(ooR+l1
%['-%nMD*_6MOJnVf#AD`M:>l8"E0mqF`eW4f-Q>t7WfS7h;b-%ad/Iu4UtichW:O2Z"!H0+WaVQ$C/-.Q5i7&EQJf$]Q-#P:2'@>
%ALJ],7N7)-ES"AIRe9`UZo66"?$[N(VT"DQTKjfXW*F!W=/F]r2<%do_CnKl@5qOH?Xg=CAWs73.I_itIi:BVVLbBP6U@X:\D[`(
%0OoGm;^T0J3ja1f?h#Ys^"09rDG>U1-pkEmnKKj"))J>5A(srd7<g1]r(;bAGa!<W$*TTaD=X"*NdZ5kDPh9phJj`3-,h*T948?r
%Ag)1J?ah-NjO`^!0=T6rQbDUj[iZIO[Q5nhlmWB:a]:cZ+D4J;2b5G17#Q=sR'94WKX!XC&7%C-Kc$p>64ME8iJ6:gE4E:o6Y0]]
%`&up/'O?/l8kE4Od;oIm(f5#TbWlMICPA]A1+G$8O0M$iPcSoU$g9=d]!f=&Z<uB\KWt%pa7#H/`/6L!mPe8U#Haho`prB&Skc%I
%@adicLr;GrL+Yfp3?NA=Fe"^9*V/V+rV#qP@kW8<SOcOIoW#0l+*U)'Y'GIu&C%(">O$4XaDJrnHA++Z=PcJ2]H&o^(`jJ:=JU$'
%e^('-*lH]%mS9q^i0Fo[]Y^-[iP06uVqu@ZBe_.6(\#'+C#ui@?i^Rjom<\j:<Y$&]D1?Di(Su+&CP-VpP;^B81]IVXj@p/lb0rC
%K]ANQ^"lF64M&!56;@9!&e=*!:ke;BXnV]nJ(6]#IR#%VfL;sS/mcZ3"u33>7Cflf\./![UJ'-kiOW_^E'a0RBQFaiH,(4:#KL<4
%gf`U?IeBd\q53&T&CRWf#JJ1p9n,E8:.,lM^S4)-SJNosr[]a*TBdYC/*oc7]S(2Q]T`kLa`"^&J8Ouhmc=co%u74/]L3a>-CJJk
%-2<FMH?OpO7SC%n^YhpgP8=$je9FM:WmjnDaB]MGgZVN@o(GhnJ+685`eOK,nX&`8X4/1hB>jR<7m_;NSaT(-^Pee]Y9J`X54ucX
%_i;1<DGU&cpq4?,J(.$4L`<8k@\cl.E+1\;U5^iAHY0Z#@14q+[i?VE/UZ$t6ZR4E8UKUA`l]^,EB7^)>tADiC8?%sDaIIIV$YlU
%LgT)$3##c,m\*9qJku_G\7,KL1L/*_9W5?uBdG.3_UKO.5NhM%NLsjah;[l2';PF1]0@bo=q$ClUmR2\k@ITNAI&E@Z^Ck,ZPqQ0
%pc=p1SJcnj_`qRG'fn,Y68MI;/scHNj>oS],;T'6'_OqL<HrP)[-JS="r`S`B=A\6\C?3hLjEP#I'N*o^MZAT?74YjW_<E?8kaDQ
%d0a4i+MUo(55-:=;oDg/`O(HpN;:_Mdo]c@C7_^[%1Ii0VTl.@;mNpilU6B3>gu(jdtCUCo]0q%:EdB.g'AEVfTn^4=OLUbPb\r_
%OGE!U4(Rg0'PbDZ2A"AI"5dEM#WR>+;j7-O!h2q\Cpp?%J#SrD3ZP`._XD$sliiCZ/\T04d#'(Cg1qsP>4sXD6\>E3rlEs/>L&8D
%'W$ShG@(Jn,1nXcVZpu^92PXT'$igAYLh2#a0sF1^EVruMEl4">SsA>d&s*/Q@t'u,b56:Er%>DE>dgAl5eeV-lL$-EFHX5T>"El
%bRlYsJfHCV:"rC5n9=H"QaemeB2Kn;qNSQ=c&;#hL+rX-YPjW&*<CYb_0_^T,0<-NqCANfcCQM./lFf4/*]Et'GlUkml%gd[%(q+
%5k=,MfuLr&RrXT];!FrJ6;^beKIk&qgi7cXl_*[@9iN[dn/3)24JJS#Xdse,8)rqePIakC^O]!EIj1bk1K:fq\*3Vc;CGL/Um0+m
%W=MsNB0]%R(DLcL#f3o!03>S)`7cq:Z\$tZZ8>,Q+)$_']HQ'PG_WL2!ncmq/lJRdJ8>PF?qgn(U_d:W$dT:L<h%_3[^eo'lX1iH
%hNqQ1kgaSAL+o1BH+pcN]b39&PH.1e>W=CH(0B!bjXjIkBY5JQXWeiSh1.KbKg,OJ2QrYAgG\g16ho8NU.%?tKi;u2k:a+Ws6sb_
%<O[k/1FYPZ9i;^08:FdQ.mD]1Ne?VKKKK_lk/G7<UWgQ4S<`EsHBX=^85aV"D<=n!DBi$/8i5m,A7=<IM1[!VEMQ-Ga"[l))^!YH
%lUUn*]DS.XZ=58&IHTIeeqk!lZ#rEb/pV3]+K?^qU^42t'T?`9==sckd=Ht0+LsI^)I+KD:3Q)\C'tdgccq"e`C"9+SB*<WhY\fj
%;8S:;mH3*gU>rJp<!99k8P:P%Y,EYE7mc3.7X^D6olHd29M*TS2*3,.RK4o!lRI-3&%A4o1+=3t*F<=5Bu<nKcm8Ifd%o%4+q\CV
%+3GUWP_,4I,(h2o!fMUgN?V0ehtbB^@R3FZQ3k^Mk,QI)X9OLl;/0QbT3K`m;b!uWE;Fm3(KK@"QeFHie/hV]apP"BQ;ChdlF0Bf
%]U0KImk3YEPTCcN\\/@qaOF%\*bPW3#1\XZpJlF^s1I=+cQ%Rc2QjJ358c%E-G`!!dSePu]2B^Tk_`Y@oONAik*YRB(mZ)2cEZr'
%Y@4%g/tBtPdpj5'`*SQT!320S4:oe'+S*hZ.DEUR*1daa7W20?Fo:`l@l.'F:%K!R_Ct-brcMq9E,JilL1#j_Mh!c'>Hl8+lIaYP
%q5b=+PQ\+%'GtrhK7GT)hOm_h-hnfCguE.ITKR8RlfGM1=DlJ4Z2TMjJ'gLTr3o'F9gb;S*NRR8G<o*Q%9oOaq-\?+lBr4=(p4bU
%Iu=j&c)'Oo\9.)1OlGbFo^P!m2K`f,S4d/&b+Fk"UDf1W>?#hibZI64J-3.fZeM<L<Q)7Zi;hnd\':g7=feCdpD;``?0&JeT.)XL
%\X6TRY^)c$G>n,q<%3-N1'2U2)M1p"$V514O1s2]1JitSl#&AtV-0%XN(KpFW6-?@3'\8@4)UEWTBc51<FDod/MH1%.hAae@SLQ*
%\q6Z3CLCFg(,/@$GRILNbq=^Y!igO;CL)9VW5t)iAVsYRisL!`j0h4PT(0YPoAQB)=A"2q`QCmkLo-2_mc>EB[<pD/1!>JEJ'g?-
%-0FaXN6"VtW$r@$hoP/ck?r[)"XsLe-l[2T(I;,u/?*O*<K(6O%"Q;'=VZ0=7D'#:jU/ZR8#;9eDl[3Si.Hr75QsR3DBG-#D?S'S
%+m;bQ8BJOH9VqS`7jg&mh,'&=Smf@,3=d,AJHN"tTU56Gk50-N<CS3ha"KBPYtJnPW<OPB<P?>R_RQm90&0aB_m+8eI&e)pnZA.f
%9kl%2-58?$H+n+ga8Ym-0sG$Gnq0/nKAAU;V:-m`lI4i`q78PfYbTo$c(Veg=:]U!$S`7)n<`Q;1O?OJDu>1Hb)_Af]PZ5[l3_m3
%+^*:"p,InDP;/=W?WRpte!+KhUQced22Lj<$/((P*L>bHat=%G&mC!*Ro;,IZ%J<?mqqgQ.<nPgLO;K65&oi++TLdMcDZ\]EWbG)
%Eqn+-,lFrc0;CA:hl,*?GEfJMRB>NXM)i%speKCZ=5N:mF<2_8UiVEQbkKUD(e@5/)i$@(2+l^/Aq4cSE6F'#jGRbhr2s:R'aCZq
%.<+$%`2Z`!ZA=t%K<`;S/sfpd?",s,&m,TpqGajBR]DUs#1So"SY_ib!JE+JkVm1+)(C^A02*VdT`j,C:,5_qNLe2U@AZ+cq;oc7
%&B%m'.#Q/78j*K]l'r2][(i7NNh"n%)4TlRV$*%,(j7fSO&8qZ#_4ECG90_ODcD,-1>IE6LjWAX\r$%29IG11LlMbpf8<aR`L6.Y
%598&%mA["i3sF;o+QMsUm$JkAg4>Q=:f;.)1mP!.^9o"dp!%ai:g'^:q_ImgQCBMcM&QfO`!@/)6b"4e?WN]`fq2PNNB:HUNUfI*
%`bE$\Q>Y;D5QbNZK:UH`oVU:5:Bn_nToX1+\/tMB*H#[*JSe4=>`^0:-hi3mm@iW>J>@7IB_Y8(&)GN$RFFrcq/H9&hH#ta>+U\A
%4YINLOJ(UB\SJ8_Xnm6Y[`^.b$Rq"rc6T&C'm%#QViUMRFiql)S4(u',]"eE6TVe6LJ#dO!TcWug3dhVofc7`YJm(KZK[Ybp:!:K
%MD>l9O"Gd_<mLKeq.VL@2IA1fn0WYain&S6f*LbV:XYm+h7cl%?0)3/`F`:p\b/?GRH'rLCPjGBF<`s:"&Y+s81.;)i(7d=ZOqqE
%+B<%V\ko"sR+'*?<1GW[f:'oR2p+K1_G+.k<17-*IdUN%gL`SO0JZ@5%OZ#2`9?Hjkd%to.R5JS.;5f+o:X4LP6"LtK4ZI57NRC]
%rfpQ?oPB6E+FjJ^G"?X>9j0#"e"OpcJ^ee?6ru)#grR'i/sKLfC\QF$FRM[1K?2BiC*-\5e&p0r=#TrulDWD=nGJZF3o[pga*BC[
%>BK'eeK%dSWt69!@"DUk"LO/KEk]Qc-IAH$l$@)*j5XZ^QT/SW)`!1S3-1`+P,NVJonr8_BnBFDqDW!4D6#/@MTd&i,8pfp-eh`1
%'M*6hL3+86.<^!)EhntUcZR5+?<t<'I'2V?WpuGHSQ=gmcj1QRS>"ARZghWLk@BifO"X*U"Y"N4.;H$F6^`#MoDl>c&,q[EeXMtQ
%TWrjN(,\WJ;q9t]\=*1/q=n,T]u_)BE/lc7qRC$$QVEQ)5khDRU07Mn9H5l0[<a+MLjk+mcr/@7A2fr9R=U^[BfE7%-aE((r$<ZB
%LO^V<<mt'NLk]Ch:o8Qi=8,'_;ri$U$C,N'r&]:'.8DI1Dj;MLNY3fg]`&Y\4,H9;r<]<K;&cdEA<"s$E+VUujMg4)VrD<KISN^V
%6kWXh=*H?FBB[*dPPDORTf4go:j'.>((rD\npj6B,ru5[-k[POoPs6_m9GQl'rG+a.g3C8f&*^VWmek)e5'5$peONCpWq9'S0P5Y
%fiO0q0[=DS+_9/[5O0I;ITKU@"339Z>(F:%*^f&t',7NFJsg]4$n\!+#6AN,L.;VA$9pd)7t/>s1K!MOh=;6,S=FJOU3#(!@m.9c
%0D;ABKWYQ(.)U368nkhV^I';I+SUDlDH0/0l302RFVh]FO1)#-T`CWYNnQ]K/X"#`FDp5,/I/j2k7fl:3d5DjO);:Z6qDBf<o4^P
%n@7iT3mOT#(3H-R+rp)Jb_mZ[Tu^J!]\V,^G`KG2CiP2h?6aKRS9<VC6TNX:h!dbl=DlGVVb15u,``Zf+B8_T3lh201X4!eh^d@(
%r(,sMPN0A0Vm<,>2*]@b\ps^,4T(U&+XSnnC@NRq->(FZS=sG.Hu/\j1M3)4/@'M.kqG<d?D<b/C9,q<[+lqT?I"C\9+:o.Js2ON
%+V+Edf/RHP:<lZE<"?2eh"R;d(V"sDMYQeu+FC)<3$gkX0bNHi&>Q)ER2SYB1ss/CP*l#N$M\UBG)k<G24j%^b&XsaObq6&DlIh7
%KEhu.5g:0&<TbLjT&P)pWNRS4KKV<[csVkK-O7,aMAW$TN?QmL3msUc5>?gap2k^1[En9he7)EK(9]>FKP5`=DM/Abm[17B/DIU7
%2.SMS$;f:l?2+1?hg-*t\X);i*4X7ZW6g&Up/mO.6[H5&#FpIRMW5E<b)MkU#V>u+4"1PQs+o/9r&L,JUp<sVDp]th4t[XVkE/,7
%iBnofPB9[rM]i/7\(YCghs35ul2YBkhn/K-X,>Xr3aiu8QaP!F#*pKGNU$5"<s?S>dN!(+Oi/qAf!L$?'/`Q7@hOpIRbP#aqlSGj
%F`6CA0!gh%-EBR@"IGG_\O+Q2='-67bi8)h1:YRbe[fs/?/)f/*hJmZHgPSbk+f5M0%*F*p9:V2o(``Gp4Tj-,kB2&KKNk-m2'*m
%>O>SjlM6E/f8j)C/2F&u,I<"ai02RT6FY;B@61,Q4FNC+<98;;ZUF=8qD.Die[f6\qK46![B8\1d`LfL_bp3;6?MV>^DZ@cr`LED
%/Hm.i1oK=eT2l?]UcX8]BB@!5,P>!%2X1j.7*K-&"(f$:`1\OQ$KP:;#(=*!QdN-COPZAW^K,7IDVN6"_f,PsGuO0rS2R_FmJt:M
%Ou1cK@YCh3&h'+.9L7e5E1/:`'^_9gLLmT(?FJhG7c\!q9#EVrCt7ce\DnTpCRT*bPna@"'&%i@DY1AS,Pt4S3V;IANW<rCDctgh
%3Dpl![hhGb_;E[\!r143_9\`mXF4NqI#Hmof=mm;pV+I/DhT:gPV9Uret@oPk`b<r`P-,U&D9p`bW(D\<m,<A)lL;5-C&(dL.66\
%@KS\okn^nc@t-/Bs6GB9=hJC:!Qm?N17BeN_4D'bOqg!3#kGqd:G4s!j0BKqR^U8rGfR56UL`kOqq0F3$];NDTID<Vg"oHsp,V/W
%(G7hA/6\4V46Bafr<Ub^I7qM5em=p?fgR@[efRNQmPbuiPGW'%\Xd!o]drR#E)A-o;<**$;Sssb090&g>WXuSUjQ'9/"Zlmg;T4G
%KZ.TtL!KS8R!Y%Al:oK><\X=M80g_n.@sO-!1eWhnq9*1P1SO.S:rjbNWB%cnTE38#Z`O7+VdA$&ir:OK1E_h3Q\NU9u<0k-lTM&
%`JV:3-p@2hb$`A-K#7C%1+=*UKQ)H6n[4n#/?"@Es73T`hA9A1Q-("KT\9#g=gFZ\B"Wlr`Q<?8YpodAW%G'g;;JJ:>F;]n<>L[.
%87F;*ZLjIW<h.nbJ)_a"\pn(`Lk'oo64VV&]A`J5;`XH3`N[D3HWbn\\*bDFX1Thp8Z::(h>lJ>W^T?Wha=c6]d&5XK]^?`rqrUa
%r9=KI<8?>#IO-H@H`V8_,6J1o=q6!q(ddu5Blh'>qR8X.6/W&9<)UI;@4JZe*,ts?H+lUm=bWE@bG:oBUg*2d8ha+%Ycoa2lk?%q
%bO5>'7?RIPYs/?Um%=g&(3f(ErSA!e'4'g8gd]3sLjiY*3oG\m^t;l*Yi)`#,%WlSQ*&mf&75J#*IFRM`)aK@bKJ-@SA$khm!52A
%*WS&kiU3FTEnA)[qr+Z0ZZN31g<=Q5pd\E/J2eC]YT!WL#(du:,_>%>_>&O)/On8/Y1N5Td$eH[=C8p09E&)?)A4KtcqNP_U'=lS
%#S7JAPu(#Sk@[GD(_PO0Ei%Uol(&_#fB#.pT_Nl,A+.)!r4DP,fM!D7&*QArNtG'95b!^9,^HZ)/fBWBNV&qss%7M6E4-@$3Z;WO
%::Cj)OUHc+PGpB-@bMpW$(PF#,9D#CV)/C\CDU9PgbSZuY$SO422"<'LrJ*@I)NiQcjuU,2P8eWY]G\<%(K0$omJPto/[8+TrLU_
%:+A=gQM3:DI2[G-+lAqhm0.p>T;&O%7J"_!QD<meNZ*>'Dg%hCZB&hjWm!/oq+uCJ9<K\UQK>&AM3`!1Te2[4)eU=#=KuI+&08lD
%Eh/M(pT&rW-4[FeOObZk!]#VgiUcQO<)B?EXZk.Tdd=5T%):hi3`I)R%MM'1mLot"Ee\-s_rSE"$%?,Q%5qk#.N<kJVd\k<Te3ui
%EkS0UjC_$no[0L/7JoU)HoO=3`/Xrb,?+3d:$8i78r$i+GPn3h*'3/_#g4qLUd@b#Z8R,s1Cp$qO-<Y\[b3N;o5Yf"4:`)bWEP]^
%j:"a[QS5t>'i4qCFuQ-?9Or1[ATTH+!BX%H#0[pGAHD1u\Bs`Yn=)3^c&q"*m,@e4NTZQtV\SF,:<UjE3J59_i!>0`)oR,:7C1Q)
%c#QDSJ4@?EXf5aLLrn*I#(.8n"]LA*M("DtD;9kqVO4@MXXQZ[Gj;=BAd?"17eC'5qUHnVi9)/0g$s!p^Il;29o"<_QV1k)KV5mN
%>?CKt(eCClG@e;(ni<)E'Kb#9Z)U;@N,'YPDaCPM`:82RVHIt)/hmr/EOa6)@EMnc:Qd.lQkdY7'sR`D2!5B3"@M,fngDOhMF5,2
%DiI@S=>tJO-IuE<:TaC4?@M%Ggf]"!et9(mnPXK,-dH!'^bc6lB,5[f[?-MXfKgaMg[J`-l_liY&6eWGCNaCcWil2R'4qd/.^5VR
%;QV7rI3H/[3/R"nWU`/).!e\_M,d!k+J[p8I/;81I^QB[)pJ<.IjN)*Aab"R=F`N.Eh*#BSc1$ps*(:VZP1_(n<h]R/3P,t9m9a?
%8Bn./F/L3LiA,";o%ofaNhXhH/t*>$D"aWPZ#<s_fRI'`r6-FshCCG=+JED>'F;KID7``T9hhT\W1bj-Xr)t?1TP9l?4::h^r-]#
%":@XEb53U2hq=+63aL@DW_cU$WTA>q"rnW4j!0.dF<g2TZ+&Bt=LOm";:`!;UUUKFGR_`g6u_PG>Ri9,BH5gmdT0)8$":G"]9[iT
%a=H0RiPd--4HQs[+eH43fIsj#9&UI9"B2/mM!%^SmU\2'2/2gBE!1T-I.+>61m-If@gcG\X>/>XV>_[cQg5MHNNl)K25[8_I]pO0
%Ap^$hP/r&Gig%""V6Xd(4H"+MX*\p"UAbFc#i4>unbH[MX/^'48mIm<VJ;ZAD+H?M=?B)O%:P:X.M&_tp)=7)Z6r3C.4b2^kM]>n
%dM10eClNftGfeZ#+AHQ;E?bq8[8m=IE1;[Q+5OoA3IA02Z`YK!/*fO23RiK"(\]H*5t?C+PH(TR'uKC#hU,U1+I>U5W+J)B8_gI=
%H)2u^f4eb7jM"ET*,(,/nGG8P4?=om2>^<_Pk*f^'^Bs9/F:WOn$oSQrCj5S`BTR4MH4.od[Nmc'kG6#@NJBr^a8S7.s'pgJRA,g
%RiAO^B];HY%2a:Tm)##ti!gBp`,(Mj]gtqaSAk`fa&tfOO.B`l=fO"=pg+sgd"Q0P;&&)DB:9K9kt78i#\R9h<!$j9bC!U<AHO+2
%_clIJBJ.LX:;R=RR21F*@gIl-)Ri#:;C".V#RF7SnGA9HO]h'[$$/Ab:&<;6F_2jL#7o)NfSXV(:\o\)%S/+Of6)e1^;06VZ'3/M
%$.DsIq4n[d^A:!ER.dlHi<J^+M%)&oM*(pRi6T^WjMSm)'piu&5t;5r*Y>-hc_T<VqM6O-1\r`>WoW`_42luiDMkoq'Sj``0B[;(
%3i?\Od/\=QQLCk](:P#f.fu#'/1lBY81rBiHs4Ql6S/b-kg(VtO<>sW!dS`DNaCn1&BcL>R@!t$'5Ns"<Ck*i"^*G5QJks(E1WSl
%Oj'a5)39pJ/Ya0d@ekdmN#<FT,[m:iL7Ftin<F'>1@A?/<?o5+2q:GgjU%^%M%3>Sbg.Df(^3A]*tFek!7J!Db?@!'fgZ(?);gi6
%#=;(Dl92pD$khl0?JN.<bHXcD)e3mVA%5H@Mk<^("@s?!3hg""aUh<pY]:rb:9n7M^ajhjUOA'jP*6fn4ZBjWN.(V27WsF'*n.tH
%_M@uDaoYQa>N`7'J&Q5==8'LoF7dlq!Zk`NZgj>]-@fjMUUip;QD)mI>8F!]Z6jN]TYSN[]N//,m*nfc?0-e.3q%@F/TfBOpCk3j
%FX,T'cV\l26X+.+%e"AG.(Q3FbtGa'%jUEt-(QuaFVrVW*cJLH!M-#L!TNp!pf]Hb,q&:QHQJcJ%<7b8]6VVA1RH7I:FXG2>LPX%
%p/P>3I:o9];<,W1NDk1D!?\O^;njeoM_QO3%Z#4>fPYV?n"*9I+TMIP0Sto^+'Aaeb_8`(mBdjA\.IHE@1Aj1Y#>[>VgVY=,b3cR
%Te-Rtq#KJ&"j&Q,N3m5'R&rY*lBY5YaX%"[ifod>(s'647#DEF39O]nP+\\el]obN0!V-aNSJCn-2GD;+8JX4\:7]UF^+m'hV<l2
%RVc.N4F5H`q?PMBV<jPO\qsb*VTr@)@E:mK/UH@k\FS_h]C"5L?@aR+BkL8g]KBO[<(-necP6t\24QjiTT`\JiF@sZYn[(JFL1$#
%abhbb+re$InH15p)_:eFe,e/T=K+/b?*_PkGYPK+C;a[L<lsOAjjAZ'YI+D&=nf$&WOVeaG$j+"j`W6b>IKsZV#d4ohAZ3$?i1qd
%SlN1LjK_1`EqM3iD!E!:;i*AhBU8%8Ul\`L8'q406S:D)Y`1X7n&(B>-4(SrW9mIh1_D/!p9N<Ub!4L8R9JuM9g`,+]j1g&hJQ98
%b8oN^CAcgtX*#)*9>#e<]u0#4<;qiC:KQ2i<"m&q2+[SL3IKMR26PYoNBEKNJJ/W@%@P-\]S_M1bA!X53/S#bL5Z!E8E4;.q.KNY
%IP.0^/qf%H"*dlY&%EQe!J,3obZS7q78n+n+/j`_B8(@4TGJgF?j%ESjQ*jI?ZuB$9gc`S(T#gsr^pT)5c8^HTS(CB-X$sj@2125
%rHVZe!O!$m3RkkrOo/M9D9&b2LQT[85E#7NH*9PU$1gJQ+HY%2"Y%bI+a/!n@h1Qm"YFtED7Dnq$:rTeg3?n2%1(:&]OI*C8HcoU
%L8NU0%s1L+^IXtgW5K*+^+F[3<4gWQX&<Irh5#?Hh>Lk@C0T%MS>GjF(J(A?#LjNgQ`.`6CW>)KkSG&P<"Ip'!-540qbDFaHbX[0
%&<i,,LQg@pd(.US7sIk')-LB.G_JDg`.1UV4JC@m<PHT,[WmTD,<aX-)Uo?eqW*9CoMJJH7=CJ9L*Z"'8s']1@o"_M..b_Nc]*H;
%9"P/GVMYG`!#&O:^/BeRSXPk^=%6n'TOI@:hU!dVg&Pd[;kPalTpA8;TAi0BcY`?T;1IttGJ9!,f:8E)a_4A5K*"JAS0?0P5V=3G
%?=ag?(#&TU2&9qEkGmF7L>.[M?8I&\Q8@kWqP>f=a!K7F#C8!-L!N$lQ^1_rq2,>uooA_X-drDC.8inWO[%_U7lmRmpcqi\1IGJ^
%oo@"=fP#u:dpgH/]Pj:%c*2VH*np;=:<"qcV3>qo6WkS=n$b]h4bn:XP`*:JY=,"t<&C?u5A?AqE`Q2i"RuVsb/<Hp`V.oY\qkA8
%FBjD"(6q\C`+!F)H)HF2D(\#l.4)mmXeh"tr<X>\Re*q=$_Jk*Wi=etfLMbXnhPm4DMN.`#2_1)k,1qes74AD-68Kpo@-7DATg1'
%P>p"g!BrsuQ!Rt-Zh,eM;\Od`]Co3Ka4CgIs&Y3XiU9Eopt6h]+#hS335mD?Nc%[I)EJUE7fL]-Xpsi3nqp=kOp_UU8N,JSR.o0*
%Am@9]IS%n^rE69.@PcksPT%I-RN$XtW7QapjpS5G/qq7_=ZXteCO(XA'U]NTr-4JFn_kin,JGl6s.'q)G)\2730Dg&p'huhkmdk8
%WC53Y.Ph(t2<%]"9`eqD,:>i<<4^L,JTqQq.d3S_Tn/*o^RCtQ:6E06=ElT)Y>[6\,BaIUqUMUJQ^SNL;U4:4o?imoh0:rIp.]Y<
%OX'6c,oV>,8Z1Y&Fi>aN[i0uX61Hi:3_n7l1mnO?dkJ8>H>M'F`Nq7%kgUeedAEaCPVP0mAMBh'U9d7>'HF-GD7:Uc9V;$D@<@C>
%MLk\9[,mLI[O35bkF72.+t!`.&6a8!3-]tV;l2WGag`D+h''nbDFf*gd)m^`/.E+#hJr7YH3\JcOo8q%Zd@CL"MJ],fa9V*odd4B
%0UI+YG01ig3\<fJT:fu,(X;WI?,,*aDj,1BE)4isb@M]<LroO2FQV,ZFhAgATk2n.LRBOoNt#-QkN/SO<+>s)Q>h<_<BB)2.78i"
%BWk.TBMNU<.!`<!WL`#=g#9'<e<?inM'Ymk/1\bl+6GEj+f+sNRlKfuE5fA^rP_*NdcF&`ehMjs/P<h!<=^*JbqL@AT#XN;$$=c-
%L.sF(4u@&Vr(%)gc@?"fiLMO&MKb>TJsru,bK6cI/:BJ[,$QO&b9iWgLm,<lgM&kI;ja2%\7+6+BsWn_[5VQ$jpO?KNT?qH+4u#l
%48Ds?oN-4AX/KZ!;o;NV!@%l$pj^D@>RI>X&_n-pL+pQ2X=*d"f^,q>iKQ=<lUt.=?8n<7K4N/d:;O;D%2FJZ=JiZUSdQ>I"jVEr
%.ZZ?LcF0$!ZT<djR^Z8B2'9Aaa,g!2Xlps3khfn!ed5EZc,Bb9/KhoM)rpm)!4f6t.+]_4NrPpaMK'-V8[7A7__WorQK7,47=XR=
%P9qWq[#aql`*/OOG?@\4<+QhYopZ9JN&*Q2!0n>uRlGr3k\&JneB_YKbb4+@+hMV.b"0EkbE2D#fOPa-_UNu]\VNLO^?&QmWQ*oK
%A.$MB:p(B>dDCt&5r,.4hS-4j;"0RBP$6_!OE[i)fG@oN*T"$_!JYi0c;B!7HQ(bHreq/&p)oIuV+;7EXFZ%DT2JQ4UVA4U=T($S
%KU-(7^6K/<NJqm14Acf;,>6V6.BfhQm8O>%.*pkrN$FXLdXqT@.S*pBr#el\5\"ndN"d-?F8@SJBpD]*<b4fNQUH/$go3=@p*rK(
%$(l5W!lR*'ZrNO./eV#W9>,#a&'rCM(.R8SY1FS/N=>DPc_(i[$AG9dUrIU"l#4@j#_kSGmBi;Sh["IG_Ng4;Hm_QRMUb2\;:&fp
%PC,bCR9QRC7@?IVfc^_4rQo4oCP1l&S0tKUAR4`]rUCOcHrjI&mu2j%k+1U=.[CYLRoUXnW,.\RA)14cD+1^Xkb&o-\Scu&DV;+,
%=q=K^3aZlqpZ;]?_-;N!j)E@%&=!OX`f8GIihubE-(pCmP;/(NfApJQr$h'AqMj+WP[k0%N)nEXA-8M35Gj9`;$$JjEnPLV]Ti1P
%V)q-lr49%8bD8/HN8*UUGE)9i<SoufIFE1u]OqOg8IH`g%2F!LLlk)%9nG^u79QVMn7<RVQH<gK.PjOPhhIS<jYYWnc)MlbU:!!=
%$<XHl*f%G_)B5QdRAM*;L1`(u5(K&h,1%m$gG(lj]hG)W7+Pq'7hOF0^>Y6VCM8?n#h%c)kD>)(i#nsm;Y,[2GOj*S0A?$D]Bmk.
%aPM?+$=q-Z;W9/u4BM&u5Ket_L*Nq.NIZ6&/\Xi:^e-u5i"(:H,'a/F_p6?5L/`=LFn*@\mZpMOX7%<Y[,4S]4K8g(W<0TA#YJ$h
%0jE85l_#^?\`uH2oC0^!iS*7c!#"/L3Tr1*`WckX9jqB0@Su-<Hm,E/5Q&.Sfg^##5-O:o9dOh2.Q6L'^Z#M&&=E%!lcK$[V&tk(
%R_/"ofg)H4_Bgl`.8.4t;0n&28P?2<I6%P;C13EiM[G%<mUbSi^%1t</u3?'NUcb0/(U2ikaF[S#KWeJ'Zq-VCiq[1Rp99oEmTIl
%M<<@Wg];[7*L]Om76]i-00\d(@VJ'8W_q6S+1[tS7Y[rC^9]b[6W(:m+P]H]aI*KV"NCkD)HA]RG<)\t-%`c-*PX(a:b<t;CVe]4
%nD5+cI9:?"AN2cJKiF`UnC5e0Na/>[0[2AsaoYbEYR)d&>[*BPFrA-bW;AG'K7;d[pZ\9dN^H:%'YCiV8R\Q?*Vj.n]k)4t6N3B&
%B>.9m7YNn/)!:_--;:3c*mom].VEH>8XW[`lhg68<BW>d*`9C(Ml<fSUNGh8];Zmb'rtkn$g><?5(<HlG4h,L:=8BE7i(VbdGO#l
%L3<(/B_-F7_oH>RiN>kp=R;.K_aC5#XX=t@/BZI/a>4h"(VWdir2S_9:\0OJ#4F0kgoq')krp5L#Sc6Yj%!09frM2,7@uh+jp3q3
%W6&?5SE:n'#gTtT#OCDO=,\ffqNA!nFbM_>)9#LW;s&h!5HZ$;6m\"TgK)WHId"'?YSg)6X&Q-??d/U^7MmSec#XJ:%isiJd*gf2
%ci:;Enl>g=.Q+A.=o*+3==gl.%BEe`V3e#IQ*>TF]j6I.rU*B>]+,d&'F;,(9j1OcEE3oLe8u!Iab^PS]GFBDr5R;5>A097M$P;]
%c$V9M*^Cn=alNHfq[9uUr9EKWQ]&cR'rFM?-7a_WD!hO%RQU]U>pZ.ZpP0phk>ZlH[_2&WG:55B-0ob@,65Q\;A>&^@k!g*L0mE-
%`USg%GumdmY4Hof?iH@?BHt'0IrO^T5UEF"$dD1nS)mZ[k]#a6>J4_![lsr!<OZ+?"D0'2T8_?HbrZW\.8,8S7Mk.F&-MsIAK#)G
%/iQ)fO^11f,M3phJh$6eKG>a@$AucubnM\DWFoU[Q/HR/\J]&qlVA/QM3Z?g4#eQ)ASPNJ/@^G89Q.3feojnYUccE_$A5YEA_%Bq
%)?sat?V.GKc!t61P8a,>[Wr*W[r*G%NukbD>qSe%a""Log2,:Z]lV;(.B79dD";]P.41b9$<0YPF@nHV8!eNa2KML`Lsf$'eTp#H
%#;WGds)dQ_Wc+Y^])CL[h>Lefr$@NM%gP\i/.qpU]L0Nd3_NTq+h82(73g%XjI##<S9=[`J%*j'^6d8k&RF]0*n":Vc5;8A?9Z:%
%@cBO([pcD1,=*`QK?j1gLC@1P(k+nR<M>4r\hl.':+&*C*Jp/*=UH0([a#nkM_41g<CliT(RsDgda)$po;shmJ%-$b_F]WTb1TNJ
%HhIFhMR4nV+j=oY([=[(fc65b5gS^-71&F'MYJ"UqlL'JP<.!-dO+<)Q^f!`X1@$_KrAV4\1XeA]Z5UZ`H96TA-+=D]bb-_=X6#t
%(\Vg=c%.fFBIDk^J1`K7H+Gj+7pe<4QG8CT>iQ]`UU>d>LJr?rQWk&;Y@I$4blF"]QW]WQ;*-EeViL-M=#U#=ncW.q145iTIE,g5
%;uQ4F(rW2)X^-gsOpJ-ND@:#((6k)-[m*?9"ggImn7YnuY95aQeVsB\Mg-8(lQQG1ZJ6O>=fX'GhVE1]Q_C5Ml:3e'fR&Ph=\+!t
%C*n@N?`csO!GiI%jTYZPF_f=t\9U;gYtr+q*`[)p&++iWmD>S7R<BV$@dPlo;b.Y[:`=%Z1S.SIV[/HV.Hi7aD$1b@_^r)lpCF*&
%"sfeBDAO>*O>Y:sQ@t=[6&H&-rkDER6re%r%:fWO"qatK>5V'S#GCE\N*4N=LJmRq37G6n.qlP*$tgm^(B)T\)s^;"!Rqr.[C+aV
%?$$C[@C6(a_gp@*R6X.%/42h-2PZ+bF4Z%Z_FkM:A+7%J?ZjUt)gn)FbKC<^FsFWn8(9l:Tgai3g4b'ac2bsN[h4n;r87nEljW%Q
%$<j?(48Y^`B/N]MP%aC$A19S3Ghg(=MFR$C7`Jf^L48=4^H(?!L_]WnI<VrmK'lXNinJM7r!HH737+*OrFaV5e[K\o`e661:('$J
%<GqY77eJMM/c>=:WEusr?g5!^*&r%]"R/X1fZ.Vp&[*Lp_PPSpCKFEMB;"T"fXU3=mg*R^-@_Yj6mVAe"hE#U%&BP(V$`bY(!SX;
%8r@(aZD6*(q-B>ILPN@Ig!?7_3KM7#@%1OomM.6QobC$1_qm^=7+l=S#)c[r_,:nIV06N[Ha4ALpROr5YdJlXijX;&+KK="YPd_s
%s7=ul+gNJIDUpG?/h!_sFK.\EQ\?h^Vt&a2I"U]TTN/"8W]c%eK?N;h^?mk;Irsss^(I.!He&kQDgOOD4CP<=L"Q<#<N_cu7:g$T
%$7DM[`^coO7h>:2Nb?)1p\&mLIfp?$+B6uF-\Bf<inks\DG0PqAOOYa-7GeZ!_)X-eCf&a05@hK5'De:0>.+i]M.u-gA$]7ZeKM7
%P2jBZDH+Iem$?]F"E!=^X](+u9sd53$dW&OrX]NCq9UMjqID:l<[cp?Z7fnWWk]o%Ue(hp4TOG."nXR.k&01q.cGEe)1>eL/JW]<
%@?/p.3LLkM<#!b\eHnN3AB6<F-$*@Pj(*5(OY:>h`2532k:<9"3Y6@3R+6X)QP(pN%]<'bU<t8e\5EU:-+<qnq55l'bu_4ZIWHCq
%q,?,FCV#lq1JUSsU.DFG`<WGe,UPaM)>%)bVhXY.=@2U+$KRA)Bsn!hW[S`#op%$o'sCg0ZtPS1f<grW\*50CCV'3/F?On@+)=?&
%h+g@N)gX2]A&.HA/T0J30DXb0m8ru%$'+8bV#PgMV*(>ZQkYT@#?L@*ef@pnWDPK@TZ4d3XFc!`X:Yt&<]ql(oE71DMEGZt@6mm5
%9]DSUgb'W1L=PT/M<"%KV2Zc8Vn:D&PgYlWU&C977sGgLB@8g`T*2-=XJuX-BF7Ya\Fl5."B]I;0Yt-uZ>dP$6k:Gf$XE4s@_!]0
%@!I:_>o)LdS&\F1:XBjN5FO3T<eU]o=j;W7WL"E<rh=K5JlVKTO*/l6Ko]0&G4N;2D$B90*7JrH!d`j4BFMG3kdXXbe><+g"tPXp
%VjD'_jAHL`.sud`nR!CHi<tO;R2A?&SPbSBZ?n?1k&jKr>k7]#h!ELjD(-9Xeu6,1h&o\@9F\53D$iR#mTX3'80e8:ZNi<jX69)O
%UtFc:]rVG?3`8!rm;^<6UZJjcEgsJu.]@7PfBrSk[#I^7P:KCtS8#4X>\B$P"0+.\\tBIG2QCj$bNiIBLF,<^'>ld^A:f]0Ng'qW
%?VZ][6`[N+eP6JUZ(38^eTc\RUmR@^c:7@#cX$ek*b/2;'*IHB?X@d_"281s0k#C:6Nf$ejnEAu3M2(L+6,mR73'T5%SrR'0,j"X
%U"Hi^I"&rhcE*Qsr':&rh:%e2o8<5j`J$%U0gO+boJUSU=Z3:e!4:,'$mW,pDJ0gSICe@Da<Q(F*OZ'>,^Dgu@bQQtT<V2r'9o%D
%(JjI^@?auS62C/lGQ4\"neTLLV@i;NI+G2\-2@YSf.ki:V:^N<NiiSCAqF&@o<D"j+4"8Zl8A=u@TcO>?FK]cmq_TGEVoaZd8F&\
%':g[a)LV+-e%.G+('$*I0\pp$7:YMPP#j>p,E6[Qo<SDj;67=Y3"k:'S$?<\r$\\$),BpO6_[D)_st59+MeMY+^kkOaXGrA[18f]
%@24f:=#a6;QH/8LDp133*G%EOS&-FCbSSLFU?k2GMR#>&%cVd-)\_qb\7$;T2ET!qHQ;K0,M,@uM\0NN)=(3G68WJjHekc1Q'_H'
%KB.f"+9f]*C;NXPIT+W>OEGlril(3T_s&5DcTeGTCo#I"T.uq/2tebTUd-<O-:&j/CZ'>PF]Sii!]B3*+60#C3Q#OO>mjPW$2K[O
%!bs&h!ekLSA_^`<bN`N@Ckg5'=tU0pUG3W9d)ks]>Q_!n+<SoMrFh'0<W0'R^[tf9]kGnSpUW,g72#>>JfR-->d`@\C+G(TJTr\&
%W0UL(lfH^?/hTYhYQF)fQV=7KEcWa4-]0M!(4PaH=mH?lm$GJpo',%GV*^hl9.WHj1jhlD/@sEXX:SRqGC'fH?eX[(4ZRn("M9lm
%*4PGSB+'^J+BF"RD+LTF&>Vt3BW2eBqY%TL'p@f=j^P(^A2N.&5U"7Nk0U%,EfCGmOcZL&<f%2UIZ80a8ls.=OJp[?p6NqSHa$R*
%>qR^?*#79K;WI"r-@C!0@=MH12jG<WGf8>L$3=@m[%<Lt=9;@m%Zo$Zf)<mt,R+A!judRK2,Nf4SVOX%o:`X_j'8)7LuSbGg3J`j
%M_*PbQ\nB*nZg\[GBd-i@U@itqMX3Uo)XBfd\ILu::^2Tg)T2a'kA[P:_1W&^k/9f[s+GV9iZ/O(KEen!@a.+-BF4"C?$'S?l`[L
%Uq@$60OMMbTu)X*(JuWZ1MT+?>$F[KMo@>_Q0=fU5H3F[nR6.7F6Sg?$8k9J(8DhT7HrodoT;JXaf7Y";8cY!AX!57@_ml[<6VcC
%r9B)glB&="Bg:Ud5.@WcU>]JOd+b`*-su+YX;C%k#ec'n#o/]Z37)6kFd]8$SAYsjl2ieG=',!=UFW64X)EnNi(,A9maQ.aRa#oi
%p-Ed)Mg;]KAs5!L"iXBe/R&',:@"\!@nCCXQq%K2Z)D4Ui.pW@i]`E$1%G\$&SO\Q:_-^Lceb*++8-^N%-"2V2YN;s1PMRnTH8;.
%&6"W,OM38Ql*N^f%>#]k,TXYu_^i+2mMl/1LOR?;i&(<VG#c/V"?p68<7Ch-enJUj"L;F,)SS3N:#@,i<986irX-,_bcHmO:_SM)
%JjNCh;YHOjMd_P?SU*sTEE<:N4kX!fkLpU`[Ik8q*A+Jd181>*PY5'&bH1;XX>9WTSh\eOr&?Qm$#=:-M!BWdGscq9R6&KK[X-?"
%Da/NP9[?7nI)%,)24nS.oR8G>TKSA!j@krjCgjO]/QWJFTJ>G>O&n;2^Wi4[SNcf/-0N/OeTCK(g")j;kNK=&G12c&Q$=_]`I:XK
%9C=_^;*LPG;*MFP&pWH5@0_,iDp`>53<UNF25#!6'=RUXd$jnJgMAJq>3\P?refD&KqKX=I'u#Gop*2bm8[R9W6H"(C98P>!u<=H
%BUYkcd,K)F<],?md7f9,L79J(R0h!H#C%`,Kb;A$CWb-%B?*ijkX<<`LN>6jf*G<O&L@sn>FHURbgSPV:<RH(E[nWLhd[uoG:':I
%e,fRQ!R)XSKqrDE#f)I@*(PlCeN;8ZU]c%FEJg+-BJ(/d"-WJs5TI>+'1.STjms!U)t*BailI863M6j3Ln1:Sc9a[;Q#Z\0"PB75
%`3Cg7]6#%7'-D:R4l.M0YrAj+54I8:<7Z&jO-7g"m@'RhGTV/$p,fCJ`GmMnb_.T#0/O&aB\gtrOTq-P(D[aIgMPF.6#!*R;nVRa
%+'SVCp\^9orR4=M\C@D_jE7[6Kp-t8fqi+s:nVEd=;=K1)4K8Y?%gjgF+I)JNg+1;U]F:,k*>9\mWCrVIFus-BUD,Z@`5JHlF/j`
%RsM)^aS`eNfgA07(c!+da4:pUJVfTM6`qJ7L!UDbT)IGP&*\Eo6dp\Q1r74GY*RXsL9W?&Lci'/=8VRg^@55'I&Gu"'cAn#IAD1:
%H:1V;ORKG8rFePZjP*8-)%<gRF*9!Cp(BW*=&?>.R]WjH0O2gUR&Cf-OcN*3K]85Dh[h63U2&.LBff,(E-(g)Y[8W>$[nNdjaALj
%?0++9DYUFjLMsW>/DVY5P.EjPau0,oW$k:!i8b$s=&9MU67V?T:hpYJPT60eOB#M2eIP[;?pi3,,+sb(;7a<J(9fPp&RF('[1*YS
%4\<C-W4$*G(\/UMV/s#>FD7b$6.B\T3Co)FD(_m[nE&`a0%\sgo?bVMYb]:@3fPWK6e$Hfds7Cch;kTGAlRf@&p9?bMR*$qd?u[-
%CDIosImD'Y%tVNScb%"W=[P88ij:5T&$H^Y(..aEd*c80WloG#pCQ)%)!#lh.6/.S\4;Hug5:IsF1;N\2):)>e;3MD>BiMH-IeG`
%[Y:]5!(DZcf[Z?G)?o.\?(/I!6>)-JT4c^)hL/h$I5QcR-Cjk'_;9F%+jGYEVYM[=J7u$Pq"ZVtLH)/$Ti;Cq'8&(s(V1dS'n>k`
%8^:re]p96=>rd3J&ZSe<ot.7-3MS#HW@m2?oJ1J5.%i\$RMPqb!P]bQ_2rd;:^1QLY.:rQ08W]^1`9lZ_A!tmq7\m)F/ah*Rup^'
%IT:#[11aYUeSWVg#+"n2+;sUbgO>>Y;6O:78TH@?P<Qo=/26!8Es,1#j%Z?47_jCLH.K`F:>1D:27jXEEe8B:SX:.MU\X``.X>j:
%EsBse:h9L*^K(2pWk_F&g:$;?.T"5/]`OY-=tj)2UWS@U0[$rMIMTuGpQR.G;2IkF@QE=%[7_cC.lFVqV+SQeL6*h<Kt3IeMn\62
%ZuT1V7(k=`+iP4Ts.72-HT`:^&Pu:#YhS$IB&O]-'c5EnlS4VsO%;^?T`fX."iY.%]oR:N8>_B>'%)8i<lpASRUFc9+-),P,5O!'
%F&YLs_&q/1Xg/1Eedn+W&6Wh04]nL\Hc9roN*qtC`b)&!X[ll@%rc8(jq;dT9=u,,"A=DOWUMLJ1se?05sB!l29<r)E:Dq#P90/&
%p2X:F:%G9?!9de_gQ*c-"&`oq>@f3k\o=hZ[04'#A,s1>K,A\A@eB?R2O>XX$Acp*;#/ptB$H*I9_=[3<>]"4MYJ8&/>XnmQ[`+A
%MC$3W(I<,]A+AR63jtZG$XF<,7.R=)`.[DT<%Q_H^_*"?C&t<gQnLGT9Wm%na;ncSM8,\&<De@Xc=p3,I46?cLEni;5[B7[mXfI3
%oa)OUe2&)5/JeKOYe]JNBLuaSOtF773U3m;c&]lT.N,3^>?UI]dPnEJ&'Lsfb$dlZ::s^M4o-U-_)&HP#jQ;JP+oiBUG/.B6"o0?
%U!CHdc?qm_6k,JmhW,Ec5RfbOf9hE\nu'S1,%P$:O,DEc\TELK)E(J80s=M48fi&DWL;epfn87dY]7&?Ln1CTf(1d:bq:n&a('3A
%P_,lkGm+in[%*GcjDtFVM$RVn?/oIf:YUR2%JbV!91O"K!VKsekHSJ?P+RiL8i2,lp7\l0'lNf."F41WY4jVM(DaD*R-,eJQ0W;@
%c#m7Y[+@2f5\EqVlf<s-oe4]0aYh@QNo9AY/o2Pp+MD>gD^AMem7\N/f4'/*TuGbjTRnd80.OsjUl.bg,fb`l@688seEd@=aD9A)
%:$-3qZSbAj)T,oK<l&;=#on&+&f%4*`'DTn8fHj8OI@f)D*]O^N>:OiJt5h)V^isL"fp[VcIt"d'k?hLeH)%M<#s*YL`XT+]2<]M
%W@l*)ms=M/&J&^A&^Gl-!XG.B5c87WIQE-hF;NFX7@c.*fW34Uds0b9VDW]TDX;E2n9/YLCf'-1E;Il5'M<j11n,"f8Fh%'8^_H,
%#.kN>JGa_`eo[(,VkFaLJm(4%[^"-H`$'hcdDb:O.b9dleJu9Yehtb]YB!fG.:!@SELkEG.S&AW7srlM93J!re7k/4S(fA.cUYiL
%`B>R4"X,\7*e]5WTpbaTPS:]W/2CXZ-EE\<UO$(g3aT;mTSla,.%=+%HtKrpY[3FkXpPk_?-DEk*Uk=H-2OJ]O5M&nCL):q6tVf1
%Pb<0&?D]H<)+-R1j,f:)Tnd6o0u+O<&VqbdaRh8Z]rEluj5kZ:3sI^Odq3Qm`,d_[ggiCj_e!BPG``:Uk<.;O'q+$J@Ysc_T@&A_
%6ZfQ^BThP5C/Ksdk^_9KV"!K"j+:#X7,*`fOu!G@k[#\&!d[7/pP[Z?f!W95/ZA`*]P?GY?K&`#7nicP$3?qib8!ZE>bXm-c5b@"
%+NRN-%)kH5NZQ]k[HfQ)ZNSS6=(t&>S/^b/$$u8FKBa/;##d\*G,IuK/5Dko>Wb>=dgkoH1*HVeLsWK9RhU)ccQVQc4P<?$XeII_
%7&k%1%qZj<6H,/BNT#thk`$cTYS89B-Itc_V),6`FHpiU3.taMSdm(s6-Kc'k@T4o5C[fGrQE>s<#Q^YG^s0i[uOQ,*Cg`C:rYOg
%9\HKn$#rKTmgmS`eYRr*cI\bZKqWLW,!CpjL=?=f\'$F!N[>N6_qoG$+]VpKbE!5G8*)m3BM+D%+CV3"B3i!hdYeqAWq[PdXZ[f`
%9I\rt>.I5d7>Ye0.3l_V2bKAXBp_<:)8]u_bm5>u0$^>!^Wfmk6ZUfT?*g;u\q@)qh!L8+<$I)uTEacS$;!Q]LJYT<d0Xe&r0*a)
%JX%5!=4\\b`M(<Q'oI[qkj[.S<2tnCao4a_p<k18-fMB,m(OLj#m87FLIBm=;)02E(=4.(GIuQDWGi6ms4f78CcQk'Z8c>pjk1A_
%*/c,8iRc<G+<q/+V*D$b-9Z!,*UknW<@(tO.FO.7Xcc1"Eih>9aJ+Ej#;8RsabU[5M'>gPN8QA]kVpq7pJS\!UjinuD,tOD#sfe)
%+$UXFonXat"Y*%"YY#]C,k[q"1i*ZK[EH]2R[4Wf]FhqUiPX\+BN]bHIr*;FXsd^LhakX7X'Do33'[cL"4a8UEG^-<2HIm23Wap(
%H#A`Q,1i\5f1O%,Xt>ZA9<&9&-<e26[A[FEMu]=/T.8;SKEXZdj<E9,\6VSgTh<g*<Dk?fkB7pPimJTPnZJ/34O88,*dd+Q\He;2
%]1S<5bKWBSq;K&*(dR:Pi&4%l!iV)W8hXINLDH>],>?&L/uZ5r'GGZ$DRYX:kb-Go#;6,$1*['b<%%BSZrh;OE?QlXTO:>_fF4n$
%I`alJ!Nk,.XM2B\e;4&^@o58OBc4[ADO8&@DG-3VPn3j,/+(affbK:m=OrH3V<\;QC\lge%h8@un]:1S[BV>b<3jZf[Rd*3hNSW"
%M%RWG;"6fO+;1O(B3@p_Bula9W^n]0Q1W!&;L3Sq;q1#/NSFJm+.h1Y[97a+B+1\$+NYSYp\GoFQ)*tDZjjc'D"A=7REqM[>g;Pt
%d<5+\?OR^?TUqnsQrY4VEieogHljs%RVNB.d=mJdEPpS=kp*7_h+(1&$*mh'p.r9`ea*0hou?`#&;6e='3B=W,pk,lP1+d_j="Fs
%jgi^kh27uPb_A?0ohrJ2l&ao+cRN,cWb$O]2[R6*SkjsVeGORR_QEX_m-g\9e!UN==:g_.5rN,9fDI8%Ju)"AWd)p.EOiSiZD$#\
%h!r:!9;qb*Q0`.GK'tTDV]e(k5Pc8JZt)!t0>EDJp[u/@TdAPA"SAPuTu]8reTb.J_J>'#iN$Sh<_CcSfc^.Z.K-!C5.OgRD00M4
%d-V7%fRp-`b=V?-WKu%B4Q.+#.d&ukGqMur5'se69AhTmd7dO2GDBmSH'_2\@V+k_&mZAn<BR0jG9/As>$_RJIm.5':FWYN/3qCY
%FAutrG5M5rhu-84K<^4)RiAiOfEe>^<5+'C[4(J>.8\^j#8H0-RNM_leU'&]J3l+d*AQ]e(9:#gFX7elh[J!I5VMhZBWk]JQUI:d
%Wi-KGaqD&qP'bFK*!qQB;"Y7:K[t_tF2V(JcnBB!ObEi>bG"j8Z>lebBklL!,.1d3$E@Ib&NnmN?ai\'E#Q+fdaH2F8f8A$Xu3jm
%P\@HZ?"hOlL^QOAX&;_!$NEJG5Bb8?gV/;J;$kQ9Kq&miFicf&Tg2b`3C-O^"Ysq5<Jse[l_9FucfP<%rQ/FR_[%a3MKQL!?fr/#
%jIIjd9>o7QqE[1+V7!q+F:(=A=l;H%M/8%$&,qSK:EW)uS2IB^4_>D;P_cLdO(8+=`TB`J>G&*WU.I[WmomsirPR+GGE)9i<StON
%>.F5_2E6G=MT0T/T\?rbfJP$h3^FMo?pkW4Mfp_^EOnjFn"o\8,c0Ura-oU.e<ZRa!g6sg(X&r9:VAthScZ:M=]7qNL;2/m+^ULN
%=pZcni:itJ^5)#W0AY/G#\fQGAl]pbr.X:>-d=aUYZj7ek]4j7On/ChHI8[0hJXl&EqU3H@=O0*c^>aXbpporEPE[>D$l.\QlqQ@
%n<L.``PQ`54a]$M,#1_prO<L8@J.(<.(:QLQ>)ErC;E"Xkol^i*VFSMlR!09Qn?3+TLIN(6Yt:q`B3PN[`Ju)q[unI(R/)SS9"8&
%@A<-&o.=!F*8]8e#A(UM\PD+)>J4e$^EmdUZ\a9bBXQINZVD=S+mMio$lGE4^&.%F^&M'7n0)[2[N*3U_TVbe>tC+A)eYQiV&(Z4
%TOD,]h1-M9F>,At$qLq0a1s./QD4r+T]UN=b;u>5m,ks`?lro7'f"O?hFU+`$s*\/)FR:OBFmV5SPBT&Bdcmf=#C.Yj;L$3U.\?9
%W^3Qq;iSC\MTl36YY2jsCQ=]daZSN82!\5flaKdlrLrIL^i%+Vmd+)KN.qJb6$7(V`]:&0[s3/+<cYq3#@Ep*Y&pX`\/3VRVO7M1
%2**;CKP'5I&UbMNcK2F>O1r'UI0;$tRLX?1G-*<9,$QW-S;\?a_.M5/cP7*$C]DLi\p]L&EILt'leq*]OJg7NSL0`;STgM#9_.VJ
%+<UIVI9XBue?;X1s7u3!4#UA#M_+_M(%H/iI\Q(;T%+f_"q#LL-#qVB6E*.#0C6Q;Sc3&5B,ahG(dXHS?q[(AT5/dGYoQQBpG]3b
%)9om;['T^k(=$:D0;!Z8G]Y4[l/RPhN.LhVjqZVs-`#o'!tK@>Vh[dQieu9Cnh(Ls>V/q9Vhg]0X"pChJ?H9\Vud3D$le@QHW=a2
%g.J7DLF'rn\l9S/n?>OKO!U[j?%9NP\.?p)rq)b$eur-2rtK>24cFtMD7GQN:+f(okdiZ'P_RUX3hnUhg8Ls=!L)erGk-r%Fi6f=
%e^A=3l:mk!<DbquJZ"V#]P9WR`G-=868b_,n^^TZnES&`3NS@;,0@siXFBiPTr86KS@MF,Auq"P"SHq1<$t\RiH@j0+_;)H>TIaQ
%J-iSp3X3K5c'h5[c>r9*E,P972!geho11N%!7bt<F6R,7#^&jp#qrdBeqbMjVe*Th=Dr-@V5Sp5<'>2s1C@EDonEMoL\p1Y(nUIS
%omjVd'Jn:ndX'\&O1<W]0U6`fSE^#*Dt<pNGAaOKA]](D([+*EMng104n"`X<a*M[$#XQ^cqdA7DIc,2g9aPAqY+=R(btd<kL+XU
%1/Cr;6p5'me66Xk26S_Z7Z=U\[8P=#5#7NGhW:iu:-m5OIJV$4q'4:*f<[h8-6KYc'%PsHqHu`.;+<0:g!N7J1"##J)a$Sib_hKF
%TacgZIgBiF^0Sp`-JVCcl:IKE4Dp`qBBsFM%Xn#oXXo'M3A->F;V,dN9u]T4`P5[9OsohS?4XBl6%*$T.)e_2Uhns\4i)%]-P<I-
%cq%EL#]V)#+)#]_,O&1ahp,%a(Pa_:"\m%cpl3F"s+:E]D$in"5_J<O%G(7JA.)A_pV'Jp)et*QSX8Lko,@CS_=U2#WLjWFpHUcX
%:!$tj9nT*:+EH!@\OP^O:dd0`bL)!T7$`hJFps(8H42/`:4J;d7SQ=acOqb^[kP@@B*JSUWE<n-dH;t^P=ZseIb<B;<j1R&JAOJ]
%MAMVn3j.O"MfO24N<;'k8Bil42rq\n2FQZ"hUSka+$=t/"Q6g*.VlLlch<EYd6>hN]RerYY=$ucEhs8VC,f3(^QLZfL]_pkT(n+6
%rY[6Un`=HU$dX6t`;0p5oM96'Aue7i+>YLtJ^WFJY1i]+e)2:@caZdrg<hMZA<s<k06ttGcQE&U28EkP-c:K_Y=,CIc%8uJ_KhNC
%_q1fE!/IJ(cnt&hk[/FF.[$h4kH*AeC$6/s'>2!CN6@8U;;Ocj/dMG(+<D^tGJO-69k\*;>t.h.=0nmh5VH37+ERZ4WM+)#S),K[
%Y$`eVU6"Et-oOV=Sh^*&MdK=+R>>="OW)?4(\EEmk7V<gcr<;0U\:?g`YT3Y+.BAY"t3sW.O,RQLI#>1h*%S1J/6'Z-H]a_)b)7.
%MVTLA(r(FfVgl^krV713^crRb6*>e0OcP(<QHfQlG(<*tRbYjL;u*G@\/;?Y;1r0dkJ6$FV4#-_&(>X:__q;U%e;)?1o-__^!-["
%*$2L(;%tsYq&(9hh^<3uQq<WopdJ>k[i:>7RX)2+j9&:5J=g]9b-DU;d%XB40k-c;F<iIjH!$_qM%tejf]>S??^Od%=ZY(=MV]N4
%HI,W/;HcQ8ZfE1o+[jOY<*uc9>bGJd/a?IP:uM)N4J2U%30ZmP::tfX3oBPHMdQ8f?e(#2'lQIW:oo^TU[JigWRZ$g1qpKT:ADdG
%%7@j)nP%'4K!o:+GKJAD64BOVajoSpe`XSF/r6f;m_#`u%TNO$+'8tWfI`=:Q!!CM]@X$`$:0=PeV^$f,/GPjTZ!MIS&4@KO*lr5
%j_D*n2T!jKYTDcuBrOQN&Im2#+n)-_U)t:"&Q2bR.F6NNq90[@,0@;-'.?ldcP@!eMC=hsb#6n"&b?`[0UaUD=9^3*ELA*G\`($F
%l0J0B]t,9PCWZ@g<rMc:DOg]Q@&/hu+f^7^YcB*dg%ipNWQl8P7r;.LU_4j[q'\:UZ\XmF6jUN&H'TGm!G&4n2hP7#`jp^h5kMtt
%lE:s4\q=ThG]^?F(1EG(^$MZ*7L)(5,jD[7>=K2@Q4_Zs7$DC3&LM/=l5rRH14!>uTB&[Tb76Rj=lPemR80r]h8QS?/*qRSq5]`1
%]q[t7Q%r0&(<]`W/iQ?9'&>MAPFf;q,naOCL9@Z\3YI]D]+J(;)JD#0GTc]/pB(M_!T/4B-n_Z@KKn##oa!+Td1DQ*STa;G8ZF1a
%msAi7bL"HUMt[Ln/nc[LYYCNR'^'X%;Q8\W+V+`dnTDuNR/Wl8<83G"bG43@CQqK`+m@iVH?7F2jSPQ+eGGjLl$PBtibUNc=nZT8
%2V-S^Cila6M4R`po"L9Y)0&O.;5fohN;0W$=gLMP$(>S\YT]4'Q:\/SQu[^ToKZJc!RV]f]P1RBZV30?$heZ6VBW(43\A`LD>UP9
%4@Y-a<eXBX[G)DVV0TRK?lE/k:7.imP/H"\ZJgjYS=qtd@Q1HiEU-?nQof*]6m=1WT5_ahDRJb>dilAel./b4=e4_^q3>D^B`<g6
%Wp!&];$qX03k_uI/@JcLFAT]CDC)tqnhLYcZ@KI]@\-&Ll)JV_)n'9m*d.4@EUdN_J7#<.U#Bi36Y&q]A;X4Om317]@2VldMi(+e
%Xe8!Ne1cS%iFoV=,%FW8Fb87HQ@Kb,biQO,Ail5Rbn!3B81,&Ih2<rYh-1+ddQ/[ZOq\4'-hg2'cNlZVU)u`h#3*(oF5k')//GR^
%:f\C%em$S:g#m:aAKsTA7QO>hVfH3C!>ePUZel>hRLU<u"Xor2/VP6JiY5;..`E;GX\l/B>sQ5"R2!.@oR;U<'2h'!r*"iGM'?70
%ksG+[#BRPj*OQeQqAaP<k0Xe(m.n=JXB&N%FUG3(M1f]+2OpT*j,*#tLLVVRm_-^TPo5NN7-odGI)LZuG%f/<:^+7j9i&@hP>9I`
%TIY28UJoiA_^J18\O7apN9L-",rUs)8pPB".qQ=n&G@+u.c3>G2<PC-*(D#V6cu<>'1G[TXj;/_T?7X^rRl,hLjAXAQk2DD6A&VB
%cQC%C'c3"md]geSL;i;bn_<Q@?#MHpFf6.=j'8M9%hkDB(i;J+.48-L``2>/;9Rpe+2QIQO*6R(?u/SClL"G(<`t*H51j&I]*&+Z
%nOsD[>F.J_RApNc1uKU`/*i)PP`iH+,1>/r?+[br<,\=nMqK)M9iP$1WRB!ba/D#,c3g@.5FZsZlbFEO_:UBbPskQ6+[^]H_bD`)
%YL[hqTI@[*mrbY.F)T/d56dBVh5BBg#J8\0--F3,lL8A"nZt%/[dMKhiiU04O9B`e?_2:;pt;1W0pQoAlq0A6/goasm.]mFIcXH(
%aDg%.J%irUgO<YOPQbiRGX*V*;Vn/iN!kr%/M&ig,KZW_;*ns6A3mK4LJ7EI''I9>&=3e?$seFIkJ-U<&Gut<8Y=m(e9oqTU/HU.
%VlP6u?5sJ$;uqotoeH&SidtQ;J+fZX:&ai1'BK>t.Aj83%I$7n<StL^6a&@D:&'KniCLu+W3BN]r&TL@Jcq+j^6Y_@-%PWh\KP]H
%kqL]!`?_4crjA7'I?<GLENre2O2);f(eC2YCQsqh0]gOSjmQN%SY(%lI;UPJMK<kJ(CcgrWteW,.\7L`8@V0*P!0`bK\YY5Gh!'D
%.krLdIdZ>U@Df^c[tj.9r_A@l/:TiT;_*334Ar`=M=rb^D%HMpCA1JYd**Wq'Plpa8JZ!.YkfRml;XhT]e6oldQp?"W7tT]06F9F
%f$a?PcZIn&K'[2K4>s.6q=)%frcP:dR8QT'-`W2]1WW'FcT!4N$Q:M/)m%;C!_>=2+U=Ns6^SGgKPK7uFhn$DpEg)W6.]+pa[UE\
%/a&nEMo)>7)0tg;6#+!u!Q)XAKuLru_3nl`1BkRGL^O`GSL<<F(jJX0@HCnP,#M],<+5&-0&Eh:jPleortUf;KCXg,?(-I0[V3dh
%Ig;iu=3XI+3H=###jsTVXd8oR,Z0NAK-sGjj@F"c*461+YmJR2A@H=Z=8',1%+5Y2>'^gJH,6:'ghpPQ(Y(S+9q+u[dAmeXU=RCA
%:kXNiK]L`YKa`J@<d5+Zq,TU4[X$r]'$Ghk&^K]W7#;Boa<*5I]F=f!Sd5!ae%IHF?3C(:q!5YM9(DMC7fht;HtK!OQiu"VPRjVf
%*'RG36nT#$%,bIHVlS+q</*3uR3?4U+j1q)A;V[+%2Z]1A"W!4/#\YqLYi%+]6k69_cehD>931H39dm7Om^(l!5#.W<ra3t&c?Ou
%+b;4'%jT.<lmpU*0=/WO$Op.mq(>>*=<j*Z#NTKGE:`d3TJBK*\"6-=6p:6k=KnF1dAq'S>I<R+f47dB+a&=<F0^sp/rpG*h#pR^
%L!kR_LjN[Dq#hYd]pu1u2<,RYfb>`#'sD5&iPPZ;Ti*T3\0Q<2S<=5,f>*QDm(YkD3P,mK)U3Vuc>2!00glH\Wa/OkcHV\ul:&_$
%QFO)3fd)o:6!o7_A>,2UMDX7JE-!?d$T#DT</SLT?8T3/DCJ)IhZ;%76Ab8k9qDgO!7EHiDFQNfrjs!#osKHX>(-E%"eT]m:5JcS
%gtfpn<SscX6gKZo*K9aI^rn"I$-+4.F'EX;jT%uJXR-6U/K:<F^o`)U/,ms4-TGk0j$^![_,HZ*bq\oB9h+Y_d!WVifBVm<bDLo3
%8Ign;@LJN@<Y)jb#ues/%$bLhA(dZiLLhX1p:Us1U<f(h\lQB)QF"Z?ZUQS,4BWd\:JK,WQFu9dCXLmPM//c;8S$'`,U\S+GkUNs
%%N<(G.elIf!?@3hpdsN(Ted].kjG^k'LJrJ%41\lAK+b;pKA2AKUD:R/f0@*p0;*!99bP<<gP+JGF];s#8s;lR,CtbXf70Y8eA%^
%DLhV=kIs?jk@Du`kHFhU?A^[UqQJ!sn<ko[Z_jGfi8Sa8.78`5/O\:hS*@as)e.`/K6/Zr9n$l5XgA@&%[-!sdSeW;&B@^ppUo8;
%s-.Eu2pk!"0\JuJ/$97+DjMONgt^EaK7qjaWXA996GaTYR.#1`C+Xb>P>%h(GM^2rS-c?IQ<ITkB,NeA7#i"Q6`$*Gj2u!qmLn8P
%)*</U?c,X4J/-1j($AE9nCrhb6Df9'>??i4RoD^n,)S09e?latHkE*F@I0t/BOq5.bk'DM[%_0L!`fj8[YR+@(F"td--c1c&RQar
%q:U.UYNqZo[(+PX_$eL@:;TW3hi+(OXVn#Fk`?mL,Gt`j-&XlY=Wb7s&/$?*:1EhrI?[h^-nUd\5HOU2@B%0W"7ZCVbTM-&)qemh
%CtP0<&=2r0X,V0O>CQEdVLcDJ>LmN9JO=Ql6eH\/#8]7YCh@\k$@;Ukl0@jQFe16icGCuY0TSk6kP<?C)1YqeMH]bG-Ba*+Xh>7)
%Te_qk\dK].qp=%EhfNd^e4jkPPl^@urctmri,cr*G*`#TN18>a3#t7%-5Nr6$*3KoAL:MPd0G7?@PLa!TX(RIi"s@kq#5d`^=>C\
%o:3`,DD?)Nd4%>Na.<\FVu#;f$[f"7]:#$O*.6?m#\PCLYRGV`[\ODA/T\qXM,GTO>O^h>krCBNpt*00lf>=(E64E'>eJW7mgF>+
%4-rZD#qnr3rm*Nc7U`3T;)E2q,\QF_,<tFN2t(UH.:.)S?oA6<K5@?(B4N0Q4W7P3dTFYJk#p<8,UQ)hmTU;;Ra*M(73(UFB3Z.1
%Tf[Y!!82*GUFmKL'T$/flK(/=!Jicgk42n`h`>Ufoet0%D[rZhjAnSKl'c'p!OQKd7]/t*a$bT(/0,WZ@]#p>Ws5mTO2&BB.T1Oj
%X/ePqGR^"a"uYEM;BV%MTKAa:?qn4:,T+3tD&&M1C5#pQ`nBpmDho8l')J3b)uCMu4#u,u'ka)"]!N6-`nXjd53_l=Niau,-(f+s
%N&)m[cM$+OdYX]3`RbFGot>ad4gZ8'i?5lK:-c-*=V1(Z5BnHcgfl;KRO>c/K42gRBkiGJ-(560/8%km5M*UF"^#MBP7Z:#2KZH[
%*2D`o!U^)Sl"&jsNAOQQVs(aZ55)B/GHN4[rXF)an0dVU&BAfOM)\u@SIOJ^hte?rF"H_FLSF!]YPWpNP:^u^?km01i'IS]nl.uI
%&.;`'H@?Ap6NpT\[8<3\@c-E95IB0R>K'$=nR]HPVaK]:<N+O00V!ii*DKUkGe<DPI7]q5>[hS%a)0L/3;G.hGufV6RjHqN+?Vo)
%Vf@[Uk%Oi8f^5VnduZ-$RP*X1&L#XL@t*4gL9TN=SoiGNmjmE4X:LPh%('H3"Uk`Jf()t'k8N0X2[7"M0[`#*DMo$UrY[ZY7W^c8
%D+RhY])5C%Lcoas=;cd'ZuWNerl,kni_n(TTs]8s0_tWB0?Lh:)``soP^[*sP]0"reMeCFXC(>+GX#jBSZ8p^ZNiP`_^F#UG,3Z$
%[$N$k[VC?\)Xr$9ILRK]/N!rb_6g#i7iN[p*Ce?3V@f%=b8]2JfuGkrn].rQQ6<d"r^fa:&7Q8,e4F^%9>,U@,OeSN9p<#?#=<@-
%=roh@7&?(Q2XKi@dLCO#Elo%''tb`]b40:.+n+7KYtEu^CuKm)"8'KN5*NX2;Fc8LEj\P=Uq%bZmo#0=;k,inA=p#:_.$h]Y[)qR
%mlZeAo_4=gKo6N[0^-rrkMs"#dRA@6H*'ah3i7j<JK(]Sj1LD#kO&2`#b=k>1rmpu%a5S7N<:jLelX0Ud$RlM@P$mhgFE1$rh[+!
%C1J8[9;n55BsF-8?sqH&_XeVLPV^-.5@)[T@")NJ&ScSEN5CE:?)(qI7h^_VSE4d2`5Q0m4c2E0E@^.UK.q`gA%r>j7r&.d\X%e(
%Dg9+`h..O^[r,_,H*?u"VI_HmE^WaqX@aKo!JNNdT-i4`-Xdg/XSXO]6'MVX`_LO67b2[<5C>\5T-qnYem$#A68P8'cD%uDUPqJB
%GDp;W+<KE.;!P?BrZN%NHc?n<Nc.6d>;t\c=_45aiU-8_c-aF:*eir%0\\5I^^t-<1;ll>C<*b]=>gCTL5VJF5l*C25VS3907-Dc
%hmgsCWdjQFUTH&`0-4bIXY>Via5\_:T^F$>L2d/7>3AI%rg7U"U&]X[q2kWMlL*H)_K4_u()MRnhBZ?:8YR'Q7[GEX%IQ\YSas`t
%W1)#$.(1`NJnpm<_r9c0WNQ)aN,F62OGLJdQ\T2R%<X,O]V\:R;I`cb$u#[`V72&-ZWB9dN)rTphCo90fjHG[\4CEj0r2E;L=?Ks
%q'1i#>j[<#`LL2>C:Z)En&<paqjtCTl+)EN:!=0ikY2QV44#`Qa*BR*Os'^fHTKp?Il+/]gX=!fLD@c^3g7[%AUTpd<7\@Oi]nmq
%,SW'NQ[F?%PHM6/f/?&Eg@WCRpJZh);Bdl(a\NdejI-=t6Tj0[m8WM)SMlJs!V"aV";t*8&9-hE#q)41?CJ9P`OsY$lm/a;pP,1$
%XY^QE/UVLO478r]X.n81`J"IP'sNMR0!%s&qc<I!dc8&29p/WeQ7W1k)"'3M6'Cj"V1eHdNc#$0oYIu-cG6u:8fU.'4<?=T`n$2n
%-U/^3aXfRP`46l>,ak:p)#84phGe?#qghPQ5/_Ci0t?./SPWt7Ihr6o.dL(]f9BVr.(.]k;)E$#k['7jcFrM:TI.H%KQ0&@j5FLu
%!i^%Z-T:a8($4e#[<j5CKsLVMmfB%q0tIW03;F^a27EE'H<pW:(pZgGBB3aMR(H"9AC.+cjl!M7%rZ2M-<rjZ*DP69_2VQ/:!nJ3
%FtYDldc`5'O%KXa[^p`.3?n4hZphJ1Me/)i^%8TAmsIp0X-QdhkanaU2S`a&q9[0lDXmm3fR*8<3\"(@*U9t(5l4u"@6I`@F&=H1
%X$m+08I>jZeag*&VfDeLcIJ!N2NIU7@$28t<kZ2G0f>]Y>3feMAffAS[s*>qM*IiFo(/ah."XfI$,>m:FL5GTqfFCP=^^6%Y/jb_
%@Q_sWX7+oC="k8Wk#p/P5e;Tt#c?G>e?46999<T63iPT"6$<PA0rK/;>SaZ,`i'<b4Co@(CBpL=P3GK'%8(#iOB=QmM(RFV<jq3m
%%r:EYZRj3]?YE(]o-beo$QmI$N_\"HQHoC)A`9"cG$qSEa@]`c!6nCl0lUiir,<%OFp<F$jXS`]*=n3qXQF6G+a#>A=O0B5pV"qK
%5Ji\4<h7G-f1a&3RdkBt]Ch`4-D+IH@kq9kNbrn"JCWh"g.QTn'8U)8R0,g[3J^,cio1JL)$5aubMd&N<#Saf?&FORS.hj2O''?,
%`RMiNYtXTdUM(B0<#`!3@`e&hDm"hO@B"hr_]k==7';e\,n>I?jXLYG',IR74'Xja)'F56-87tm*$*Cc)b_qX$f[3'*hl=([uUD@
%RN"T-$m,-,GUmE[;/49VZK)e-"E'M-:?qo.K;4p3\]@#28/5ff0[cq)iOYKZO>aJI-J?nEFHC54e:]F-&5QG__c#<->$mJ/RK4CZ
%aQ(bm*=d4%5l,TVLp!$8/fWg!;=eI7rC@1PfbcTtIKlNr>D5PSTD?bjTheMr$MT$u-^ISg(P1S)>(`LgP6qk/F6,08k]3[DgJ:F-
%9/&_uJ=">-a;_MVcOk.2#S!TC,W\.5eJiY"k1#pT4egM7U=<:G4Zro<*K0j$#"_/:eZF$(QN?sL@eVT#_m\R)l=BLcFP(3YjulED
%/RqYqm((j1VL$[`GJ!@hLZa(#F8IB;G^I.HitU305%9**"i&__O>QS8S'so[`J_rL#\RoO<=pF:.APEejjj-?]1X"$@:0_OKbTFq
%"4V'[Xd2<=<S1+i)FDcqc!?4RI3E]]HhV0Fpeu@pkA08imWqa*/CX@RI]RR.PXBJIR]cV-QM/+nih2-92*K%+$MA,blrFk##*F#A
%Y!%Nlh5XlqR#Pmel%`A(*/[djW<T=/RBN1^=!O_m/<aQ\AXooFEd>-K"!89-2q;^7#FA"^;&7Ajh7,/-1@Q-coX,21'lb4][Mu4&
%ckNq6YR^A64`.U:G65n5Y:@aL;a7I`mIf&C+2[5#H"cf7qD6<icMB7-OOcJ2:e>[1iI^_R*,69o,l-]o^TNdc&4Epq$VC>!-5<4N
%^qK*;2oo-Y'NL\Q':Dj0F#g3T&Nu_m-6`="gdJK.E%h92R!"G<A!\:#<HTp#]5&5$*HI,Q21NlkE=-#GAh!b\7]KYHqpN8b!`V'^
%BQ-<RGk'c#9E--t*(<Ffif$gSP&IJl\E)D[&+=bok4BrY8_%*-gCSP@[]CZ)G-DIo\I!`=F<L@G8?.,`A5k6Q>9Dr0>!?N(\=M9l
%[J^D?PdDNMJVlkO_AO<58K`\\qNo9QZ*4P%95(mbGI+;M/<WZiM3&KRQKe*qn(ks7r>Ji+18q0[WiF^LARBL%Y:leBn>0o8'Em@u
%/6:2rB:6'u!(^GHW6EBS\uX_4UCiATE;+9YjBiTd]J.iA"oc5EC"a@ZoW#7*cf(<8+lu[Q<@o-H[&EchYSs)oL%%.D]U"2)Yq-tr
%i:]&^-LiTT=CDUt5,ki)@Y+.qZ$eh*#1UKt6;>!?piN&<RO8SXjf,8Y-qJ/dAJhR+QLDc9<[GHh<:aI4,/m!n)2nI&)T+<UZkI?I
%T^Za4)]=i6c66?KiW<G'PObWeH>"&CqOs^KaAd>ALkZ036$:&N8"5NMOL$]=VkH'%>"Ua?.rV]HWgI9WmN[u01Ds+$Wc\:A#-97O
%L@da_E`)<0MP;Vm=Vc9P"9GZ[DlRK5,685o`&H]6fIkHZFt0dC((Tgu!b$(B'sWLg#TY6q4_a%<P=j7qo2L'IA=F86,83MOk5!q]
%D/NUnE1P\=$5ELEop_oDahPsN8T8Mlfa"\'8igIf1-k"r[-)`hFJCJ=gkW[%c`#MIdUJ(!7T3%?OY=LlD3e%qQp]7q^HnNNa3"@5
%B!7g^c[(2,R7_7[*YMlp8J#-"2;Y1:_hXf!BBV[5ZarB(E:Ao9cKR!E%,fJGXYNU&"prWEUMqrUM-GAt9oT_DTi;_qcK=sY**/mS
%34U=RCZ<f5H0RZYom:%J`s`!r$%kpc^+#HXN;XQh?uc]Z8K@03#)gA=j=KZ#j3TLBaAYK#*?g4\?L5m3,(77oj=dUAs7nrD%%M*[
%M6H83\P?N#Q.DL+VX\%<:kP`-$%saMDm^R)H^&%KZ\'@BGS?SNCSJ6;;g>R+'@m;S7Z3tHP#$e;DW`bt\`t(oWHsdoB/R"cdr^Os
%>?:'<I,6iTV]a"b>I-`YA``E<l12'!N+3'I9Kbg6W`H%BAT\'3U7rF02!:8K[FVZrII!+Jo=I"]GI>bI.J[IUSK9gmR7qZL;q-?$
%HF'F,NiV?%OsMC9I]EL`OV,M^-A+*.-'8#8arH4Jq5RpQZMM(T=VmuErJ#QhMR%bO5%rN-\9Ci,ptjoUZPUmKjn",,U[;16o%"4N
%l#3t$3,Ms/B7/QYqAI=>]0:\u.X`T@LcK#g2:gegrD?/=cVBtZ'8_BTF'B7ij[8'oNffk2.:+@87b#&8@,<BFSEu"UDAX\c-X_TR
%bc;agDCd6H]rpb9*"7Br:Eo0U<B"5I*$mRR+B%T^/(P!VR;GK8(c?uW2j@1X[;((aVt_0TMAUM:mlU*^@dN1u,ZdhW?->\;l*@%f
%>i+jId8:e>Yah-R0FF_Wb>,=5cGp!p.-ED*FE,_UnN@R&)3$+TM2+!<hA'rmAa><j<13=>Ebqgk[lZ+;*/7.o&jojcc<Mq'#EqE2
%n39L**in%)[Hb28c*M+RmWThKW-d8B:Uo2`n084%\r_8bWP'j[>Ejh$LhR;fO=X)NV!n7"D&`S08]-%^eNcn:-%MSK8KIs::-cX<
%CQD`.!lNp8o26#<ENdHf^:.@=[+(9dIIgbqe:<k3M3n:Y5MB:]]=261r"uG(-o.WE`(!q+&2;[]Zm]thSa#?5']A%u^/%GFIe`gk
%X-lM`k&0UCACN0520gCNGo5TQYV7oMYjQUT^jDDD#KuZF;k'S?b))YRWe`$4Xa/ajh,tOp-hbJu>/Si_Qr]3B;Lq`S">Pa`mX0bf
%.bmoC<-3<je)@Z6gX!T0.r2%87ZflLpEq!RkJtA>+NGtA"Oi=R1pJQ>ET1%`XI9Gh-a$7/meZ$/!CF$c2oH\%=AD>$^140bdu'kD
%&_5+ZJA%LO$-b1;B7HmW>Y9'7dRJh_3O[3;J:%11.t3r,6<&KIN\<V$I<kDs=m6]^+I$GT?q.:^%OB)'aXsSn>;"]RjNge\d25lp
%E"Vf47&;Ss+nnc+%PTU^'4DU`,'to;TIQG>S0*;W:g[\b'H<*5R]E9fCHCPK(2oqd8U("t*Q31=/Y!^l*4K@('1J,+9oC3=eWQ+b
%<Fm[5PjD>Z;-n8A?`%1c3d,:o=,707-Y+7#QL=a`6Km>4O3p<a[`h^kKklKp9p!13K81:=O8!6QlA.K]KLV8^br+q_$kbAH:!m.7
%4=)@%RP'HLB+!O]AV.\Dr2\0@o@"Eg,#4[*Mh^4m@r1GYOHQ+]SupIKQSWmZI?,XRKm-QdcOShh:,Z]*JC7hO>ONOi3)nk`=cks@
%"J8+EJT9efC@Y+Pmb1hhV`8Y?GTcf841UkH5Wc^LMQ\beCa@fn8rVd<k5>_2n8$?_:Pt"T+b;;JD4$1rHI3)NMLG#0&i=01/.+$$
%J4eCs>NYq\@p_7J?iK!VRW#VII^+u(K,TfMX;54(UKne65#\'W0Fieolb`%V?:02]B(gt+5nKq\7iiXO%(.PbHf`qD.7M)hb1gj1
%]d"inWe:_a^Ik>\?$Y#3WoH:o8a;d6BkfBQNt>%:$:OD)l7l@1;%1XjK&"r*gJA>ni>I?\2Z"Y)ErE+T#oXpP^8[[G\1Pm'$"rXA
%TCF(-XR*pWH#E#lhd3ASea[Wt8c"!5kcpSg4mPL%"/=5.]Nt7=rj2_IQF:E1%AqNCnnt>Zc`XAkR>C\`'mGYCX\@TZHfOjDII6.L
%L$<X$9iXuV:5PDhmY#?a?i*=nA8>6`_-Ql4cT`9d'n34.09TL`FWe/rEk8&%]u;g'/MF)`SFd^DD3L1?,L$go)7SQ1N@9=FL_\'(
%&XV'>UWKgocUH1)_;ot3rEeQHbu"O3410YG#X5(n<@<J@7%doAK`0drF?hDpq;4aBKhRN6[8en0iqI"*(Vi>=Ph:"6F>+.//MB>'
%%f9*VI*^Cl*;iD0#uO#[j/I2H,1t6jV6u=\_\oC"<J+;o5]4_<@=f+qdQ9YF+?T`EEm%+#-ark;;I-NIh*]5Unqq7);`IGh]E0K(
%7.]bf?3>DdjlZ6"Nen$=#YN@U1JG*IfX,VtOsRmm-edAcEk,6%<F)HDi-5/(T)['OY@o?0F'@3C3L/s5ZYcFuWmtVUl&WTV3`O_`
%DoE(\q<l^pA=/Z?l<#S\N3s"EcMBYcKDa#IB_bia3uE0M]p8_#M"\VHpVLu9fcJFePqQ.7H+Q6=mUIE[BeK(AfX5f]A0k>(q.>Hb
%=(O>.U1KQ@C>s>blN&ckUoHBX.k)q3&N_CsM0EEt'YCSC`JJGulQ%3,`F8pc>pe2oQW$1C"bG?rF9QPO59u([Y`i)8L#M]BPr@/f
%=DKL8]uq4tk?lsiCc,/1BC*\0H$L>gjZuD[\eJYB.8#.R0F1hkaG*U$l#Lie.s6:dW%K<>4YfM)KnI_%/D4`OMTM^"<iOA:OkfEh
%[*hoPiJQqrOW`jr;d#.H4l@0V2\R&Xr@7`Uq@'HY`^Qo*dQ@=1QTOn-J%r;(k;'6,q^$,&,b?$9Bghp5\J'j*7ZfO$g#\*TD=b3X
%N]sQZ5kM9"`rp<B_hd5Mc9[.I!)e45+%jBV>8DBu2.P?tUNOGp55W(`7\:A:GQSH]3k/ad'nXQXKM;m3Ul%-_8O+Lm_Ep*mBV,aN
%?@83b@-=)96SLT7qm!toU/.P9[bI0n@(rGXUiT=/,n;L4_398<XC0P*pQ'2/&btS1YMiHg.[6JJY0moMqVfE>H'OQYa#Q-Th1,4S
%5Q:2bGQ7(i^]'#gr4B`Dn%\`Q^])JrIf6nQs5Ulmj55:L&H6]5l;S;&G(o45p@K%-r\pm6MK=ZR:^,L-WUChlG%J4g793>"Z<DEl
%T"7`b>@=\BVN[gTJW%'dJTbp:Wgj^e"H82Y<^T06$OMsa*G^S?ntskXQE,2-Vch)7?k)/I:lO>BK,8<^#,n)/XK*h,[!i>8!n8-P
%#tf=`"]I2L!;p*J)!BHk!P''LbIY+711pH!SYqH[MB@NXZc7->Z!]'I;6.IY4[6C!l-"iO(/#eU#,[-cFd2e<M#1da:=D`!U_PT,
%1mjL_c)<,4l9pql4\"%W(4O/s\ojF"d[=^ALg.(]X8)<BI+AFQVK`A^/C[D4il$!a;]k2P9,UG6UX\5Lf2Cjs9L+;C''L7_Ok`k(
%=drmKH$).fXl(TS:/S=X)@tRN)k7uR?*"hp6s,_eQ1'f8Loq?Xelo5BlfVJJV5'NiA6kSuSGQ?:g,jKqC48=fKAaeZCR)G?2`Laj
%1@W$D(t@"t1:GqlZDQ#FqiBhT!$F=Nn*"C0LbR5EnK$M.;](bSBSm1_pln?<Beh\g:nsUMVVZ4bb%$Z9i8."La/``Y>gGY/-WN$P
%nP"eqQ`_X`?ZYuE<9j*;@ogF%p,r2'+A,\bT8%]Qid;LtQ+Y^)/VN!-dU@*"G'+`NQf^kf3uR.W\tC*(]aZ@5#G2cT8[4:,@Y:%K
%4%kopK1r!VeCp1XF8*?m<k\df8A?lXK_-cS8<IYb&aNSXdPB?^=aH8=Qf3-cgaIpee/dG9`-rt&mL%.]nSNnK7(YEI0-'-$L"caY
%)@f:^i#<qemS_X-N?mo_0j^p#Nlr,gd_qO@T.M@+F]n97<pto+;HD<0AErTj]=r\K#/2Re!e2LV(JQ>A`QK>D?5VLU1Ppt-g#7,5
%;uoOEFuD!=%gpKYYs=:&!K3XRTUj>:<#ZR9<nNlCpiD1!X)h`bg67R#DEP'k@D<:n[>)8&`e>-&^HosN6LhkNJZfNjaJtBIWo0>)
%bWm]d]?KWA(uUdIPS=.I'N[Qe8=!8p/3VuKRH=%LDQ[knQPdnf+FD[kYE3>0M2q,\_D0$XUh!#%KQ+pk6s"kSUH[?G=utcJ&3ue]
%4%.VWX-hPjXI#Sp@o'd-M&<KK(&GMA"[qC,0uS*oim?(lP0W\XC7oHf`dI[R+\Z$m$bV35s6TDCl#\:-XQEk.?g/AibIu7\+2]T%
%%'8H/;3@_ug+*nuEih?:V?j1N96$90Adqm2`ELlX>/g#+.C],7rhTSNs0Ve&\'S&\'&#_!+@Y@tYmGi;(t!<;2=uT*]6^C].,tVM
%:%N0D_d;+i1KA@*bnu2$Xck4>TtAHB$5EFSZ''aA==Qq0SkClZb5g67Vro,C<l2%*,Jclqh,>NFo'\orpcMHd#6;fLk2HPuES:-+
%X.ee^V'BKWE<NbU=SdV*G"Upu;.%>d,Sp];:ZrQcdpNnn((&dtB>=m,qoP]1(HU86B.]d0a[I5WGsF[>&gC]M=CpdXFH1+kQE!.C
%0caU6&<k(dOYEnC(E*O7C!:g,XXd<5WZ?L0^Upk(K1i7XKcd5D(D'pka(Y<NN0c?P2=)?XUq8S%"'oJ;Es4km,bM.^PP)Ec5"2/g
%o=&8:LZfIYLF.+9]tND@A!)6$k$akE("XLb@%gdEN-CjgFN(`l@Fm%1bk%q2WjZ=:NiuZYX&VgsDR$1jqr9kcgj*gue5Hs;@1j#Y
%VV(B:nGC<7YSgB*g&NH7fuiC(034rfASjTX5b&b3kk\\`FL/*tFUIFS1WBO[G$/QDNQ=*.XY,7%WTQ&';@fkV!FiItQ]lVB9H_XR
%MQtD?CRrKrL?:H[4&bo1*+2YQ6c8Rm&XlCrkJZHXC(M"Wqns.BI&kiWoAb\&e7ci'd>2$Q=7)RPI\@/+^6^9>bU7tmN!m`SS3?3)
%dYS,9K.<oO@9T]ICE$.E6#\AQn!K:(&I\8WbOT-5Z_s-meN:r%YYq$R[mla!XK,1?=GZ@4S5Y>Q(5Pj!U_I)j&+j&R_3I)m!DU$!
%8XHk?6SD[oR"AF$1J12^kX5J4L05*2L7>XP@l'Ppi*14ckXfj/WaJg4kPRY=%OKeo@bF<5?9[)1kKJ-NR:>-Wn.%=F*9<>5os5n3
%SRS'`^^F\qB.4'i-];)Y2)AA4^\,oJ6fBLD*reV`)cKlTR?smU.A"nhU%3N&X7QQ=>kSt-O^B@?fAhi\=A!cCetR:&Z<r.f(W3R[
%(+sD1nWPQhnH3q#I.$CpgtSjsQ2]S07jKP;h$BeKrA7:)gS.]dAt\IANU4C4+*Z&ccZc2qMhcD4<!pWm`jrHD[q\G-Z,k>8#;(q7
%):Hj$lb,_7mVZ&W/IQjDPhe@^B'fB9V$/X!)5^9oD=qcI>N#9m=1,[,W$9Pj]GDF`,L\>X$#aL=[pJ/9-QjY*ETs@m6,BgH5$(C_
%K4?]2f8T)E*n+ED>,`OD^<kBBpJ(=j7Gkc(ZiGF97,*.^!k=Ms^M?[Xbi?(o&;Gjg_[NcEG1UY\YIn[=+A"<OE=QU1K:9h`>,Qu[
%/95`F.r.Y!jD!aPXlao4@pO82*em-Mpt9Z*HFiYY-"3?%/ef\)%udE=#B%(8obu^LK$-Mu@lTEN+\qo:F!#U,2r^EiRd4+g^4"UQ
%!jXJ2kLmbpL,-Y@(fm'q3#@V?2Aj=:.d_3PGd)8>E35ANdQ+o"n./IRhH]eKZ%;@mMtLERBK.q[&].LF4[.&\2V$7$nhn[:L:+E1
%0$pK26mhM,<7Rc?kT;UBbX0g:&`p!)0,`ITPes^6c\AHn6&[A8WDHS'kMC0T]=iGRcF[)+Ga%1q#[46gI"p1Cqm;tfleGD28]*dW
%Tsl*H3uG1^#"qtlUTM(eHYYN1]S%_]W?d-:lE7C1;GXaVNU/LP950i7lE=>(LdUkrHC)&1=^4VWj&iYd\n!ccSJI]WO$?CWeT.st
%$/3K<Zsp5TA0+=1d]d'ulmJ0>V;kkqN6=g;9&=T'EM;<D]#qZ?PldDQQJk>=b<ca@NYCe"D8nZ`'jbNq2*_W![.Cuflt'I?j"aEr
%h4":6s*P87gFCX!)8"VCn@`*TENG14S7UWIgr9pHk@p;mk1^/d:To,p19_0pgAS*&.Po]:gu%T>=aWVDL8i:pW0Y(l556LE)30Ne
%cZ=sW+/]M"Cj:1>aF2@MV)dlU1nc<'Qg@51P9&-5l0mF.p!tZ/<p1(&4q,1q<JX>Xea_3gO'D8DqeSa97njscbd-(0WN>omra\q<
%;sq[?'o%gF"Y?o?O:n147X_b_Yu#)VkJ$@.@kJC;(Q5U!#D^lW!'7fQlSgq0\f&^,$`ig%)CeI%5"2nrJ99JR6*POFbNpqfSGD44
%PRNcmS>0B<m9T4Kdod_qonCD05AmLAD>GKgm26G"+ND8B"//^tr5VnVc('!Zg-_bb!-nf(,nSi\4\UVu;c+[H;JU6tf_oe>*7GT(
%_E+dlQj/gP-gp(?+VI8PprjZLRk4tb*T>^lYGC3q`@UhhKW-SqH!D>LDt$)qGL!M<Yk25Q=TVcN'b$f3g*/;A,/<4B.V']67qSjs
%3H!#qaRZTr2BC=R/gY?GYpaG:K))QL6%R@aoCdLbF0UCacX"FQl_.*to\7k+E@riJ-B,7CasseuA(Dq]9">ZAV<#i+nTbi%c'Epq
%8sE).m->Vn4'^p8L9&c1l&4Zs6tX.#YSPd,2_$J%*+hhS/TD*+c_r[(8kHAR1_#Dl>fdk%;p?4(R;t'O"Ri*,M5<D#<%IU#b&`HS
%OeL@qRJkhnpCq8p)L:?_<jB=#`XuGr8)\6@=A=Dh](gj)Y0'IZ;/tnE_4V%YW%,iV3FM"[hJi=f42.TAH6nEa:LnK<_LN77eG(Q4
%45XK!p>_'+PciM^etK8iO"^7pqMDB\jSVUHa41qWjbP,D*lCk-h*18.QqAW@Z3_O_C?8]cN%`=[,+=9dC=H(e)2pjr?;3RVk"DJB
%EJ<##[A5U')Lc!;Vlm?W!AjBj"(L(;hPJshW!nV![o4.\7FsXqn2X0cktAPYqGjUW?7uoYj)NYMA?'<.o!R$uo$K(aDjU,8RrP6o
%ka0DuO3'p"9Q>m3ii"s5p0K!?YLjK$0kYj]mS>n-c$bC`WOFQ)59X(EO("$m2lnd"1FtrMNTmreg#X.0qVF><I)i&R(/s]?OKRMO
%\Ytf-P?;Ej@29)h3fHHHa?P?#XQ[j/,^b77>O,d5O^Vs]ji6f3Bh.nq<RKf_\SLhsTL.4jlrZDo`*:&g'RLthTS@g_ei8a5Cc+gV
%T@Ys=gS&/-e67p&os<G0H.5UsW-E>E+)UBdZWICEVrH9dJ:5!S=f-@9@d2sKTSR`l=urVmp1#YokWfE4CgFTI:?DU3d3NM]j/U!R
%S0bd1i`<TdL_3UoGq\mSABHr+nZ+`"BHUpQnmAuXcM]@GpoO-7G`'?_Q[[g!0/Uo)KburTZjRdGH.WOW;dg65ET%'4@c%oci0ffr
%NGf`>2H'mK2-NkNU+5O8KAd=S!"3McVqNL//JXi3B+O;9&GnCl)PU@4SO%6"<FO'Whnge"K`5M5gg9dddr=:%Os52?;Vi2!]5#Cd
%K<<\gPSH#51:74H^319],,g?/HtuT<>#*if#Zk)YICXp.90e?Y.p_1Agr9$eOQN*<@Cr*/2Nj1`pc_YdA[:>A+Q0[(k[%,haL$rZ
%<iRJp!.^3nV@+UmGh6,[g@VN!o3a*TL/N"8I^HMOp?bsn.L2Fqq(B4/o<=9J.Ru)0dC'6Pl)7V_p1>qtCdE=MKGTg[-nge,0m%=O
%@4EH"K!e4W8A(k;Ku4fAr2?"JP,WB]1ds+&X5@NCTIB9-e%u>oB:JF>"!?2C6S"X-@,5Vpcm<>Mk]7_V0Bd/,C"e>X[+-PKoqYmn
%I+NcMer`7Xdh64i6RGsHmXYq?a<Wc"/9k;&>)-$C#?4n2o>'RaI#u"*(acEO:p;XE5*ahS0Y,1<;1W>[QoMju9"BcN1-:Foq:u$e
%BGJsu&=ZRc".^+q&o'q5lLt%#^Qsm2/>W.r?)orS[[$0d72,.,fZV%fkX74YbX]BdMLn-!93J"<C5>H(U;^XdPCpbgp-VUUL[sZH
%VNA\f&>'K^NDo(R6DpWZ1R*%OMhp7U,7I!<C;a8oNiNC/?JXL5(a"EUL#5^>4Pg6`P-tn&Rlu04g>EO\a#3.NIX(+85C&J:BRe:P
%0-s6cN$XJg&u\nAeEdjr)C^U&.S4nP4:bBd9eh3Mo1uM@V)^2AokKVk_aG?654o`hq,08Erh^`7;A47!c046[q&F9'?7>Ik+&?NF
%VSCZc'9C.W00])BCk+1+W21O)8:h&jLKLY.lVjZM+'kq&$fOY4$=Z[t'mq%peM,G3en<*e;s?Ulp:Z=(e$9CuSJ<7H>3)PYMk[J/
%0ULQY1CF]:Xu0&"LtA>>_LA^Xns;^\KXXN&h!uEDUV<3_oW@jTOG0^Q+("m-f*]=N!j6so,d.fjl(W4#ntUJD?<`4BiGkKb;Y$tU
%El.]bq/GF_L'jFu'j]C&-8#g:F2G&Q,;gf&1T?_n7.e0C=uZnqWa1CimL(s+pCCTrOu;#ps5]<uBPT&F_WO3I0]m]oq`N3+^dc!?
%BU<Pbppbd@eRFAM<')Q9,G(9ffk*Tf'_fg0Jdi`aTRI:]:<6][7[IZMG^%Cpq!b:X3\^O%@KZSGHaJZCR*STT@sQW7p^d.WN&-tl
%bVR5QX$4eVo<FGK6ZG2F87lM<f2&%81Ub.:A!^dC'TM(HUPp"$0fWp@G,"J##IP^)7C?)r.-#?IG.H'XT:B]X;F-@"j*#-4?NZL\
%q&Mh>H',q3e8i76hHlcmN.4d$&pBJ9"s$T8QK/[C4.Lu=Z\M[`nO1/n,CWH)1.@\s9_LTP,j(_;`)B6fCBu@7KemZrjBeE:`bQmg
%DpahgTl%hT1drujY':Vop6Hq-m]>G7O%UN_bjM>(=\NNjfV^`JfdeI'Lh@6tA#j=#5BHf@'$&Q]Tm3Uoij&p#Ju?:BQ!gmW,!.g_
%Y!Yh2ED9*g+rL48I'_#8Qhnh&'q)4%WIZId5qKlu`X<SEX"Z5iC8"YuQ@HgrJ@]u!AZLkRE1I]-oT7mSc0JsHeqI/ilCsqVIb^Hk
%m>TSZZ/-C`I(VL-L"3YEJ"_A[l93/sgr?D@Cb1_RkUcVV3h5Fr(QrQ3Mg>3^ZNF9ZeN%C;!-Qm\>2W;iL9h3[@@Q%_k`*hkmfi54
%YqX7B#8Q0"Wef^Q#\)3:,G-;]I/U`?6&Moklr[J9euhpT^PW<e&1k1W8#c&<hRJJ_?Ikk@G/Ea0)W41[]ilq4=#'7fhr7U.Q(d7G
%=>pTd\N5YQNu&Yo2%@Icg*Q_AV5U9@EhH>Z[^=T1)-#m?15\P>X?\7K=$\e)[pI$+IjuO9A+fF<fg>:f<*R0!L"C^Kio_4qf6mK(
%P/Dc@&XF>$3p;HJfBH$rfAJ4MPDH&/?-r`=%?LX2qp"K@61B#V8&gno2[RT4(CKB%8JQ[E]U.KeQ\kc5gf^d_HL%Ct0DM`Q42,+F
%/.-H>S-ZpMI'bWI9Lu%'(eZuth>V7YjtUI<aS&ZaIB2L,)VVI;5*K1i'Jf<&h!K8CU.f<t\n_Q,WHg5HD-dpI:51#arA*B+Ab@3\
%,+@Hli5sN76T?"_F:#_npMQ6c^a"5P>?u^*&huVJSt+m)Vl(u$M'g)BY>NlXh`844QcWVu(f`U0%_8CeL.AXo33!6'5B#+SWiZ3Z
%6gA_>[Q[pNbbQF-VD%8KD6/g7P6J07(@uEVF5OP>ON&"q-bV#"[NSdSl&5[M-Ytmj"=s4R3T24.F*%EGq[Ms.drcXF2K=WGMp*m!
%k]pKYjE"sjT2=$D^VGZ:qbi%"_"c3W9%:tOj$GPsn-rlB7Pq.WnuW/[.H:cqgrV3nIIi=Sl,d9dm(]L\XOaM_'00S]>G9s+,3JW:
%rhO>d3]3Q><,"0Q[H:c@\ir9<_C/'Hqj=Z@FpFGL]:Ko(JiFWr?`uJ]T0QQ#V!9`Sr&U*F.7ljmnt+c_Ur`-p=I3qrY*.2>V)-J.
%7KZPOD]jS=Y3J1J<R)FbLj1-0!iFD_1?h55,cDHTSW%h5i]cS21h?kV]Sq\.oPsTW.GW\D8P;3\dC8SOgSqC_c+MkHE&cp*X5<V0
%bpj!#^%'O.c#=d'[Z9fr0$L/;M7q404f/q+2#7A%=CmpROJ<,O"?j!7IC<XY1gZlR1]EbrE&O<!.81?ke1B_KUZ\N47X?"-#J0C_
%F^aVWY3_0K7H3d`F(P&k)W>*A=m.c4VYOcY`0l,4>#1U[m<e9cG4a2%;F`QDJe_ps5\7=W+CF!(TsEpflYWT9\?HZs#)-NuqqTM[
%cI9!X-Sn^h3l=ohMr[Pf-QmVOb%6@hci)&:_=umn<i"u,4AaI9LoLdL.FX5W'][0B=de`s)r/D_K!#DO#[o]CM>Tu*"3Qc_WVmVn
%bng;9`<e:^8^6!K7/,AkPQ@+D[\"sk&PP5dlK]!`b]2ULZ$:GPm.!ATbG&+VK$W7+1lK@7%At$Ni%\O^]TZr-B:r]>;<_E'@d'%:
%?0LJ#J[_q&>0lA[s,&a4@).%4ftX0A&`<hqR*_=SZ&c=O!UO^TTq^`l]<6NJR4KW$ZnJ[PW3R_gVtXq7+UuQTgAt4LJN:`7UoB7o
%=O+#p3$@lL>t6ZO8ogrA\Ah-I;nPdTC;W),nLc/_i=/:7SlsXA?(1M"Ot!3WDa&lMCl6Elg7[U"1-LB71^[<]<VDWrHIAg3^:H"(
%p@3DT%aIR?QT`p5FU/nj@[.p$3+[-1:Q(hq_DKg>bf:Z@?JD_gAdEkYhL)pmR'_TFm\VAWdfq6=$)Vn\-rV)Qng)P`\$Q"W0TEC_
%8oj3F/4.TCP-b@dk?p$RmIIoiDD&8eO.5\aTt;oJ1dPq6=S"_r)S_b2IFM6Bg@XdED1kroc8Ut+`I'bM:KTLPQ<.LZn[tm6:0ZnS
%d)P]mW/q`rb,N\u-#BYQJe?2UE^-E5NP]rjT*lgo`"^rM:Wp_CmWJYpSas>!$D*4l.NR^OG?h$a3B_kGiTBlUX=J:#-e.8"fAaZ5
%gJDuW$q=Q$CYVP7VaoK!1tcFI5H(p@Het>-8@PBr1m9B'h87jGc-BsW]f#YMhKeu!JC?8`NN6HU@bt]iGEjSM_3>oq/l=iCdgf.s
%D,^#Kl4Ae1V=*S]]P\L\RE.$;V6"?r*/+Eb:oBjqeY-l_Gapp(9`#7EQKE$V[F<F<GO&s<6EB?6)-qJrb;mD(gSpjXG#G2`(AUp2
%%TA;W5YgY(hU5n..1gB*CAGS4?YJN(0p,C8HW$3_8fX])aTrmP\5fgaCpJtsb&gf.;m6bT>+EtC&uZ;<6Z`/r/_r592,r#@l=Z1E
%kA2@ANZN)$i5>uJSXh7]$:))bN.Gt1rg2"p1&<K7Q7713g*<EtR7cl0:@iYORNdQsb;nmG6q=+8ii9n.32D_l,+>=U/Os@MHFK1Y
%i\$;cbiQ:qV7iY#-@'X"I"HWWph)b^eq8Kps-icjBT,kT0r/`u+pjgb;*I;,9]8o<rTX5"M/E($b.%#aJNeGEc^4k68Y=>&f?6k9
%fr[:AXLq.JU(Y*hqGR/TkK1ZRCV8phrh"0VZ.IAuX#t[qcd;e)\\i&>lq'p@F#GW+as4/l;68QSR#6]FA.j']T=c&A*[*a7U-&*t
%9=?/l)J4oW[g"^Un@^5nX4GDrdo8`8Ks_M7]hU<#l/!jq>JTEa?E^[=[%_._>UeoD]I#HC'O`a<>QK"m750G!0%MX2>0&bsAV-<Z
%s%"41OU;)cpik2D3j6VV9c]m!4u<*48q5TOY:(+)$GL-1Rp4;"hcMK"Lm?e!-LEot:o4m%X/%H"gnU]Li(UB_^^p"\AY(NO;O=X<
%)KHJUZMN6op9L]^AN"9u>-RWELJmt,hMo6DcLt_<:5`iqe>s$P>5r934;h%@=j6,Vf&k@V=ZurKes\tqe'aeS,+]=/I/I$/p+E55
%e*X!coI>enoCg6^H%\jZ"SA;O>_Qu_ghO\RN/E&+[!(4cE%ocW3<jR9*H7Gu`E'jL?4a+0X*q9u9'EqWXfpk1+/L&D2pjiXq,7gf
%"t)@"nVAk?X7p%8Tn^l-1ASjZ+siVc]n\,JTZZ3^`m5t\\U!ZD]>rAgA9$AR`^ttdSSlGa\r,1sHXou>XaU9HVirD/;&\$F*BUn]
%8d%Y*VC0[&1jte$E8Ym2LsJdH[L/Rc*n[J!H&PE0#0&Ko^_:MN2&;6:Msp%B`KQ/=^Z'Oe0%7LJmT\U&_WNL5nh"kP0J.g316lr:
%LEkXC*<t$(@aZtp+7S23YW#/Wc&NV5Mh,\0&iZY7H<4qj97+dA3rI[Ppeg-!T9!I*.#2Q3:`6[C!&>-SEiXDp^"6eG;-08U#Z->]
%k541Z]G#$A.hb2Y:A*gaD-RINiSA8ihk'ZW.)s"X%'PI'nK'a`_AiH@!g>:)N)E:\AqBN%ZgWN&?ct]mY[X%6&&FJje&^$Sgm`=P
%U0t_NM6F]I;7N9LUr1Q=$K,Zddr]a@[6C-(W'^&!MCGLUq46S7dq,)#jtUFCAhHK`&Q:EI\0k'JaD&"^oH:UA&CtuNB8+9sY1"h]
%04T'$X#Q8qBa:qV4Wn.$2c#k.:Z!)UH&I.-6-N4>qs=s>J"2AJB[n(iB7IPd`Q(`L0A=]!5[>E$(m4o5b0$liF3W>A=t9AZKGB,f
%h9N:C&b!h7`aNN0^)sNT+biq_Td\aTX&C<s;-/sFg2O9dr`<-0Z;bGN8dVcgCRq9f.irpmM8ZtA._BTlY,X2-[lMueh;*hKj/,f4
%Vr_3lBMU+WcP.tG;V@W+lF)<5?m6?$Rr$OYK\$``!rXBZ0*s[Dqc*#n]GGP?UO-9B&CW>2GLH#)%Kbm.L\(e9"76lVIaXj,?"4YP
%\tYm2Upil*(^b;b69$suJLRW#'7CRl>Y\hpd(;qqBPdhu\'miG6H/B;#TQF#o7U$46-Nbkg6-V3a]d\o<HQdp8u8*EC;6A+49sR`
%k'a=ji[IRMW@41e*_#4tj49H4BAkFgHs).MPA/"b-5[-HWj607[#\60@X't\=O*e`R_^,RMh@`aGYHV5^$bL&JUkX!QL?ENrSG$]
%P:l\M_<_F>YWCgCJ$`4Sq?JOJLljC0N<*PSV\o*o%[o**$>V4*`Ho$QYD<47E]0e,='8Qs?":i0V<oMXaQ2g,f.cgPhh3r+X+C#I
%+(]dr+"9!WpDHn0ZjYf*%iP7nDupRkeJ&f0aolQb[`l/><Z_@h]AF.HPV*#eMs;#Z$?AA5f9Z]T2THC=MSO4ZmPZI[c)`4mSeU^C
%b<P6cYIp:%/5;]XdTfc"arc.W:b=Hlo5Lo])?\5gK_,DTIWNZYFuWK/mbD>m"9NQhh!Qm3%.?+)1h2kb<7H?mOF?>=Lt3$[]hE6;
%Ma&pp\%:'.L0j$5C5\G?'l;,sX(p+i,*U06.L*KE_HGlT8:@Ima@3lZ^kLH:JW_Qb9m'%!5%a%IX[9W`1ubnD7K.Dg(20N.QWZf_
%b`MBtW98!%5n/udg*p-<+hF=7E8-GA.ZE:ljd1"hBKMNo!VAY7JkW1bK7gtFHOgN\]p0Btl-i^KN3;")>!`/iH-pmF;6qVa/,mV)
%<62=RC.874K=>[&L6>4jNe[-@PGZ6k`M(K#6::]5?4.m'K;YoH+N[hF0W5r&,F#lH1K,*-mho-t_\rO*X*LOsqmeSI6!0QRqH:jP
%GT,!O1<CW-,2;VqCHdd28>/9/)s.L"A&uJo.rs=d8e:APL&E+V>I0+T13Qf[Ourp1D'10+W47%2?D]l3pqi`qq+&^/Ujq6K;t>U!
%%\(onTNIcX3(@$jHWLkoRc*5Fg`F9[UJ>p6Ef!3T\r7L$MN)r1?qeJHcLP;-[?kDE.JA>:8qO&"QEHJ4hDj1^!bD7QmqOq1HRn3(
%R7ti(HbChd&>IS@d\FBt#33%uPnBd-b(AANU;D,7Gt^K,j(kha*adY]\BEC_^atU@]BuJ^(tpT4U5q%p.P@g9GcD0"aR7g]8cS^u
%MX1k'H`\'urql],^\d3oq;M'4r8CH/Hug2)ju:'TVa(*sT76gT^\bp@rq`htl!Jo>r?'nprh'4YFlj57kPAQSrom4.pm;$Xa$9O]
%h7rlk5Q3kugiU0eDuSnfrp,(1lbE;r78_1u~>
%AI9_PrivateDataEnd
